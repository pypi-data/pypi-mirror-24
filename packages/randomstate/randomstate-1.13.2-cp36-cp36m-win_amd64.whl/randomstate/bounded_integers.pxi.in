_randint_type = {'bool': (0, 2),
                 'int8': (-2**7, 2**7),
                 'int16': (-2**15, 2**15),
                 'int32': (-2**31, 2**31),
                 'int64': (-2**63, 2**63),
                 'uint8': (0, 2**8),
                 'uint16': (0, 2**16),
                 'uint32': (0, 2**32),
                 'uint64': (0, 2**64)
                 }

ctypedef np.npy_bool bool_t

{{
py:
ctypes = (('int64', 'uint64'),
          ('int32', 'uint32'),
          ('int16', 'uint16'),
          ('int8', 'uint8'),
          ('uint64', 'uint64'),
          ('uint32', 'uint32'),
          ('uint16', 'uint16'),
          ('uint8', 'uint8'),
          ('bool','bool'),
)}}

{{for  nptype, utype in ctypes}}

{{ py: otype = nptype + '_' if nptype == 'bool' else nptype }}

cdef object _rand_{{nptype}}(low, high, size, aug_state *state, lock):
    """
    _rand_{{nptype}}(self, low, high, size, rngstate)

    Return random np.{{nptype}} integers between `low` and `high`, inclusive.

    Return random integers from the "discrete uniform" distribution in the
    closed interval [`low`, `high`).  If `high` is None (the default),
    then results are from [0, `low`). On entry the arguments are presumed
    to have been validated for size and order for the np.{{nptype}} type.

    Parameters
    ----------
    low : int
        Lowest (signed) integer to be drawn from the distribution (unless
        ``high=None``, in which case this parameter is the *highest* such
        integer).
    high : int
        If provided, the largest (signed) integer to be drawn from the
        distribution (see above for behavior if ``high=None``).
    size : int or tuple of ints
        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then
        ``m * n * k`` samples are drawn.  Default is None, in which case a
        single value is returned.
    rngstate : encapsulated pointer to rk_state
        The specific type depends on the python version. In Python 2 it is
        a PyCObject, in Python 3 a PyCapsule object.

    Returns
    -------
    out : python scalar or ndarray of np.{{nptype}}
          `size`-shaped array of random integers from the appropriate
          distribution, or a single such random int if `size` not provided.

    """
    cdef {{utype}}_t off, rng, buf
    cdef {{utype}}_t *out
    cdef np.ndarray array
    cdef np.npy_intp cnt

    rng = <{{utype}}_t>(high - low)
    off = <{{utype}}_t>(<{{nptype}}_t>low)
    if size is None:
        with lock:
            random_bounded_{{utype}}_fill(state, off, rng, 1, &buf)
        return np.{{otype}}(<{{nptype}}_t>buf)
    else:
        array = <np.ndarray>np.empty(size, np.{{nptype}})
        cnt = np.PyArray_SIZE(array)
        out = <{{utype}}_t *>np.PyArray_DATA(array)
        with lock, nogil:
            random_bounded_{{utype}}_fill(state, off, rng, cnt, out)
        return array

{{endfor}}

