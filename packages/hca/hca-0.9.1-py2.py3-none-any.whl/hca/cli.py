from __future__ import absolute_import, division, print_function, unicode_literals

import argparse
import inspect
import pkgutil
import sys

from .added_command import AddedCommand
from .api import autogenerated, abstractions


class CLI:
    """Class for interacting with users through a CLI."""

    def __init__(self, test_api_path=None):
        """Initialize the CLI API."""
        self.parser = argparse.ArgumentParser()  # Need to add description based on spec.
        self.commands = {}
        subparsers = self.parser.add_subparsers(help='sub-command help')
        prefix = autogenerated.__name__ + "."
        for importer, modname, _ in pkgutil.iter_modules(autogenerated.__path__, prefix):
            self._add_parsers(importer, modname, subparsers)

        prefix = abstractions.__name__ + "."
        for importer, modname, _ in pkgutil.iter_modules(abstractions.__path__, prefix):
            self._add_parsers(importer, modname, subparsers)

    def _add_parsers(self, importer, modname, subparsers):
        module = importer.find_module(modname).load_module(modname)
        clsmembers = inspect.getmembers(module, inspect.isclass)

        command_class = None
        for class_ in clsmembers:
            if class_[0] != AddedCommand.__name__:
                command_class = class_[1]

        command_class.add_parser(subparsers)
        self.commands[command_class.get_command_name()] = command_class

    def parse_args(self, args):
        """Parse the input arguments into a map from parameter name -> value."""
        namespace = vars(self.parser.parse_args(args))
        namespace = {k: namespace[k] for k in namespace if namespace[k] is not None}
        return namespace

    def make_request(self, args, stream=False):
        """Function to actually make request to api."""
        if not args:
            self.parser.print_help()
            self.parser.exit(1)
        namespace = self.parse_args(args)
        endpoint = args[0]

        command = self.commands.get(endpoint, None)
        if command:
            return command.run_cli(namespace)
        return Exception("This command doesn't exist!")


if __name__ == "__main__":
    cli = CLI()
    response = cli.make_request(sys.argv[1:])
    if response:
        print(response.headers)
        print(response.content)
