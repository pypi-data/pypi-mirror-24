Metadata-Version: 1.1
Name: robber
Version: 1.1.0
Summary: BDD / TDD assertion library for Python
Home-page: https://github.com/vesln/robber.py
Author: Tao Liang
Author-email: tao@synapse-ai.com
License: UNKNOWN
Description: |Build Status| |Coverage Status| |Code Climate|
        
        robber.py - BDD / TDD assertion library for Python.
        ===================================================
        
        Synopsis
        --------
        
        In order to use ``robber``, you need to import ``expect`` from the
        module:
        
        .. code:: python
        
            from robber import expect
        
        Thatâ€™s all. You are good to go.
        
        Assertions
        ~~~~~~~~~~
        
        eq/==
        ^^^^^
        
        Asserts that actual is equal (==) to expected:
        
        .. code:: python
        
            expect(1).to.eq(1)
            expect([1, 2]).to.eq([1, 2])
        
        Also:
        
        .. code:: python
        
            expect(1) == 1
        
        ne/!=
        ^^^^^
        
        Asserts that actual is not equal (!=) to expected:
        
        .. code:: python
        
            expect(1).to.ne(2)
            expect(1).to != 2
            expect(1) != 2
        
        equal
        ^^^^^
        
        Asserts that the target is identical (is) to the expected:
        
        .. code:: python
        
            expect(1).to.equal(1)
        
        true
        ^^^^
        
        Asserts that the target is True:
        
        .. code:: python
        
            expect(True).to.be.true()
        
        false
        ^^^^^
        
        Asserts that the target is False:
        
        .. code:: python
        
            expect(False).to.be.false()
        
        instanceof
        ^^^^^^^^^^
        
        Asserts that the target is an instance of expected:
        
        .. code:: python
        
            expect(obj).to.be.instanceof(Klass)
        
        match
        ^^^^^
        
        Asserts that the target can be matched by a regular expression:
        
        .. code:: python
        
            expect('foo').to.match(r'foo')
        
        respond\_to
        ^^^^^^^^^^^
        
        Asserts that the target responds to a method:
        
        .. code:: python
        
            expect(obj).to.respond_to('method')
        
        truthy
        ^^^^^^
        
        Asserts that the target is truthy:
        
        .. code:: python
        
            expect(['test']).to.be.truthy()
        
        falsy
        ^^^^^
        
        Asserts that the target is falsy:
        
        .. code:: python
        
            expect([]).to.be.falsy()
        
        length
        ^^^^^^
        
        Asserts that the target has a length of expected:
        
        .. code:: python
        
            expect([1, 2]).to.have.length(2)
            expect('str').to.have.length(3)
        
        empty
        ^^^^^
        
        Asserts that the target is empty:
        
        .. code:: python
        
            expect([]).to.be.empty()
            expect('').to.be.empty()
        
        string
        ^^^^^^
        
        Asserts that the target is a string:
        
        .. code:: python
        
            expect('str').to.be.a.string()
        
        integer
        ^^^^^^^
        
        Asserts that the target is an integer:
        
        .. code:: python
        
            expect('str').to.be.an.integer()
        
        float
        ^^^^^
        
        Asserts that the target is floating point number:
        
        .. code:: python
        
            expect(1.0).to.be.a.float()
        
        list
        ^^^^
        
        Asserts that the target is a list:
        
        .. code:: python
        
            expect([1, 2]).to.be.a.list()
        
        dict
        ^^^^
        
        Asserts that the target is a dictionary:
        
        .. code:: python
        
            expect({}).to.be.a.dict()
        
        tuple
        ^^^^^
        
        Asserts that the target is a tuple:
        
        .. code:: python
        
            expect((1, 2)).to.be.a.tuple()
        
        none
        ^^^^
        
        Asserts that the target is None:
        
        .. code:: python
        
            expect(None).to.be.none()
        
        above
        ^^^^^
        
        Asserts that the target is above expected:
        
        .. code:: python
        
            expect(2).to.be.above(1)
        
        below
        ^^^^^
        
        Asserts that the target is below expected:
        
        .. code:: python
        
            expect(1).to.be.below(2)
        
        within
        ^^^^^^
        
        Asserts that the target is within expected:
        
        .. code:: python
        
            expect(2).to.be.within(0, 2)
        
        contain
        ^^^^^^^
        
        Asserts tha
        
        .. |Build Status| image:: https://secure.travis-ci.org/taoenator/robber.py.png
           :target: http://travis-ci.org/taoenator/robber.py
        .. |Coverage Status| image:: https://coveralls.io/repos/github/taoenator/robber.py/badge.svg?branch=master
           :target: https://coveralls.io/github/taoenator/robber.py?branch=master
        .. |Code Climate| image:: https://codeclimate.com/github/vesln/robber.py/badges/gpa.svg
           :target: https://codeclimate.com/github/vesln/robber.py
Platform: UNKNOWN
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Testing
