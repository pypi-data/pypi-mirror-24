#-*- mode: org -*-
#+STARTUP:    align showall hidestars oddeven
#+TITLE:    libtfr - fast multi-taper and reassigned spectrograms
#+AUTHOR:    Dan Meliza
#+EMAIL:     dan@meliza.org
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:nil skip:nil d:t tags:not-in-toc
#+STYLE:    <link rel="stylesheet" type="text/css" href="index.css" />
#+LANGUAGE:   en

Libtfr is a library for calculating multi-taper conventional and
time-frequency reassignment (TFR) spectrograms.

** Why use reassignment spectrograms?

Mainly for readability. Compare the conventional windowed spectrogram
on the right with the reassignment spectrogram on the right (click to
see more detail).

[[file:A7_hanning.png][file:A7_hanning_sm.png]] [[file:A7_tfr.png][file:A7_tfr_sm.png]]

The spectral energy distribution is much sparser in the second image,
and it's easier to see the high-frequency trill (the tone that's
rapidly modulated up and down) right in the middle of
the sound.  For some applications, reassignment spectrograms can
provide much more precise measurements.  

It's important to note that no signal processing tricks can
do away with the fundamental tradeoff in time-frequency /resolution/.
In the images above, the trill gets close enough to the lower-frequency
tonal component that the two start to smear together.  Spectral
resolution can only be increased by increasing the size of the
analysis window, which reduces temporal resolution.

** Why use libtfr?

It's fast.  The library is written on top of the [[http://www.fftw.org][FFTW]] library, one of
the fastest Fourier transformation libraries, and the wrapping code is
written in lightweight C99 code.  On a reasonably modern processor,
libtfr can calculate a multitaper reassignment spectrogram in 1/2
to 1/4 of the duration of the signal, making it usable for realtime
applications.

It's convenient.  The library is well-documented and comes with python
and MATLAB interfaces.

It's free and open-source.
