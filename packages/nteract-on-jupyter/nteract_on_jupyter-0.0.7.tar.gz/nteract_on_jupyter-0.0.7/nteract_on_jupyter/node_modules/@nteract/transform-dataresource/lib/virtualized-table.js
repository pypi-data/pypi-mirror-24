"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactVirtualized = require("react-virtualized");

var _infer = require("./infer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
/* eslint no-confusing-arrow: 0 */
/* eslint no-nested-ternary: 0 */


var _sortBy = require("lodash").sortBy;

var ROW_HEIGHT = 36;
var COLLAPSED_HEIGHT = ROW_HEIGHT * 10;
var EXPANDED_HEIGHT = ROW_HEIGHT * Math.floor((window.innerHeight - 30) / ROW_HEIGHT);

function inferSchema(data) {
  // Take a sampling of rows from data
  var range = Array.from({ length: 10 }, function () {
    return Math.floor(Math.random() * data.length);
  });
  // Separate headers and values
  var headers = Array.from(range.reduce(function (result, row) {
    return new Set([].concat(_toConsumableArray(result), _toConsumableArray(Object.keys(data[row]))));
  }, new Set()));
  var values = range.map(function (row) {
    return Object.values(data[row]);
  });
  // Infer column types and return schema for data
  return (0, _infer.infer)(headers, values);
}

var VirtualizedTable = function (_React$Component) {
  _inherits(VirtualizedTable, _React$Component);

  function VirtualizedTable() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, VirtualizedTable);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = VirtualizedTable.__proto__ || Object.getPrototypeOf(VirtualizedTable)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      data: [],
      schema: { fields: [] },
      sortBy: "",
      sortDirection: _reactVirtualized.SortDirection.ASC
    }, _this.sort = function (_ref2) {
      var sortBy = _ref2.sortBy,
          sortDirection = _ref2.sortDirection;

      var data = _sortBy(_this.props.data, [sortBy]);
      _this.state.data = sortDirection === _reactVirtualized.SortDirection.DESC ? data.reverse() : data;
      _this.setState({ sortBy: sortBy, sortDirection: sortDirection });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(VirtualizedTable, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var data = this.props.data;
      var schema = this.props.schema || inferSchema(this.props.data);
      this.setState({ data: data, schema: schema });
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var data = nextProps.data;
      var schema = nextProps.schema || inferSchema(nextProps.data);
      this.setState({ data: data, schema: schema });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var rowCount = this.state.data.length;
      var height = rowCount * ROW_HEIGHT;
      return _react2.default.createElement(
        _reactVirtualized.AutoSizer,
        { disableHeight: true },
        function (_ref3) {
          var width = _ref3.width;
          return _react2.default.createElement(
            _reactVirtualized.Table
            // ref={ref => this.ref = ref}
            ,
            { className: "table"
              // disableHeader={disableHeader}
              // headerClassName="th"
              , headerHeight: ROW_HEIGHT
              // headerStyle={{
              //   fontWeight: 600,
              //   textAlign: 'right',
              //   // border: '1px solid #ddd',
              //   // padding: '6px 13px'
              //   textTransform: 'none',
              //   outline: 0
              // }}
              , height: _this2.props.expanded ? EXPANDED_HEIGHT : height < COLLAPSED_HEIGHT ? height : COLLAPSED_HEIGHT
              // noRowsRenderer={this._noRowsRenderer}
              // overscanRowCount={overscanRowCount}
              , rowClassName: function rowClassName(_ref4) {
                var index = _ref4.index;
                return index === -1 ? "th" : "tr";
              },
              rowHeight: ROW_HEIGHT,
              rowGetter: function rowGetter(_ref5) {
                var index = _ref5.index;
                return _this2.state.data[index];
              },
              rowCount: rowCount,
              rowStyle: {
                padding: 0,
                border: "none"
              }
              // scrollToIndex={scrollToIndex}
              , sort: _this2.sort,
              sortBy: _this2.state.sortBy,
              sortDirection: _this2.state.sortDirection
              // style={{
              //   borderCollapse: 'collapse',
              //   boxSizing: 'border-box'
              // }}
              , width: width
            },
            _this2.state.schema.fields.map(function (field, fieldIndex) {
              return _react2.default.createElement(_reactVirtualized.Column, {
                key: fieldIndex,
                label: "" + field.name
                // cellDataGetter={({ columnData, dataKey, rowData }) =>
                //   rowData
                // }
                , dataKey: field.name
                // disableSort={!this._isSortEnabled()}
                , width: 150,
                flexGrow: 1,
                flexShrink: 1
              });
            })
          );
        }
      );
    }
  }]);

  return VirtualizedTable;
}(_react2.default.Component);

exports.default = VirtualizedTable;