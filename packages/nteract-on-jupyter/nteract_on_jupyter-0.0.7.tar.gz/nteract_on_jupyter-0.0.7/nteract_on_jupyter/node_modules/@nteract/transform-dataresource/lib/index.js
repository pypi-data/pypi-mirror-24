"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _virtualizedGrid = require("./virtualized-grid");

var _virtualizedGrid2 = _interopRequireDefault(_virtualizedGrid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import VirtualizedTable from './virtualized-table';

var DataResourceTransform = function (_React$Component) {
  _inherits(DataResourceTransform, _React$Component);

  function DataResourceTransform() {
    _classCallCheck(this, DataResourceTransform);

    return _possibleConstructorReturn(this, (DataResourceTransform.__proto__ || Object.getPrototypeOf(DataResourceTransform)).apply(this, arguments));
  }

  _createClass(DataResourceTransform, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate() {
      return true;
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          _props$data = _props.data,
          data = _props$data.data,
          schema = _props$data.schema,
          theme = _props.theme,
          expanded = _props.expanded;

      return _react2.default.createElement(_virtualizedGrid2.default, {
        data: data,
        schema: schema,
        theme: theme,
        expanded: expanded,
        style: { marginRight: "10px" }
      });
    }
  }]);

  return DataResourceTransform;
}(_react2.default.Component);

DataResourceTransform.MIMETYPE = "application/vnd.dataresource+json";
exports.default = DataResourceTransform;