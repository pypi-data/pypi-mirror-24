"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactVirtualized = require("react-virtualized");

var _infer = require("./infer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function getSampleRows(data, sampleSize) {
  return Array.from({ length: sampleSize }, function () {
    var index = Math.floor(Math.random() * data.length);
    return data[index];
  });
}

function inferSchema(data, sampleSize) {
  var sampleRows = getSampleRows(data, sampleSize);
  var headers = Array.from(sampleRows.reduce(function (result, row) {
    return new Set([].concat(_toConsumableArray(Array.from(result)), _toConsumableArray(Object.keys(row))));
  }, new Set()));
  var values = sampleRows.map(function (row) {
    return Object.values(row);
  });
  return (0, _infer.infer)(headers, values);
}

function getState(props) {
  var data = props.data;
  var schema = props.schema || inferSchema(data, props.sampleSize);
  var columns = schema.fields.map(function (field) {
    return field.name;
  });
  var headers = columns.reduce(function (result, column) {
    return _extends({}, result, _defineProperty({}, column, column));
  }, {});
  return {
    data: [headers].concat(_toConsumableArray(data)),
    schema: schema
  };
}

var VirtualizedGrid = function (_React$Component) {
  _inherits(VirtualizedGrid, _React$Component);

  function VirtualizedGrid() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, VirtualizedGrid);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = VirtualizedGrid.__proto__ || Object.getPrototypeOf(VirtualizedGrid)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      data: [],
      schema: { fields: [] }
    }, _this.cellRenderer = function (_ref2) {
      var columnIndex = _ref2.columnIndex,
          key = _ref2.key,
          parent = _ref2.parent,
          rowIndex = _ref2.rowIndex,
          style = _ref2.style;
      var _this$state$schema$fi = _this.state.schema.fields[columnIndex],
          column = _this$state$schema$fi.name,
          type = _this$state$schema$fi.type;

      var value = _this.state.data[rowIndex][column];
      return _react2.default.createElement(
        "div",
        {
          key: key,
          style: styles.cell({
            columnIndex: columnIndex,
            rowIndex: rowIndex,
            style: style,
            type: type,
            theme: _this.props.theme
          })
        },
        value
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(VirtualizedGrid, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var state = getState(this.props);
      this.setState(state);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var state = getState(nextProps);
      this.setState(state);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var rowCount = this.state.data.length;
      var _props = this.props,
          rowHeight = _props.rowHeight,
          maxRows = _props.maxRows;

      var maxHeight = rowCount * rowHeight > maxRows * rowHeight ? maxRows * rowHeight : rowCount * rowHeight;
      return _react2.default.createElement(
        _reactVirtualized.AutoSizer,
        { disableHeight: true },
        function (_ref3) {
          var width = _ref3.width;
          return _react2.default.createElement(
            _reactVirtualized.ColumnSizer,
            {
              columnMaxWidth: _this2.props.columnMaxWidth,
              columnMinWidth: _this2.props.columnMinWidth,
              columnCount: _this2.state.schema.fields.length,
              width: width
            },
            function (_ref4) {
              var adjustedWidth = _ref4.adjustedWidth,
                  getColumnWidth = _ref4.getColumnWidth,
                  registerChild = _ref4.registerChild;
              return _react2.default.createElement(_reactVirtualized.MultiGrid, {
                ref: registerChild,
                cellRenderer: _this2.cellRenderer,
                columnCount: _this2.state.schema.fields.length,
                columnWidth: getColumnWidth,
                fixedColumnCount: 1,
                fixedRowCount: 1,
                height: _this2.props.height || maxHeight,
                overscanColumnCount: 15,
                overscanRowCount: 150,
                rowCount: rowCount,
                rowHeight: rowHeight,
                width: _this2.props.width || adjustedWidth
              });
            }
          );
        }
      );
    }
  }]);

  return VirtualizedGrid;
}(_react2.default.Component);

VirtualizedGrid.defaultProps = {
  theme: "light",
  rowHeight: 36,
  maxRows: 10,
  columnMinWidth: 100,
  columnMaxWidth: 300,
  sampleSize: 10
};
exports.default = VirtualizedGrid;


var styles = {
  cell: function cell(_ref5) {
    var columnIndex = _ref5.columnIndex,
        rowIndex = _ref5.rowIndex,
        style = _ref5.style,
        type = _ref5.type,
        theme = _ref5.theme;
    return _extends({}, style, {
      boxSizing: "border-box",
      padding: "0.5em 1em",
      border: theme === "nteract" ? "1px solid #495F7D" : "1px solid #ddd",
      overflow: "hidden",
      whiteSpace: "nowrap",
      textOverflow: "ellipsis"
    }, rowIndex !== 0 ? { borderTop: "none" } : {}, columnIndex !== 0 ? { borderLeft: "none" } : {}, rowIndex % 2 === 0 && !(rowIndex === 0 || columnIndex === 0) ? theme === "nteract" ? { background: "rgba(255,255,255,0.075)" } : { background: "rgba(0, 0, 0, 0.03)" } : {}, rowIndex === 0 || columnIndex === 0 ? theme === "nteract" ? {
      background: "rgba(0,0,0,0.25)",
      fontWeight: "bold"
    } : {
      background: "rgba(0, 0, 0, 0.06)",
      fontWeight: "bold"
    } : {}, !(rowIndex === 0 || columnIndex === 0) && (type === "number" || type === "integer") ? { textAlign: "right" } : { textAlign: "left" });
  }
};