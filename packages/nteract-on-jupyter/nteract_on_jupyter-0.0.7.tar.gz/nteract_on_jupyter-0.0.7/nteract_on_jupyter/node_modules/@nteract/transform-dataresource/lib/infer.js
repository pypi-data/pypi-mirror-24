"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _countBy2 = require("lodash/countBy");

var _countBy3 = _interopRequireDefault(_countBy2);

var _upperFirst2 = require("lodash/upperFirst");

var _upperFirst3 = _interopRequireDefault(_upperFirst2);

var _take2 = require("lodash/take");

var _take3 = _interopRequireDefault(_take2);

var _map2 = require("lodash/map");

var _map3 = _interopRequireDefault(_map2);

var _isEmpty2 = require("lodash/isEmpty");

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _includes2 = require("lodash/includes");

var _includes3 = _interopRequireDefault(_includes2);

var _isString2 = require("lodash/isString");

var _isString3 = _interopRequireDefault(_isString2);

var _extend2 = require("lodash/extend");

var _extend3 = _interopRequireDefault(_extend2);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.infer = infer;

var _types = require("./types");

var types = _interopRequireWildcard(_types);

var _config = require("./config");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Infer Table Schema descriptor
 * https://github.com/frictionlessdata/tableschema-js#infer
 */
function infer(source, _ref) {
  var headers = _ref.headers;
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  // Set up default options
  var opts = (0, _extend3.default)({
    rowLimit: null,
    explicit: false,
    primaryKey: null,
    cast: {}
  }, options),
      descriptor = { fields: [] };

  if (opts.primaryKey) {
    if ((0, _isString3.default)(opts.primaryKey)) {
      opts.primaryKey = [opts.primaryKey];
    }
    descriptor.primaryKey = opts.primaryKey;
  }

  descriptor.fields = headers.map(function (header) {
    var constraints = {},
        field = {
      name: header,
      title: "",
      description: ""
    };

    if (opts.explicit) {
      constraints.required = true;
    }

    if ((0, _includes3.default)(opts.primaryKey, header)) {
      constraints.unique = true;
    }

    if (!(0, _isEmpty3.default)(constraints)) {
      field.constraints = constraints;
    }

    return field;
  });

  headers.forEach(function (header, index) {
    var columnValues = (0, _map3.default)(source, function (value) {
      return value[index];
    });
    var field = descriptor.fields[index];

    if (opts.rowLimit) {
      columnValues = (0, _take3.default)(columnValues, opts.rowLimit);
    }

    field.type = _guessType(columnValues);

    if (opts.cast && opts.cast.hasOwnProperty.call(opts.cast, field.type)) {
      field.format = opts.cast[field.type].format;
    }

    if (!field.format) {
      field.format = "default";
    }
  });

  return descriptor;
}

// Internal

var _TYPE_ORDER = ["duration", "geojson", "geopoint", "object", "array", "datetime", "time", "date", "integer", "number", "boolean", "string", "any"];

function _guessType(values) {
  // Get matching types
  var matches = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var value = _step.value;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = _TYPE_ORDER[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var type = _step3.value;

          var cast = types["cast" + (0, _upperFirst3.default)(type)];
          var result = cast("default", value);
          if (result !== _config.ERROR) {
            matches.push(type);
            break;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }

    // Get winner type
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var winner = "any";
  var count = 0;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = Object.entries((0, _countBy3.default)(matches))[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _step2$value = _slicedToArray(_step2.value, 2),
          itemType = _step2$value[0],
          itemCount = _step2$value[1];

      if (itemCount > count) {
        winner = itemType;
        count = itemCount;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return winner;
}