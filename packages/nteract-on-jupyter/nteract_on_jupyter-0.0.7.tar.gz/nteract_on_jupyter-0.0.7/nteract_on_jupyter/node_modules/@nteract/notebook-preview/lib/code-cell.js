"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _immutable = require("immutable");

var _displayArea = require("@nteract/display-area");

var _inputs = require("./inputs");

var _inputs2 = _interopRequireDefault(_inputs);

var _editor = require("./editor");

var _editor2 = _interopRequireDefault(_editor);

var _latex = require("./latex");

var _latex2 = _interopRequireDefault(_latex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CodeCell = function (_React$PureComponent) {
  _inherits(CodeCell, _React$PureComponent);

  function CodeCell() {
    _classCallCheck(this, CodeCell);

    return _possibleConstructorReturn(this, (CodeCell.__proto__ || Object.getPrototypeOf(CodeCell)).apply(this, arguments));
  }

  _createClass(CodeCell, [{
    key: "isOutputHidden",
    value: function isOutputHidden() {
      return this.props.cell.getIn(["metadata", "outputHidden"]);
    }
  }, {
    key: "isInputHidden",
    value: function isInputHidden() {
      return this.props.sourceHidden || this.props.cell.getIn(["metadata", "inputHidden"]) || this.props.cell.getIn(["metadata", "hide_input"]);
    }
  }, {
    key: "isOutputExpanded",
    value: function isOutputExpanded() {
      return this.props.cell.getIn(["metadata", "outputExpanded"], true);
    }
  }, {
    key: "render",
    value: function render() {
      return _react2.default.createElement(
        "div",
        { className: this.props && this.props.running ? "cell-running" : "" },
        !this.isInputHidden() ? _react2.default.createElement(
          "div",
          { className: "input-container" },
          _react2.default.createElement(_inputs2.default, {
            executionCount: this.props.cell.get("execution_count"),
            running: this.props.running
          }),
          _react2.default.createElement(_editor2.default, {
            completion: true,
            id: this.props.id,
            input: this.props.cell.get("source"),
            language: this.props.language,
            theme: this.props.theme,
            tip: this.props.tip,
            cellFocused: false,
            onChange: function onChange() {},
            onFocusChange: function onFocusChange() {},
            channels: {},
            cursorBlinkRate: 0,
            executionState: "not connected",
            editorFocused: false,
            focusAbove: function focusAbove() {},
            focusBelow: function focusBelow() {}
          })
        ) : null,
        _react2.default.createElement(
          _latex2.default,
          null,
          _react2.default.createElement(
            "div",
            { className: "outputs" },
            _react2.default.createElement(_displayArea.Display, {
              className: "outputs-display",
              outputs: this.props.cell.get("outputs").toJS(),
              displayOrder: this.props.displayOrder,
              transforms: this.props.transforms,
              theme: this.props.theme,
              tip: this.props.tip,
              expanded: this.isOutputExpanded(),
              isHidden: this.isOutputHidden(),
              models: this.props.models.toJS()
            })
          )
        )
      );
    }
  }]);

  return CodeCell;
}(_react2.default.PureComponent);

CodeCell.defaultProps = {
  running: false,
  tabSize: 4,
  models: new _immutable.Map()
};
exports.default = CodeCell;