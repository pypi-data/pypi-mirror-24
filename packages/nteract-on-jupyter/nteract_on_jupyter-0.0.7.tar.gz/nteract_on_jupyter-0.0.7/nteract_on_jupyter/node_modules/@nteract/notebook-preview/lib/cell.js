"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cell = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _immutable = require("immutable");

var _codeCell = require("./code-cell");

var _codeCell2 = _interopRequireDefault(_codeCell);

var _markdownCell = require("./markdown-cell");

var _markdownCell2 = _interopRequireDefault(_markdownCell);

var _rawCell = require("./raw-cell");

var _rawCell2 = _interopRequireDefault(_rawCell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
/* eslint-disable react/prefer-stateless-function */


var Cell = exports.Cell = function (_React$PureComponent) {
  _inherits(Cell, _React$PureComponent);

  function Cell() {
    _classCallCheck(this, Cell);

    return _possibleConstructorReturn(this, (Cell.__proto__ || Object.getPrototypeOf(Cell)).apply(this, arguments));
  }

  _createClass(Cell, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var cell = this.props.cell;
      var type = cell.get("cell_type");

      return _react2.default.createElement(
        "div",
        { className: "cell " + (type === "markdown" ? "text" : "code") },
        function () {
          switch (type) {
            case "markdown":
              return _react2.default.createElement(_markdownCell2.default, {
                cell: cell,
                id: _this2.props.id,
                theme: _this2.props.theme
              });
            case "code":
              return _react2.default.createElement(_codeCell2.default, {
                cell: cell,
                id: _this2.props.id,
                theme: _this2.props.theme,
                tip: _this2.props.tip,
                language: _this2.props.language,
                displayOrder: _this2.props.displayOrder,
                transforms: _this2.props.transforms,
                sourceHidden: _this2.props.sourceHidden
              });
            case "raw":
              return _react2.default.createElement(_rawCell2.default, { cell: cell });
            default:
              return _react2.default.createElement(_rawCell2.default, { cell: cell });
          }
          // This is a bit IIFE
        }()
      );
    }
  }]);

  return Cell;
}(_react2.default.PureComponent);

exports.default = Cell;