"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Notebook = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.getLanguageMode = getLanguageMode;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _immutable = require("immutable");

var _transforms = require("@nteract/transforms");

var _cell = require("./cell");

var _cell2 = _interopRequireDefault(_cell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// TODO: Remove after provider refactor finished
var PropTypes = require("prop-types");

function getLanguageMode(notebook) {
  // The syntax highlighting language should be set in the language info
  // object.  First try codemirror_mode, then name, and fallback on 'null'.
  var language = notebook.getIn(["metadata", "language_info", "codemirror_mode", "name"], notebook.getIn(["metadata", "language_info", "codemirror_mode"], notebook.getIn(["metadata", "language_info", "name"], "text")));
  return language;
}

var Notebook = exports.Notebook = function (_React$PureComponent) {
  _inherits(Notebook, _React$PureComponent);

  function Notebook() {
    _classCallCheck(this, Notebook);

    var _this = _possibleConstructorReturn(this, (Notebook.__proto__ || Object.getPrototypeOf(Notebook)).call(this));

    _this.createCellElement = _this.createCellElement.bind(_this);
    return _this;
  }

  _createClass(Notebook, [{
    key: "createCellElement",
    value: function createCellElement(id) {
      var cellMap = this.props.notebook.get("cellMap");
      var cell = cellMap.get(id);

      // Propagated from the hide_(all)_input nbextension
      var sourceHidden = this.props.notebook.getIn(["metadata", "hide_input"], false);

      return _react2.default.createElement(
        "div",
        { className: "cell-container", key: "cell-container-" + id },
        _react2.default.createElement(
          "div",
          { className: "draggable-cell" },
          _react2.default.createElement(_cell2.default, {
            key: id,
            id: id,
            cell: cell,
            tip: false,
            displayOrder: this.props.displayOrder,
            transforms: this.props.transforms,
            theme: this.props.theme,
            language: getLanguageMode(this.props.notebook),
            sourceHidden: sourceHidden
          })
        )
      );
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.props.notebook) {
        return _react2.default.createElement("div", { className: "notebook" });
      }

      var cellOrder = this.props.notebook.get("cellOrder");
      return _react2.default.createElement(
        "div",
        null,
        _react2.default.createElement(
          "div",
          { className: "notebook" },
          cellOrder.map(this.createCellElement)
        )
      );
    }
  }]);

  return Notebook;
}(_react2.default.PureComponent);

Notebook.defaultProps = {
  displayOrder: _transforms.displayOrder,
  transforms: _transforms.transforms
};
exports.default = Notebook;