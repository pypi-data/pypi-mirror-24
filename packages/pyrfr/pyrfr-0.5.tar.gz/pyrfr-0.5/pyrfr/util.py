# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_util')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_util')
    _util = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_util', [dirname(__file__)])
        except ImportError:
            import _util
            return _util
        try:
            _mod = imp.load_module('_util', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _util = swig_import_helper()
    del swig_import_helper
else:
    import _util
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def disjunction(source, dest):
    return _util.disjunction(source, dest)
disjunction = _util.disjunction

def any_true(b_vector, indices):
    return _util.any_true(b_vector, indices)
any_true = _util.any_true
class run_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, run_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, run_stats, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def push(self, x):
        return _util.run_stats_push(self, x)

    def pop(self, x):
        return _util.run_stats_pop(self, x)

    def divide_sdm_by(self, value):
        return _util.run_stats_divide_sdm_by(self, value)

    def number_of_points(self):
        return _util.run_stats_number_of_points(self)

    def mean(self):
        return _util.run_stats_mean(self)

    def sum(self):
        return _util.run_stats_sum(self)

    def sum_of_squares(self):
        return _util.run_stats_sum_of_squares(self)

    def variance_population(self):
        return _util.run_stats_variance_population(self)

    def variance_sample(self):
        return _util.run_stats_variance_sample(self)

    def variance_MSE(self):
        return _util.run_stats_variance_MSE(self)

    def std_population(self):
        return _util.run_stats_std_population(self)

    def std_sample(self):
        return _util.run_stats_std_sample(self)

    def std_unbiased_gaussian(self):
        return _util.run_stats_std_unbiased_gaussian(self)

    def __iadd__(self, other):
        return _util.run_stats___iadd__(self, other)

    def __mul__(self, a):
        return _util.run_stats___mul__(self, a)

    def __add__(self, *args):
        return _util.run_stats___add__(self, *args)

    def __sub__(self, *args):
        return _util.run_stats___sub__(self, *args)

    def __isub__(self, other):
        return _util.run_stats___isub__(self, other)

    def numerically_equal(self, other, rel_error):
        return _util.run_stats_numerically_equal(self, other, rel_error)
    __swig_destroy__ = _util.delete_run_stats
    __del__ = lambda self: None
run_stats_swigregister = _util.run_stats_swigregister
run_stats_swigregister(run_stats)

def running_statistics(*args):
    val = _util.new_running_statistics(*args)
    return val

class weighted_running_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, weighted_running_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, weighted_running_stats, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _util.new_weighted_running_stats(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push(self, x, weight):
        return _util.weighted_running_stats_push(self, x, weight)

    def pop(self, x, weight):
        return _util.weighted_running_stats_pop(self, x, weight)

    def squared_deviations_from_the_mean(self):
        return _util.weighted_running_stats_squared_deviations_from_the_mean(self)

    def divide_sdm_by(self, fraction, min_weight):
        return _util.weighted_running_stats_divide_sdm_by(self, fraction, min_weight)

    def mean(self):
        return _util.weighted_running_stats_mean(self)

    def sum_of_weights(self):
        return _util.weighted_running_stats_sum_of_weights(self)

    def sum_of_squares(self):
        return _util.weighted_running_stats_sum_of_squares(self)

    def variance_population(self):
        return _util.weighted_running_stats_variance_population(self)

    def variance_unbiased_frequency(self):
        return _util.weighted_running_stats_variance_unbiased_frequency(self)

    def variance_unbiased_importance(self):
        return _util.weighted_running_stats_variance_unbiased_importance(self)

    def __iadd__(self, other):
        return _util.weighted_running_stats___iadd__(self, other)

    def __sub__(self, other):
        return _util.weighted_running_stats___sub__(self, other)

    def __isub__(self, other):
        return _util.weighted_running_stats___isub__(self, other)

    def __mul__(self, a):
        return _util.weighted_running_stats___mul__(self, a)

    def __add__(self, *args):
        return _util.weighted_running_stats___add__(self, *args)

    def multiply_weights_by(self, a):
        return _util.weighted_running_stats_multiply_weights_by(self, a)

    def numerically_equal(self, other, rel_error):
        return _util.weighted_running_stats_numerically_equal(self, other, rel_error)

    def get_weight_statistics(self):
        return _util.weighted_running_stats_get_weight_statistics(self)
    __swig_destroy__ = _util.delete_weighted_running_stats
    __del__ = lambda self: None
weighted_running_stats_swigregister = _util.weighted_running_stats_swigregister
weighted_running_stats_swigregister(weighted_running_stats)

# This file is compatible with both classic and new-style classes.


