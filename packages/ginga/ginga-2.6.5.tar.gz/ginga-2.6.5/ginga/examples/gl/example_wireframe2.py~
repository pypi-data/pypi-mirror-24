#! /usr/bin/env python
#
# example_wireframe.py -- Example of a 3D plot with octahedron and wireframe
#
# This is open-source software licensed under a BSD license.
# Please see the file LICENSE.txt for details.
#
"""
Example of 3D plotting in Ginga

Plots an octahedron within a wireframe sphere.

Run with no parameters.  Scroll to zoom in/out, click and drag to orbit.
"""
from __future__ import print_function
import sys, os
import logging
import numpy as np

from ginga import toolkit
toolkit.use('qt5')

from ginga import colors
from ginga.gw import Widgets, Viewers
from ginga.opengl.ImageViewQtGL import CanvasView
from ginga.canvas.CanvasObject import get_canvas_types
from ginga.misc import log

STD_FORMAT = '%(asctime)s | %(levelname)1.1s | %(filename)s:%(lineno)d (%(funcName)s) | %(message)s'


class Viewer(object):

    def __init__(self, app):
        super(Viewer, self).__init__()
        self.logger = app.logger
        self.dc = get_canvas_types()

        top = app.make_window(title="Octahedron")

        vw = CanvasView(self.logger)
        vw.ui_set_active(True)
        self.vw = vw

        # quick hack to get 'u' to invoke hidden camera mode
        bm = vw.get_bindmap()
        bm.mode_map['u'] = bm.mode_map['mode_camera']

        bd = vw.get_bindings()
        bd.enable_all(True)

        # canvas that we will draw on
        canvas = self.dc.DrawingCanvas()
        canvas.set_surface(vw)
        self.canvas = canvas
        # add canvas to view
        private_canvas = vw.get_canvas()
        private_canvas.add(canvas)

        # add little mode indicator that shows keyboard modal states
        #vw.show_mode_indicator(True, corner='ur')

        w = vw.get_widget()
        ww = Widgets.wrap(vw.get_widget())

        vbox = Widgets.VBox()
        vbox.set_border_width(2)
        vbox.set_spacing(1)
        vbox.add_widget(ww, stretch=1)

        hbox = Widgets.HBox()
        hbox.set_border_width(4)

        wquit = Widgets.Button("Quit")
        wquit.add_callback('activated', self.quit)
        hbox.add_widget(Widgets.Label(''), stretch=1)
        hbox.add_widget(wquit)

        vbox.add_widget(hbox)

        top.set_widget(vbox)

    def plot_octohedron(self, r):
        # octahedron
        A = [ 0.17770898,  0.72315927,  0.66742804]
        B = [-0.65327074, -0.4196453 ,  0.63018661]
        C = [ 0.65382635,  0.42081934, -0.62882604]
        D = [-0.17907021, -0.72084723, -0.66956189]
        E = [-0.73452809,  0.5495376 , -0.39809158]
        F = [ 0.73451554, -0.55094017,  0.39617148]
        octo = [[E, A, B],
                [E, B, D],
                [E, D, C],
                [E, C, A],
                [F, A, B],
                [F, B, D],
                [F, D, C],
                [F, C, A],
                ]
        clrs = [('gray%d' % (i*10+5)) for i in range(8)]
        for i, tri in enumerate(octo):
            new_tri = [np.asarray(pt) * r for pt in tri]
            self.canvas.add(self.dc.Polygon(new_tri, color='yellow',
                                            fill=True, fillcolor=clrs[i],
                                            fillalpha=0.4))

    def get_wireframe(self, x, y, z, **kwargs):
        """TODO: this would make a great utility function for ginga"""
        n, m = x.shape
        objs = []
        for i in range(n):
            pts = np.asarray([(x[i][j], y[i][j], z[i][j])
                              for j in range(m)])
            objs.append(self.dc.Path(pts, **kwargs))

        for j in range(m):
            pts = np.asarray([(x[i][j], y[i][j], z[i][j])
                              for i in range(n)])
            objs.append(self.dc.Path(pts, **kwargs))

        return self.dc.CompoundObject(*objs)

    def plot_sphere(self, r):
        # sphere
        u = np.linspace(0, np.pi, 30)
        v = np.linspace(0, 2 * np.pi, 30)
        x = np.outer(np.sin (u), np.sin (v)) * r
        y = np.outer(np.sin (u), np.cos (v)) * r
        z = np.outer(np.cos (u), np.ones_like (v)) * r

        wf = self.get_wireframe(x, y, z, color='cyan', alpha=0.3)
        self.canvas.add(wf)


# build gui
logger = log.get_logger('example', level=20, use_stderr=True)

app = Widgets.Application(logger)

w = Viewer(app)
w.resize(512, 512)
w.show()

r = 100
w.plot_octohedron(r)
w.plot_sphere(r)

app.mainloop()

# END
