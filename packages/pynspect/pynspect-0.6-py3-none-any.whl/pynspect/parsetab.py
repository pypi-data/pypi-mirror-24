
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'EXP_ALL OP_PLUS OP_MINUS OP_TIMES OP_DIVIDE OP_MODULO OP_OR OP_XOR OP_AND OP_NOT OP_EXISTS OP_OR_P OP_XOR_P OP_AND_P OP_LIKE OP_IN OP_IS OP_EQ OP_NE OP_GT OP_GE OP_LT OP_LE COMMA LPAREN RPAREN LBRACK RBRACK IPV4 IPV6 INTEGER FLOAT CONSTANT VARIABLEexpression : xor_expression OP_OR expression\n                      | xor_expressionxor_expression : and_expression OP_XOR xor_expression\n                          | and_expressionand_expression : or_p_expression OP_AND and_expression\n                          | or_p_expressionor_p_expression : xor_p_expression OP_OR_P or_p_expression\n                      | xor_p_expressionxor_p_expression : and_p_expression OP_XOR_P xor_p_expression\n                          | and_p_expressionand_p_expression : not_expression OP_AND_P and_p_expression\n                          | not_expressionnot_expression : OP_NOT ex_expression\n                          | ex_expressionex_expression : OP_EXISTS cmp_expression\n                         | cmp_expressioncmp_expression : term OP_LIKE cmp_expression\n                          | term OP_IN cmp_expression\n                          | term OP_IS cmp_expression\n                          | term OP_EQ cmp_expression\n                          | term OP_NE cmp_expression\n                          | term OP_GT cmp_expression\n                          | term OP_GE cmp_expression\n                          | term OP_LT cmp_expression\n                          | term OP_LE cmp_expression\n                          | termterm : factor OP_PLUS term\n                | factor OP_MINUS term\n                | factor OP_TIMES term\n                | factor OP_DIVIDE term\n                | factor OP_MODULO term\n                | factorfactor : IPV4\n                  | IPV6\n                  | INTEGER\n                  | FLOAT\n                  | VARIABLE\n                  | CONSTANT\n                  | LBRACK list RBRACK\n                  | LPAREN expression RPARENlist : IPV4\n                | IPV6\n                | INTEGER\n                | FLOAT\n                | VARIABLE\n                | CONSTANT\n                | IPV4 COMMA list\n                | IPV6 COMMA list\n                | INTEGER COMMA list\n                | FLOAT COMMA list\n                | VARIABLE COMMA list\n                | CONSTANT COMMA list'
    
_lr_action_items = {'OP_NOT':([0,12,23,24,25,35,50,51,],[11,11,11,11,11,11,11,11,]),'OP_AND_P':([3,4,6,7,8,10,13,14,16,18,19,22,36,55,56,57,58,59,60,61,62,63,65,68,73,74,75,76,77,],[-14,-38,25,-26,-35,-16,-37,-33,-34,-32,-36,-15,-13,-25,-18,-17,-21,-22,-20,-19,-23,-24,-40,-39,-30,-31,-28,-27,-29,]),'OP_AND':([2,3,4,6,7,8,10,13,14,16,18,19,20,21,22,36,52,54,55,56,57,58,59,60,61,62,63,65,68,73,74,75,76,77,78,],[-8,-14,-38,-12,-26,-35,-16,-37,-33,-34,-32,-36,-10,51,-15,-13,-7,-11,-25,-18,-17,-21,-22,-20,-19,-23,-24,-40,-39,-30,-31,-28,-27,-29,-9,]),'LPAREN':([0,1,11,12,23,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'VARIABLE':([0,1,11,12,15,23,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,66,67,69,70,71,72,],[13,13,13,13,43,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,43,43,43,43,43,43,]),'OP_OR':([2,3,4,5,6,7,8,9,10,13,14,16,18,19,20,21,22,36,52,53,54,55,56,57,58,59,60,61,62,63,65,68,73,74,75,76,77,78,79,],[-8,-14,-38,-4,-12,-26,-35,35,-16,-37,-33,-34,-32,-36,-10,-6,-15,-13,-7,-3,-11,-25,-18,-17,-21,-22,-20,-19,-23,-24,-40,-39,-30,-31,-28,-27,-29,-9,-5,]),'OP_EQ':([4,7,8,13,14,16,18,19,65,68,73,74,75,76,77,],[-38,31,-35,-37,-33,-34,-32,-36,-40,-39,-30,-31,-28,-27,-29,]),'OP_EXISTS':([0,11,12,23,24,25,35,50,51,],[1,1,1,1,1,1,1,1,1,]),'IPV6':([0,1,11,12,15,23,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,66,67,69,70,71,72,],[16,16,16,16,44,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,44,44,44,44,44,44,]),'OP_IN':([4,7,8,13,14,16,18,19,65,68,73,74,75,76,77,],[-38,27,-35,-37,-33,-34,-32,-36,-40,-39,-30,-31,-28,-27,-29,]),'OP_LIKE':([4,7,8,13,14,16,18,19,65,68,73,74,75,76,77,],[-38,28,-35,-37,-33,-34,-32,-36,-40,-39,-30,-31,-28,-27,-29,]),'OP_NE':([4,7,8,13,14,16,18,19,65,68,73,74,75,76,77,],[-38,29,-35,-37,-33,-34,-32,-36,-40,-39,-30,-31,-28,-27,-29,]),'IPV4':([0,1,11,12,15,23,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,66,67,69,70,71,72,],[14,14,14,14,42,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,42,42,42,42,42,42,]),'OP_GT':([4,7,8,13,14,16,18,19,65,68,73,74,75,76,77,],[-38,30,-35,-37,-33,-34,-32,-36,-40,-39,-30,-31,-28,-27,-29,]),'CONSTANT':([0,1,11,12,15,23,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,66,67,69,70,71,72,],[4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,39,39,39,39,39,39,]),'RPAREN':([2,3,4,5,6,7,8,9,10,13,14,16,18,19,20,21,22,36,37,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,73,74,75,76,77,78,79,],[-8,-14,-38,-4,-12,-26,-35,-2,-16,-37,-33,-34,-32,-36,-10,-6,-15,-13,65,-7,-3,-11,-25,-18,-17,-21,-22,-20,-19,-23,-24,-1,-40,-39,-30,-31,-28,-27,-29,-9,-5,]),'OP_TIMES':([4,8,13,14,16,18,19,65,68,],[-38,-35,-37,-33,-34,49,-36,-40,-39,]),'OP_XOR_P':([3,4,6,7,8,10,13,14,16,18,19,20,22,36,54,55,56,57,58,59,60,61,62,63,65,68,73,74,75,76,77,],[-14,-38,-12,-26,-35,-16,-37,-33,-34,-32,-36,50,-15,-13,-11,-25,-18,-17,-21,-22,-20,-19,-23,-24,-40,-39,-30,-31,-28,-27,-29,]),'OP_MODULO':([4,8,13,14,16,18,19,65,68,],[-38,-35,-37,-33,-34,46,-36,-40,-39,]),'RBRACK':([38,39,40,41,42,43,44,80,81,82,83,84,85,],[-43,-46,68,-44,-41,-45,-42,-49,-52,-50,-47,-51,-48,]),'OP_XOR':([2,3,4,5,6,7,8,10,13,14,16,18,19,20,21,22,36,52,54,55,56,57,58,59,60,61,62,63,65,68,73,74,75,76,77,78,79,],[-8,-14,-38,24,-12,-26,-35,-16,-37,-33,-34,-32,-36,-10,-6,-15,-13,-7,-11,-25,-18,-17,-21,-22,-20,-19,-23,-24,-40,-39,-30,-31,-28,-27,-29,-9,-5,]),'LBRACK':([0,1,11,12,23,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'OP_MINUS':([4,8,13,14,16,18,19,65,68,],[-38,-35,-37,-33,-34,47,-36,-40,-39,]),'FLOAT':([0,1,11,12,15,23,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,66,67,69,70,71,72,],[19,19,19,19,41,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,41,41,41,41,41,41,]),'OP_PLUS':([4,8,13,14,16,18,19,65,68,],[-38,-35,-37,-33,-34,48,-36,-40,-39,]),'COMMA':([38,39,41,42,43,44,],[66,67,69,70,71,72,]),'OP_LE':([4,7,8,13,14,16,18,19,65,68,73,74,75,76,77,],[-38,26,-35,-37,-33,-34,-32,-36,-40,-39,-30,-31,-28,-27,-29,]),'$end':([2,3,4,5,6,7,8,9,10,13,14,16,17,18,19,20,21,22,36,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,73,74,75,76,77,78,79,],[-8,-14,-38,-4,-12,-26,-35,-2,-16,-37,-33,-34,0,-32,-36,-10,-6,-15,-13,-7,-3,-11,-25,-18,-17,-21,-22,-20,-19,-23,-24,-1,-40,-39,-30,-31,-28,-27,-29,-9,-5,]),'OP_DIVIDE':([4,8,13,14,16,18,19,65,68,],[-38,-35,-37,-33,-34,45,-36,-40,-39,]),'INTEGER':([0,1,11,12,15,23,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,66,67,69,70,71,72,],[8,8,8,8,38,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,38,38,38,38,38,38,]),'OP_GE':([4,7,8,13,14,16,18,19,65,68,73,74,75,76,77,],[-38,33,-35,-37,-33,-34,-32,-36,-40,-39,-30,-31,-28,-27,-29,]),'OP_LT':([4,7,8,13,14,16,18,19,65,68,73,74,75,76,77,],[-38,34,-35,-37,-33,-34,-32,-36,-40,-39,-30,-31,-28,-27,-29,]),'OP_OR_P':([2,3,4,6,7,8,10,13,14,16,18,19,20,22,36,54,55,56,57,58,59,60,61,62,63,65,68,73,74,75,76,77,78,],[23,-14,-38,-12,-26,-35,-16,-37,-33,-34,-32,-36,-10,-15,-13,-11,-25,-18,-17,-21,-22,-20,-19,-23,-24,-40,-39,-30,-31,-28,-27,-29,-9,]),'OP_IS':([4,7,8,13,14,16,18,19,65,68,73,74,75,76,77,],[-38,32,-35,-37,-33,-34,-32,-36,-40,-39,-30,-31,-28,-27,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'not_expression':([0,12,23,24,25,35,50,51,],[6,6,6,6,6,6,6,6,]),'factor':([0,1,11,12,23,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'xor_p_expression':([0,12,23,24,35,50,51,],[2,2,2,2,2,78,2,]),'term':([0,1,11,12,23,24,25,26,27,28,29,30,31,32,33,34,35,45,46,47,48,49,50,51,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,73,74,75,76,77,7,7,]),'and_expression':([0,12,24,35,51,],[5,5,5,5,79,]),'and_p_expression':([0,12,23,24,25,35,50,51,],[20,20,20,20,54,20,20,20,]),'list':([15,66,67,69,70,71,72,],[40,80,81,82,83,84,85,]),'xor_expression':([0,12,24,35,],[9,9,53,9,]),'cmp_expression':([0,1,11,12,23,24,25,26,27,28,29,30,31,32,33,34,35,50,51,],[10,22,10,10,10,10,10,55,56,57,58,59,60,61,62,63,10,10,10,]),'ex_expression':([0,11,12,23,24,25,35,50,51,],[3,36,3,3,3,3,3,3,3,]),'expression':([0,12,35,],[17,37,64,]),'or_p_expression':([0,12,23,24,35,51,],[21,21,52,21,21,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> xor_expression OP_OR expression','expression',3,'p_expression','gparser.py',200),
  ('expression -> xor_expression','expression',1,'p_expression','gparser.py',201),
  ('xor_expression -> and_expression OP_XOR xor_expression','xor_expression',3,'p_xor_expression','gparser.py',208),
  ('xor_expression -> and_expression','xor_expression',1,'p_xor_expression','gparser.py',209),
  ('and_expression -> or_p_expression OP_AND and_expression','and_expression',3,'p_and_expression','gparser.py',216),
  ('and_expression -> or_p_expression','and_expression',1,'p_and_expression','gparser.py',217),
  ('or_p_expression -> xor_p_expression OP_OR_P or_p_expression','or_p_expression',3,'p_or_p_expression','gparser.py',224),
  ('or_p_expression -> xor_p_expression','or_p_expression',1,'p_or_p_expression','gparser.py',225),
  ('xor_p_expression -> and_p_expression OP_XOR_P xor_p_expression','xor_p_expression',3,'p_xor_p_expression','gparser.py',232),
  ('xor_p_expression -> and_p_expression','xor_p_expression',1,'p_xor_p_expression','gparser.py',233),
  ('and_p_expression -> not_expression OP_AND_P and_p_expression','and_p_expression',3,'p_and_p_expression','gparser.py',240),
  ('and_p_expression -> not_expression','and_p_expression',1,'p_and_p_expression','gparser.py',241),
  ('not_expression -> OP_NOT ex_expression','not_expression',2,'p_not_expression','gparser.py',248),
  ('not_expression -> ex_expression','not_expression',1,'p_not_expression','gparser.py',249),
  ('ex_expression -> OP_EXISTS cmp_expression','ex_expression',2,'p_ex_expression','gparser.py',256),
  ('ex_expression -> cmp_expression','ex_expression',1,'p_ex_expression','gparser.py',257),
  ('cmp_expression -> term OP_LIKE cmp_expression','cmp_expression',3,'p_cmp_expression','gparser.py',264),
  ('cmp_expression -> term OP_IN cmp_expression','cmp_expression',3,'p_cmp_expression','gparser.py',265),
  ('cmp_expression -> term OP_IS cmp_expression','cmp_expression',3,'p_cmp_expression','gparser.py',266),
  ('cmp_expression -> term OP_EQ cmp_expression','cmp_expression',3,'p_cmp_expression','gparser.py',267),
  ('cmp_expression -> term OP_NE cmp_expression','cmp_expression',3,'p_cmp_expression','gparser.py',268),
  ('cmp_expression -> term OP_GT cmp_expression','cmp_expression',3,'p_cmp_expression','gparser.py',269),
  ('cmp_expression -> term OP_GE cmp_expression','cmp_expression',3,'p_cmp_expression','gparser.py',270),
  ('cmp_expression -> term OP_LT cmp_expression','cmp_expression',3,'p_cmp_expression','gparser.py',271),
  ('cmp_expression -> term OP_LE cmp_expression','cmp_expression',3,'p_cmp_expression','gparser.py',272),
  ('cmp_expression -> term','cmp_expression',1,'p_cmp_expression','gparser.py',273),
  ('term -> factor OP_PLUS term','term',3,'p_term','gparser.py',280),
  ('term -> factor OP_MINUS term','term',3,'p_term','gparser.py',281),
  ('term -> factor OP_TIMES term','term',3,'p_term','gparser.py',282),
  ('term -> factor OP_DIVIDE term','term',3,'p_term','gparser.py',283),
  ('term -> factor OP_MODULO term','term',3,'p_term','gparser.py',284),
  ('term -> factor','term',1,'p_term','gparser.py',285),
  ('factor -> IPV4','factor',1,'p_factor','gparser.py',292),
  ('factor -> IPV6','factor',1,'p_factor','gparser.py',293),
  ('factor -> INTEGER','factor',1,'p_factor','gparser.py',294),
  ('factor -> FLOAT','factor',1,'p_factor','gparser.py',295),
  ('factor -> VARIABLE','factor',1,'p_factor','gparser.py',296),
  ('factor -> CONSTANT','factor',1,'p_factor','gparser.py',297),
  ('factor -> LBRACK list RBRACK','factor',3,'p_factor','gparser.py',298),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','gparser.py',299),
  ('list -> IPV4','list',1,'p_list','gparser.py',306),
  ('list -> IPV6','list',1,'p_list','gparser.py',307),
  ('list -> INTEGER','list',1,'p_list','gparser.py',308),
  ('list -> FLOAT','list',1,'p_list','gparser.py',309),
  ('list -> VARIABLE','list',1,'p_list','gparser.py',310),
  ('list -> CONSTANT','list',1,'p_list','gparser.py',311),
  ('list -> IPV4 COMMA list','list',3,'p_list','gparser.py',312),
  ('list -> IPV6 COMMA list','list',3,'p_list','gparser.py',313),
  ('list -> INTEGER COMMA list','list',3,'p_list','gparser.py',314),
  ('list -> FLOAT COMMA list','list',3,'p_list','gparser.py',315),
  ('list -> VARIABLE COMMA list','list',3,'p_list','gparser.py',316),
  ('list -> CONSTANT COMMA list','list',3,'p_list','gparser.py',317),
]
