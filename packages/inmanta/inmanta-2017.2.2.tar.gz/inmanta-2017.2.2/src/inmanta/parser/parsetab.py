
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTrightMLSrightMLS_ENDINT FLOAT ID CID SEP STRING MLS MLS_END CMP_OP REGEX REL AND AS DEFINED DICT END ENTITY EXTENDS FALSE FOR IMPLEMENT IMPLEMENTATION IMPORT IN INDEX IS MATCHING NOT NULL OR TRUE TYPEDEF UNDEF USING WHENmain : top_stmt mainmain : top_stmttop_stmt : mls \n                | entity_def\n                | implement_def\n                | implementation_def\n                | relation\n                | statement\n                | typedef\n                | index\n                | import import : IMPORT ns_refimport : IMPORT ns_ref AS IDstatement : assign\n                | constructor\n                | function_call\n                | forstmt_list : statement stmt_liststmt_list : statementassign : var_ref \'=\' operandfor : FOR ID IN operand \':\' blockentity_def : ENTITY CID \':\' entity_body_outer entity_def : ENTITY CID EXTENDS class_ref_list \':\' entity_body_outer entity_body_outer : mls entity_body ENDentity_body_outer : entity_body END entity_body_outer : END entity_body_outer : mls END entity_body : entity_body attr entity_body : attrattr_type : ns_refattr_type : ns_ref \'?\'attr : attr_type IDattr : attr_type ID \'=\' constantattr : attr_type ID \'=\' UNDEFattr_type_multi : ns_ref \'[\' \']\'attr_type_multi : ns_ref \'[\' \']\' \'?\'attr : attr_type_multi IDattr : attr_type_multi ID \'=\' constant_listattr : attr_type_multi ID \'=\' UNDEFattr : attr_type_multi ID \'=\' NULLattr : DICT IDattr : DICT ID \'=\' map_defattr : DICT \'?\' IDattr : DICT \'?\'  ID \'=\' map_defattr : DICT \'?\'  ID \'=\' NULLimplement_def : IMPLEMENT class_ref USING ns_listimplement_def : IMPLEMENT class_ref USING ns_list WHEN conditionimplement_def : IMPLEMENT class_ref USING ns_list mlsimplement_def : IMPLEMENT class_ref USING ns_list WHEN condition mlsimplementation_def : IMPLEMENTATION ID FOR class_ref implementationimplementation : \':\' mls blockimplementation : \':\' blockblock : stmt_list ENDblock : ENDrelation : class_ref ID multi REL multi class_ref IDrelation : class_ref ID multi REL multi class_ref ID mlsrelation : relationnew mlsrelation : relationnewrelationnew : class_ref \'.\' ID multi REL class_ref \'.\' ID multirelationnew : class_ref \'.\' ID multi REL class_refrelationnew : class_ref \'.\' ID multi operand_list class_ref \'.\' ID multirelationnew : class_ref \'.\' ID multi operand_list class_refmulti : \'[\' INT \']\' multi : \'[\' INT \':\' \']\' multi : \'[\' INT \':\' INT \']\' multi : \'[\'  \':\' INT \']\' typedef : typedef_innertypedef : typedef_inner mlstypedef_inner : TYPEDEF ID AS ns_ref MATCHING REGEX\n                | TYPEDEF ID AS ns_ref MATCHING conditiontypedef_inner : TYPEDEF CID AS constructorindex : INDEX class_ref \'(\' id_list \')\' condition : \'(\' condition \')\'condition : operand CMP_OP operand\n                | operand IN list_def\n                | operand IN var_ref\n                | condition AND condition\n                | condition OR condition condition : function_call\n                | var_refcondition : NOT conditioncondition : var_ref \'.\' ID IS DEFINEDcondition : ID IS DEFINEDcondition : TRUE\n                | FALSE operand : constant\n              | function_call\n              | constructor\n              | list_def\n              | map_def\n              | var_ref\n              | index_lookup constructor : class_ref \'(\' param_list \')\'  constructor : class_ref \'(\' \')\'  function_call : ns_ref \'(\' \')\' function_call : ns_ref \'(\' operand_list \')\' list_def : \'[\' operand_list \']\' list_def : \'[\' \']\'pair_list : STRING \':\' operand \',\' pair_listpair_list : STRING \':\' operand map_def : \'{\' pair_list \'}\' map_def : \'{\' \'}\' index_lookup : class_ref \'[\' param_list \']\' index_lookup : attr_ref \'[\' param_list \']\' constant : INT\n    | FLOAT\n    | mls\n     constant : NULL\n     constant : REGEX\n     constant : TRUE\n     constant : FALSE\n     constant : STRING  constant_list : \'[\' \']\'  constant_list : \'[\' constants \']\' constants : constantconstants : constant \',\' constantsparam_list : ID \'=\' operand \',\' param_listparam_list : ID \'=\' operandoperand_list : operand \',\' operand_listoperand_list : operandns_list : ns_ref \',\' ns_listns_list : ns_refvar_ref : attr_refattr_ref : var_ref \'.\' IDvar_ref : ns_refclass_ref : CIDclass_ref : ns_ref SEP CIDclass_ref_list : class_ref \',\' class_ref_listclass_ref_list : class_refns_ref : ns_ref SEP IDns_ref : IDid_list : ID "," id_listid_list : IDmls : MLS_ENDmls : MLS mls'
    
_lr_action_items = {'MLS':([0,1,2,4,5,6,8,13,14,15,17,18,19,21,23,24,26,28,29,30,31,32,33,36,37,45,47,52,62,65,66,67,68,69,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,91,92,95,98,99,100,102,104,108,109,111,114,116,119,130,131,133,135,136,138,144,147,150,151,153,154,156,157,165,168,169,170,171,172,173,174,176,177,178,179,180,181,183,184,187,188,191,193,196,198,199,202,206,207,208,209,211,216,217,220,222,229,232,233,234,235,236,237,238,239,240,243,251,252,253,255,],[1,1,-3,-11,1,-7,-14,-15,-9,-8,-5,-123,-126,-10,-16,-4,-131,-134,1,1,-17,-6,-135,-68,-12,1,1,-57,-94,-130,-127,-107,-123,1,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-20,1,1,-13,1,-122,-71,1,1,-93,-98,-96,1,-102,-22,-26,-72,-48,1,1,-63,-97,-101,1,1,-50,1,-27,-25,1,-84,1,1,-79,-85,-131,-80,-121,-69,-70,-62,-60,-66,-64,-104,-103,-21,-54,-52,-23,-24,1,1,-49,1,-81,1,1,-65,-53,-51,1,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-61,-59,1,-82,]),'=':([16,18,20,26,63,65,90,159,161,164,190,201,],[-125,-123,47,-131,108,-130,-124,200,202,204,-125,224,]),'DICT':([28,33,67,74,76,79,82,83,84,89,95,119,124,125,132,150,156,158,159,161,164,166,201,223,225,226,228,230,231,245,246,248,254,],[-134,-135,-107,-112,-105,-111,-106,-110,-108,-109,126,-102,126,-29,126,-101,126,126,-41,-32,-37,-28,-43,-42,-33,-34,-38,-40,-39,-45,-44,-113,-114,]),'[':([19,26,42,45,47,59,65,66,68,69,78,90,92,104,105,108,116,128,136,138,144,151,168,171,183,184,204,206,208,211,212,217,240,241,242,],[-126,-131,61,69,69,61,-130,-127,110,69,115,-124,69,69,61,69,69,163,69,69,-63,69,69,69,-66,-64,229,69,69,69,69,-65,-124,61,61,]),'SEP':([16,26,35,37,65,70,100,103,128,174,190,237,],[44,-131,44,54,-130,113,54,54,54,-131,44,54,]),'.':([12,16,18,19,20,26,65,66,68,70,72,90,174,176,180,181,190,237,238,240,],[41,-125,-123,-126,46,-131,-130,-127,-123,-125,46,-124,-131,213,214,215,-125,-125,46,-124,]),'IMPORT':([0,2,4,5,6,8,13,14,15,17,18,19,21,23,24,26,28,29,30,31,32,33,36,37,52,62,65,66,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,91,98,99,100,102,109,111,114,119,130,131,133,135,144,147,150,154,157,165,169,170,172,173,174,176,177,178,179,180,181,183,184,187,188,191,193,196,198,199,207,209,216,217,220,222,232,233,234,235,236,237,238,239,240,243,251,252,255,],[7,-3,-11,-67,-7,-14,-15,-9,-8,-5,-123,-126,-10,-16,-4,-131,-134,7,-58,-17,-6,-135,-68,-12,-57,-94,-130,-127,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-20,-13,-46,-122,-71,-93,-98,-96,-102,-22,-26,-72,-48,-63,-97,-101,-50,-27,-25,-84,-47,-79,-85,-131,-80,-121,-69,-70,-62,-60,-66,-64,-104,-103,-21,-54,-52,-23,-24,-49,-81,-55,-65,-53,-51,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-61,-59,-82,]),'INDEX':([0,2,4,5,6,8,13,14,15,17,18,19,21,23,24,26,28,29,30,31,32,33,36,37,52,62,65,66,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,91,98,99,100,102,109,111,114,119,130,131,133,135,144,147,150,154,157,165,169,170,172,173,174,176,177,178,179,180,181,183,184,187,188,191,193,196,198,199,207,209,216,217,220,222,232,233,234,235,236,237,238,239,240,243,251,252,255,],[3,-3,-11,-67,-7,-14,-15,-9,-8,-5,-123,-126,-10,-16,-4,-131,-134,3,-58,-17,-6,-135,-68,-12,-57,-94,-130,-127,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-20,-13,-46,-122,-71,-93,-98,-96,-102,-22,-26,-72,-48,-63,-97,-101,-50,-27,-25,-84,-47,-79,-85,-131,-80,-121,-69,-70,-62,-60,-66,-64,-104,-103,-21,-54,-52,-23,-24,-49,-81,-55,-65,-53,-51,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-61,-59,-82,]),'WHEN':([26,65,99,100,177,],[-131,-130,136,-122,-121,]),'REL':([60,104,144,183,184,217,],[105,140,-63,-66,-64,-65,]),'MATCHING':([26,65,103,],[-131,-130,138,]),'IMPLEMENT':([0,2,4,5,6,8,13,14,15,17,18,19,21,23,24,26,28,29,30,31,32,33,36,37,52,62,65,66,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,91,98,99,100,102,109,111,114,119,130,131,133,135,144,147,150,154,157,165,169,170,172,173,174,176,177,178,179,180,181,183,184,187,188,191,193,196,198,199,207,209,216,217,220,222,232,233,234,235,236,237,238,239,240,243,251,252,255,],[9,-3,-11,-67,-7,-14,-15,-9,-8,-5,-123,-126,-10,-16,-4,-131,-134,9,-58,-17,-6,-135,-68,-12,-57,-94,-130,-127,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-20,-13,-46,-122,-71,-93,-98,-96,-102,-22,-26,-72,-48,-63,-97,-101,-50,-27,-25,-84,-47,-79,-85,-131,-80,-121,-69,-70,-62,-60,-66,-64,-104,-103,-21,-54,-52,-23,-24,-49,-81,-55,-65,-53,-51,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-61,-59,-82,]),'}':([26,28,33,62,65,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,88,89,90,109,111,114,117,119,147,150,187,188,189,244,],[-131,-134,-135,-94,-130,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,119,-109,-124,-93,-98,-96,150,-102,-97,-101,-104,-103,-100,-99,]),'TYPEDEF':([0,2,4,5,6,8,13,14,15,17,18,19,21,23,24,26,28,29,30,31,32,33,36,37,52,62,65,66,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,91,98,99,100,102,109,111,114,119,130,131,133,135,144,147,150,154,157,165,169,170,172,173,174,176,177,178,179,180,181,183,184,187,188,191,193,196,198,199,207,209,216,217,220,222,232,233,234,235,236,237,238,239,240,243,251,252,255,],[11,-3,-11,-67,-7,-14,-15,-9,-8,-5,-123,-126,-10,-16,-4,-131,-134,11,-58,-17,-6,-135,-68,-12,-57,-94,-130,-127,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-20,-13,-46,-122,-71,-93,-98,-96,-102,-22,-26,-72,-48,-63,-97,-101,-50,-27,-25,-84,-47,-79,-85,-131,-80,-121,-69,-70,-62,-60,-66,-64,-104,-103,-21,-54,-52,-23,-24,-49,-81,-55,-65,-53,-51,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-61,-59,-82,]),'$end':([2,4,5,6,8,10,13,14,15,17,18,19,21,23,24,26,28,29,30,31,32,33,36,37,51,52,62,65,66,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,91,98,99,100,102,109,111,114,119,130,131,133,135,144,147,150,154,157,165,169,170,172,173,174,176,177,178,179,180,181,183,184,187,188,191,193,196,198,199,207,209,216,217,220,222,232,233,234,235,236,237,238,239,240,243,251,252,255,],[-3,-11,-67,-7,-14,0,-15,-9,-8,-5,-123,-126,-10,-16,-4,-131,-134,-2,-58,-17,-6,-135,-68,-12,-1,-57,-94,-130,-127,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-20,-13,-46,-122,-71,-93,-98,-96,-102,-22,-26,-72,-48,-63,-97,-101,-50,-27,-25,-84,-47,-79,-85,-131,-80,-121,-69,-70,-62,-60,-66,-64,-104,-103,-21,-54,-52,-23,-24,-49,-81,-55,-65,-53,-51,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-61,-59,-82,]),'(':([12,16,19,26,34,65,66,70,78,101,136,138,168,171,174,190,206,208,],[43,45,-126,-131,53,-130,-127,45,43,43,168,168,168,168,-131,45,168,168,]),'TRUE':([45,47,69,92,104,108,116,136,138,144,151,168,171,183,184,202,206,208,211,217,229,253,],[83,83,83,83,83,83,83,169,169,-63,83,169,169,-66,-64,83,169,169,83,-65,83,83,]),'NULL':([45,47,69,92,104,108,116,136,138,144,151,168,171,183,184,202,204,206,208,211,217,224,229,253,],[84,84,84,84,84,84,84,84,84,-63,84,84,84,-66,-64,84,230,84,84,84,-65,245,84,84,]),'AND':([18,26,28,33,62,65,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,109,111,114,119,147,150,169,170,172,173,174,176,179,187,188,205,209,232,233,234,235,236,237,238,239,240,255,],[-123,-131,-134,-135,-94,-130,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-93,-98,-96,-102,-97,-101,-84,208,-79,-85,-131,-80,208,-104,-103,208,-81,-73,208,-77,-83,-74,-125,-76,-75,-124,-82,]),'USING':([19,38,66,],[-126,56,-127,]),'AS':([26,37,39,40,65,],[-131,55,57,58,-130,]),'CMP_OP':([28,33,62,65,67,68,70,71,74,76,77,80,81,82,84,86,87,89,109,111,114,119,147,150,169,172,173,174,175,176,178,187,188,240,],[-134,-135,-94,-130,-107,-123,-125,-86,-112,-105,-89,-88,-95,-106,-108,-90,-92,-109,-93,-98,-96,-102,-97,-101,-110,-87,-111,-131,211,-91,-109,-104,-103,-124,]),'DEFINED':([210,250,],[235,255,]),'REGEX':([45,47,69,92,104,108,116,136,138,144,151,168,171,183,184,202,206,208,211,217,229,253,],[89,89,89,89,89,89,89,89,178,-63,89,89,89,-66,-64,89,89,89,89,-65,89,89,]),'?':([26,65,126,128,203,],[-131,-130,160,162,227,]),':':([19,26,28,33,50,61,62,65,66,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,107,109,111,114,118,119,120,121,122,123,147,150,187,188,197,],[-126,-131,-134,-135,95,106,-94,-130,-127,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,143,-93,-98,-96,151,-102,152,153,-129,156,-97,-101,-104,-103,-128,]),'EXTENDS':([50,],[94,]),'OR':([18,26,28,33,62,65,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,109,111,114,119,147,150,169,170,172,173,174,176,179,187,188,205,209,232,233,234,235,236,237,238,239,240,255,],[-123,-131,-134,-135,-94,-130,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-93,-98,-96,-102,-97,-101,-84,206,-79,-85,-131,-80,206,-104,-103,206,-81,-73,-78,-77,-83,-74,-125,-76,-75,-124,-82,]),'NOT':([136,138,168,171,206,208,],[171,171,171,171,171,171,]),'IN':([28,33,48,62,65,67,68,70,71,74,76,77,80,81,82,84,86,87,89,109,111,114,119,147,150,169,172,173,174,175,176,178,187,188,240,],[-134,-135,92,-94,-130,-107,-123,-125,-86,-112,-105,-89,-88,-95,-106,-108,-90,-92,-109,-93,-98,-96,-102,-97,-101,-110,-87,-111,-131,212,-91,-109,-104,-103,-124,]),'STRING':([45,47,69,88,92,104,108,116,136,138,144,151,168,171,183,184,202,206,208,211,217,219,229,253,],[74,74,74,118,74,74,74,74,74,74,-63,74,74,74,-66,-64,74,74,74,74,-65,118,74,74,]),'UNDEF':([202,204,],[226,231,]),'FOR':([0,2,4,5,6,8,13,14,15,17,18,19,21,23,24,26,28,29,30,31,32,33,36,37,49,52,62,65,66,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,91,98,99,100,102,109,111,114,119,130,131,133,135,144,147,150,152,153,154,157,165,169,170,172,173,174,176,177,178,179,180,181,183,184,187,188,191,193,194,195,196,198,199,207,209,216,217,220,222,232,233,234,235,236,237,238,239,240,243,251,252,255,],[22,-3,-11,-67,-7,-14,-15,-9,-8,-5,-123,-126,-10,-16,-4,-131,-134,22,-58,-17,-6,-135,-68,-12,93,-57,-94,-130,-127,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-20,-13,-46,-122,-71,-93,-98,-96,-102,-22,-26,-72,-48,-63,-97,-101,22,22,-50,-27,-25,-84,-47,-79,-85,-131,-80,-121,-69,-70,-62,-60,-66,-64,-104,-103,-21,-54,22,22,-52,-23,-24,-49,-81,-55,-65,-53,-51,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-61,-59,-82,]),'INT':([45,47,61,69,92,104,106,108,116,136,138,143,144,151,168,171,183,184,202,206,208,211,217,229,253,],[76,76,107,76,76,76,142,76,76,76,76,185,-63,76,76,76,-66,-64,76,76,76,76,-65,76,76,]),'{':([45,47,69,92,104,108,116,136,138,144,151,168,171,183,184,200,206,208,211,217,224,],[88,88,88,88,88,88,88,88,88,-63,88,88,88,-66,-64,88,88,88,88,-65,88,]),'IMPLEMENTATION':([0,2,4,5,6,8,13,14,15,17,18,19,21,23,24,26,28,29,30,31,32,33,36,37,52,62,65,66,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,91,98,99,100,102,109,111,114,119,130,131,133,135,144,147,150,154,157,165,169,170,172,173,174,176,177,178,179,180,181,183,184,187,188,191,193,196,198,199,207,209,216,217,220,222,232,233,234,235,236,237,238,239,240,243,251,252,255,],[25,-3,-11,-67,-7,-14,-15,-9,-8,-5,-123,-126,-10,-16,-4,-131,-134,25,-58,-17,-6,-135,-68,-12,-57,-94,-130,-127,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-20,-13,-46,-122,-71,-93,-98,-96,-102,-22,-26,-72,-48,-63,-97,-101,-50,-27,-25,-84,-47,-79,-85,-131,-80,-121,-69,-70,-62,-60,-66,-64,-104,-103,-21,-54,-52,-23,-24,-49,-81,-55,-65,-53,-51,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-61,-59,-82,]),'FALSE':([45,47,69,92,104,108,116,136,138,144,151,168,171,183,184,202,206,208,211,217,229,253,],[79,79,79,79,79,79,79,173,173,-63,79,173,173,-66,-64,79,173,173,79,-65,79,79,]),'END':([8,13,23,26,28,31,33,62,65,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,91,95,109,111,114,119,124,125,132,147,150,152,153,156,158,159,161,164,166,187,188,191,192,193,194,195,201,220,221,223,225,226,228,230,231,245,246,248,254,],[-14,-15,-16,-131,-134,-17,-135,-94,-130,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-20,131,-93,-98,-96,-102,157,-29,165,-97,-101,193,193,131,199,-41,-32,-37,-28,-104,-103,-21,220,-54,-19,193,-43,-53,-18,-42,-33,-34,-38,-40,-39,-45,-44,-113,-114,]),')':([18,26,28,33,43,45,62,64,65,67,68,70,71,72,73,74,75,76,77,79,80,81,82,83,84,85,86,87,89,90,96,97,109,111,114,119,145,147,149,150,167,169,172,173,174,176,187,188,205,209,218,232,233,234,235,236,237,238,239,240,255,],[-123,-131,-134,-135,62,81,-94,109,-130,-107,-123,-125,-86,-91,114,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-120,-90,-92,-109,-124,133,-133,-93,-98,-96,-102,-118,-97,-119,-101,-132,-84,-79,-85,-131,-80,-104,-103,232,-81,-117,-73,-78,-77,-83,-74,-125,-76,-75,-124,-82,]),'ID':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,36,37,41,43,44,45,46,47,52,53,54,55,56,57,58,62,65,66,67,68,69,70,71,72,74,75,76,77,79,80,81,82,83,84,85,86,87,89,90,91,92,93,94,95,98,99,100,102,104,108,109,110,111,113,114,115,116,119,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,171,172,173,174,176,177,178,179,180,181,182,183,184,186,187,188,191,193,194,195,196,198,199,201,203,206,207,208,209,211,212,213,214,215,216,217,220,222,223,225,226,227,228,230,231,232,233,234,235,236,237,238,239,240,243,245,246,248,251,252,254,255,],[26,-3,26,-11,-67,-7,26,-14,26,40,42,-15,-9,-8,-5,-123,-126,-10,48,-16,-4,49,-131,-134,26,-58,-17,-6,-135,-68,-12,59,63,65,26,90,26,-57,97,65,98,26,26,26,-94,-130,-127,-107,-123,26,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-120,-90,-92,-109,-124,-20,26,26,26,26,-13,-46,-122,-71,26,26,-93,63,-98,65,-96,63,26,-102,26,-29,159,161,-30,164,-22,-26,26,-72,97,-48,174,26,174,26,26,26,-63,-97,-119,-101,26,26,26,-50,26,26,-27,26,-41,201,-32,-31,-37,-25,-28,174,-84,-47,174,-79,-85,-131,-80,-121,-69,-70,-62,-60,216,-66,-64,63,-104,-103,-21,-54,26,26,-52,-23,-24,-43,-35,174,-49,174,-81,26,26,240,241,242,-55,-65,-53,-51,-42,-33,-34,-36,-38,-40,-39,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-45,-44,-113,-61,-59,-114,-82,]),'FLOAT':([45,47,69,92,104,108,116,136,138,144,151,168,171,183,184,202,206,208,211,217,229,253,],[82,82,82,82,82,82,82,82,82,-63,82,82,82,-66,-64,82,82,82,82,-65,82,82,]),'ENTITY':([0,2,4,5,6,8,13,14,15,17,18,19,21,23,24,26,28,29,30,31,32,33,36,37,52,62,65,66,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,91,98,99,100,102,109,111,114,119,130,131,133,135,144,147,150,154,157,165,169,170,172,173,174,176,177,178,179,180,181,183,184,187,188,191,193,196,198,199,207,209,216,217,220,222,232,233,234,235,236,237,238,239,240,243,251,252,255,],[27,-3,-11,-67,-7,-14,-15,-9,-8,-5,-123,-126,-10,-16,-4,-131,-134,27,-58,-17,-6,-135,-68,-12,-57,-94,-130,-127,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-20,-13,-46,-122,-71,-93,-98,-96,-102,-22,-26,-72,-48,-63,-97,-101,-50,-27,-25,-84,-47,-79,-85,-131,-80,-121,-69,-70,-62,-60,-66,-64,-104,-103,-21,-54,-52,-23,-24,-49,-81,-55,-65,-53,-51,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-61,-59,-82,]),'MLS_END':([0,1,2,4,5,6,8,13,14,15,17,18,19,21,23,24,26,28,29,30,31,32,33,36,37,45,47,52,62,65,66,67,68,69,70,71,72,74,75,76,77,79,80,81,82,83,84,86,87,89,90,91,92,95,98,99,100,102,104,108,109,111,114,116,119,130,131,133,135,136,138,144,147,150,151,153,154,156,157,165,168,169,170,171,172,173,174,176,177,178,179,180,181,183,184,187,188,191,193,196,198,199,202,206,207,208,209,211,216,217,220,222,229,232,233,234,235,236,237,238,239,240,243,251,252,253,255,],[28,28,-3,-11,28,-7,-14,-15,-9,-8,-5,-123,-126,-10,-16,-4,-131,-134,28,28,-17,-6,-135,-68,-12,28,28,-57,-94,-130,-127,-107,-123,28,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-90,-92,-109,-124,-20,28,28,-13,28,-122,-71,28,28,-93,-98,-96,28,-102,-22,-26,-72,-48,28,28,-63,-97,-101,28,28,-50,28,-27,-25,28,-84,28,28,-79,-85,-131,-80,-121,-69,-70,-62,-60,-66,-64,-104,-103,-21,-54,-52,-23,-24,28,28,-49,28,-81,28,28,-65,-53,-51,28,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-61,-59,28,-82,]),',':([19,26,28,33,62,65,66,67,68,70,71,72,74,75,76,77,79,80,81,82,83,84,85,86,87,89,90,97,100,109,111,114,119,122,145,147,150,187,188,189,247,],[-126,-131,-134,-135,-94,-130,-127,-107,-123,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,116,-90,-92,-109,-124,134,137,-93,-98,-96,-102,155,186,-97,-101,-104,-103,219,253,]),'CID':([0,2,3,4,5,6,8,9,11,13,14,15,17,18,19,21,23,24,26,27,28,29,30,31,32,33,36,37,44,45,47,52,57,62,65,66,67,68,69,70,71,72,74,75,76,77,79,80,81,82,83,84,85,86,87,89,90,91,92,93,94,98,99,100,102,104,108,109,111,113,114,116,119,130,131,133,135,136,138,139,140,141,144,147,149,150,151,152,153,154,155,157,165,168,169,170,171,172,173,174,176,177,178,179,180,181,183,184,187,188,191,193,194,195,196,198,199,206,207,208,209,211,216,217,220,222,232,233,234,235,236,237,238,239,240,243,251,252,255,],[19,-3,19,-11,-67,-7,-14,19,39,-15,-9,-8,-5,-123,-126,-10,-16,-4,-131,50,-134,19,-58,-17,-6,-135,-68,-12,66,19,19,-57,19,-94,-130,-127,-107,-123,19,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-120,-90,-92,-109,-124,-20,19,19,19,-13,-46,-122,-71,19,19,-93,-98,66,-96,19,-102,-22,-26,-72,-48,19,19,19,19,19,-63,-97,-119,-101,19,19,19,-50,19,-27,-25,19,-84,-47,19,-79,-85,-131,-80,-121,-69,-70,-62,-60,-66,-64,-104,-103,-21,-54,19,19,-52,-23,-24,19,-49,19,-81,19,-55,-65,-53,-51,-73,-78,-77,-83,-74,-125,-76,-75,-124,-56,-61,-59,-82,]),']':([26,28,33,62,65,67,68,69,70,71,72,74,75,76,77,79,80,81,82,83,84,85,86,87,89,90,107,109,111,112,114,119,142,143,145,146,147,148,149,150,163,185,187,188,218,229,247,249,256,],[-131,-134,-135,-94,-130,-107,-123,111,-125,-86,-91,-112,-87,-105,-89,-111,-88,-95,-106,-110,-108,-120,-90,-92,-109,-124,144,-93,-98,147,-96,-102,183,184,-118,187,-97,188,-119,-101,203,217,-104,-103,-117,248,-115,254,-116,]),'IS':([174,240,],[210,250,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ns_list':([56,137,],[99,177,]),'mls':([0,1,5,29,30,45,47,69,92,95,99,104,108,116,136,138,151,153,156,168,170,171,202,206,208,211,216,229,253,],[2,33,36,2,52,67,67,67,67,124,135,67,67,67,67,67,67,195,124,67,207,67,67,67,67,67,243,67,67,]),'import':([0,29,],[4,4,]),'class_ref_list':([94,155,],[123,197,]),'id_list':([53,134,],[96,167,]),'pair_list':([88,219,],[117,244,]),'attr_type_multi':([95,124,132,156,158,],[129,129,129,129,129,]),'relation':([0,29,],[6,6,]),'entity_body_outer':([95,156,],[130,198,]),'assign':([0,29,152,153,194,195,],[8,8,8,8,8,8,]),'statement':([0,29,152,153,194,195,],[15,15,194,194,194,194,]),'main':([0,29,],[10,51,]),'class_ref':([0,3,9,29,45,47,57,69,92,93,94,104,108,116,136,138,139,140,141,151,152,153,155,168,171,194,195,206,208,211,],[12,34,38,12,78,78,101,78,78,121,122,78,78,78,78,78,180,181,182,78,101,101,122,78,78,101,101,78,78,78,]),'stmt_list':([152,153,194,195,],[192,192,221,192,]),'constructor':([0,29,45,47,57,69,92,104,108,116,136,138,151,152,153,168,171,194,195,206,208,211,],[13,13,80,80,102,80,80,80,80,80,80,80,80,13,13,80,80,13,13,80,80,80,]),'typedef':([0,29,],[14,14,]),'multi':([42,59,105,241,242,],[60,104,141,251,252,]),'ns_ref':([0,3,7,9,29,45,47,56,57,58,69,92,93,94,95,104,108,116,124,132,136,137,138,139,140,141,151,152,153,155,156,158,168,171,194,195,206,208,211,212,],[16,35,37,35,16,70,70,100,35,103,70,70,35,35,128,70,70,70,128,128,70,100,70,35,35,35,70,190,190,35,128,128,70,70,190,190,70,70,70,237,]),'implementation':([121,],[154,]),'map_def':([45,47,69,92,104,108,116,136,138,151,168,171,200,206,208,211,224,],[86,86,86,86,86,86,86,86,86,86,86,86,223,86,86,86,246,]),'implement_def':([0,29,],[17,17,]),'condition':([136,138,168,171,206,208,],[170,179,205,209,233,234,]),'attr_ref':([0,29,45,47,69,92,104,108,116,136,138,151,152,153,168,171,194,195,206,208,211,212,],[18,18,68,68,68,68,68,68,68,68,68,68,18,18,68,68,18,18,68,68,68,18,]),'list_def':([45,47,69,92,104,108,116,136,138,151,168,171,206,208,211,212,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,239,]),'attr':([95,124,132,156,158,],[125,125,166,125,166,]),'attr_type':([95,124,132,156,158,],[127,127,127,127,127,]),'block':([152,153,195,],[191,196,222,]),'index':([0,29,],[21,21,]),'operand_list':([45,69,104,116,],[73,112,139,149,]),'function_call':([0,29,45,47,69,92,104,108,116,136,138,151,152,153,168,171,194,195,206,208,211,],[23,23,75,75,75,75,75,75,75,172,172,75,23,23,172,172,23,23,172,172,75,]),'entity_def':([0,29,],[24,24,]),'constant':([45,47,69,92,104,108,116,136,138,151,168,171,202,206,208,211,229,253,],[71,71,71,71,71,71,71,71,71,71,71,71,225,71,71,71,247,247,]),'typedef_inner':([0,29,],[5,5,]),'param_list':([43,110,115,186,],[64,146,148,218,]),'operand':([45,47,69,92,104,108,116,136,138,151,168,171,206,208,211,],[85,91,85,120,85,145,85,175,175,189,175,175,175,175,236,]),'top_stmt':([0,29,],[29,29,]),'var_ref':([0,29,45,47,69,92,104,108,116,136,138,151,152,153,168,171,194,195,206,208,211,212,],[20,20,72,72,72,72,72,72,72,176,176,72,20,20,176,176,20,20,176,176,72,238,]),'constant_list':([204,],[228,]),'relationnew':([0,29,],[30,30,]),'index_lookup':([45,47,69,92,104,108,116,136,138,151,168,171,206,208,211,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'entity_body':([95,124,156,],[132,158,132,]),'for':([0,29,152,153,194,195,],[31,31,31,31,31,31,]),'implementation_def':([0,29,],[32,32,]),'constants':([229,253,],[249,256,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> top_stmt main','main',2,'p_main_collect','plyInmantaParser.py',68),
  ('main -> top_stmt','main',1,'p_main_term','plyInmantaParser.py',75),
  ('top_stmt -> mls','top_stmt',1,'p_top_stmt','plyInmantaParser.py',80),
  ('top_stmt -> entity_def','top_stmt',1,'p_top_stmt','plyInmantaParser.py',81),
  ('top_stmt -> implement_def','top_stmt',1,'p_top_stmt','plyInmantaParser.py',82),
  ('top_stmt -> implementation_def','top_stmt',1,'p_top_stmt','plyInmantaParser.py',83),
  ('top_stmt -> relation','top_stmt',1,'p_top_stmt','plyInmantaParser.py',84),
  ('top_stmt -> statement','top_stmt',1,'p_top_stmt','plyInmantaParser.py',85),
  ('top_stmt -> typedef','top_stmt',1,'p_top_stmt','plyInmantaParser.py',86),
  ('top_stmt -> index','top_stmt',1,'p_top_stmt','plyInmantaParser.py',87),
  ('top_stmt -> import','top_stmt',1,'p_top_stmt','plyInmantaParser.py',88),
  ('import -> IMPORT ns_ref','import',2,'p_import','plyInmantaParser.py',97),
  ('import -> IMPORT ns_ref AS ID','import',4,'p_import_1','plyInmantaParser.py',103),
  ('statement -> assign','statement',1,'p_stmt','plyInmantaParser.py',112),
  ('statement -> constructor','statement',1,'p_stmt','plyInmantaParser.py',113),
  ('statement -> function_call','statement',1,'p_stmt','plyInmantaParser.py',114),
  ('statement -> for','statement',1,'p_stmt','plyInmantaParser.py',115),
  ('stmt_list -> statement stmt_list','stmt_list',2,'p_stmt_list_collect','plyInmantaParser.py',129),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list_term','plyInmantaParser.py',136),
  ('assign -> var_ref = operand','assign',3,'p_assign','plyInmantaParser.py',141),
  ('for -> FOR ID IN operand : block','for',6,'p_for','plyInmantaParser.py',147),
  ('entity_def -> ENTITY CID : entity_body_outer','entity_def',4,'p_entity','plyInmantaParser.py',156),
  ('entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer','entity_def',6,'p_entity_extends','plyInmantaParser.py',162),
  ('entity_body_outer -> mls entity_body END','entity_body_outer',3,'p_entity_body_outer','plyInmantaParser.py',168),
  ('entity_body_outer -> entity_body END','entity_body_outer',2,'p_entity_body_outer_1','plyInmantaParser.py',173),
  ('entity_body_outer -> END','entity_body_outer',1,'p_entity_body_outer_none','plyInmantaParser.py',178),
  ('entity_body_outer -> mls END','entity_body_outer',2,'p_entity_body_outer_4','plyInmantaParser.py',183),
  ('entity_body -> entity_body attr','entity_body',2,'p_entity_body_collect','plyInmantaParser.py',188),
  ('entity_body -> attr','entity_body',1,'p_entity_body','plyInmantaParser.py',194),
  ('attr_type -> ns_ref','attr_type',1,'p_attribute_type','plyInmantaParser.py',199),
  ('attr_type -> ns_ref ?','attr_type',2,'p_attribute_type_opt','plyInmantaParser.py',204),
  ('attr -> attr_type ID','attr',2,'p_attr','plyInmantaParser.py',209),
  ('attr -> attr_type ID = constant','attr',4,'p_attr_cte','plyInmantaParser.py',216),
  ('attr -> attr_type ID = UNDEF','attr',4,'p_attr_undef','plyInmantaParser.py',223),
  ('attr_type_multi -> ns_ref [ ]','attr_type_multi',3,'p_attribute_type_multi','plyInmantaParser.py',230),
  ('attr_type_multi -> ns_ref [ ] ?','attr_type_multi',4,'p_attribute_type_multi_opt','plyInmantaParser.py',235),
  ('attr -> attr_type_multi ID','attr',2,'p_attr_list','plyInmantaParser.py',240),
  ('attr -> attr_type_multi ID = constant_list','attr',4,'p_attr_list_cte','plyInmantaParser.py',248),
  ('attr -> attr_type_multi ID = UNDEF','attr',4,'p_attr_list_undef','plyInmantaParser.py',255),
  ('attr -> attr_type_multi ID = NULL','attr',4,'p_attr_list_null','plyInmantaParser.py',262),
  ('attr -> DICT ID','attr',2,'p_attr_dict','plyInmantaParser.py',269),
  ('attr -> DICT ID = map_def','attr',4,'p_attr_list_dict','plyInmantaParser.py',275),
  ('attr -> DICT ? ID','attr',3,'p_attr_dict_nullable','plyInmantaParser.py',281),
  ('attr -> DICT ? ID = map_def','attr',5,'p_attr_list_dict_nullable','plyInmantaParser.py',287),
  ('attr -> DICT ? ID = NULL','attr',5,'p_attr_list_dict_null','plyInmantaParser.py',293),
  ('implement_def -> IMPLEMENT class_ref USING ns_list','implement_def',4,'p_implement','plyInmantaParser.py',301),
  ('implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition','implement_def',6,'p_implement_when','plyInmantaParser.py',307),
  ('implement_def -> IMPLEMENT class_ref USING ns_list mls','implement_def',5,'p_implement_comment','plyInmantaParser.py',313),
  ('implement_def -> IMPLEMENT class_ref USING ns_list WHEN condition mls','implement_def',7,'p_implement_when_comment','plyInmantaParser.py',319),
  ('implementation_def -> IMPLEMENTATION ID FOR class_ref implementation','implementation_def',5,'p_implementation_def','plyInmantaParser.py',328),
  ('implementation -> : mls block','implementation',3,'p_implementation','plyInmantaParser.py',340),
  ('implementation -> : block','implementation',2,'p_implementation_1','plyInmantaParser.py',345),
  ('block -> stmt_list END','block',2,'p_block','plyInmantaParser.py',350),
  ('block -> END','block',1,'p_block_empty','plyInmantaParser.py',355),
  ('relation -> class_ref ID multi REL multi class_ref ID','relation',7,'p_relation','plyInmantaParser.py',362),
  ('relation -> class_ref ID multi REL multi class_ref ID mls','relation',8,'p_relation_comment','plyInmantaParser.py',371),
  ('relation -> relationnew mls','relation',2,'p_relation_new_outer_comment','plyInmantaParser.py',382),
  ('relation -> relationnew','relation',1,'p_relation_new_outer','plyInmantaParser.py',389),
  ('relationnew -> class_ref . ID multi REL class_ref . ID multi','relationnew',9,'p_relation_new','plyInmantaParser.py',394),
  ('relationnew -> class_ref . ID multi REL class_ref','relationnew',6,'p_relation_new_unidir','plyInmantaParser.py',400),
  ('relationnew -> class_ref . ID multi operand_list class_ref . ID multi','relationnew',9,'p_relation_new_annotated','plyInmantaParser.py',406),
  ('relationnew -> class_ref . ID multi operand_list class_ref','relationnew',6,'p_relation_new_annotated_unidir','plyInmantaParser.py',412),
  ('multi -> [ INT ]','multi',3,'p_multi_1','plyInmantaParser.py',418),
  ('multi -> [ INT : ]','multi',4,'p_multi_2','plyInmantaParser.py',423),
  ('multi -> [ INT : INT ]','multi',5,'p_multi_3','plyInmantaParser.py',428),
  ('multi -> [ : INT ]','multi',4,'p_multi_4','plyInmantaParser.py',433),
  ('typedef -> typedef_inner','typedef',1,'p_typedef_outer','plyInmantaParser.py',440),
  ('typedef -> typedef_inner mls','typedef',2,'p_typedef_outer_comment','plyInmantaParser.py',445),
  ('typedef_inner -> TYPEDEF ID AS ns_ref MATCHING REGEX','typedef_inner',6,'p_typedef_1','plyInmantaParser.py',452),
  ('typedef_inner -> TYPEDEF ID AS ns_ref MATCHING condition','typedef_inner',6,'p_typedef_1','plyInmantaParser.py',453),
  ('typedef_inner -> TYPEDEF CID AS constructor','typedef_inner',4,'p_typedef_cls','plyInmantaParser.py',459),
  ('index -> INDEX class_ref ( id_list )','index',5,'p_index','plyInmantaParser.py',466),
  ('condition -> ( condition )','condition',3,'p_condition_1','plyInmantaParser.py',475),
  ('condition -> operand CMP_OP operand','condition',3,'p_condition_2','plyInmantaParser.py',480),
  ('condition -> operand IN list_def','condition',3,'p_condition_2','plyInmantaParser.py',481),
  ('condition -> operand IN var_ref','condition',3,'p_condition_2','plyInmantaParser.py',482),
  ('condition -> condition AND condition','condition',3,'p_condition_2','plyInmantaParser.py',483),
  ('condition -> condition OR condition','condition',3,'p_condition_2','plyInmantaParser.py',484),
  ('condition -> function_call','condition',1,'p_condition_3','plyInmantaParser.py',491),
  ('condition -> var_ref','condition',1,'p_condition_3','plyInmantaParser.py',492),
  ('condition -> NOT condition','condition',2,'p_condition_not','plyInmantaParser.py',497),
  ('condition -> var_ref . ID IS DEFINED','condition',5,'p_condition_is_defined','plyInmantaParser.py',503),
  ('condition -> ID IS DEFINED','condition',3,'p_condition_is_defined_short','plyInmantaParser.py',509),
  ('condition -> TRUE','condition',1,'p_condition_term_1','plyInmantaParser.py',515),
  ('condition -> FALSE','condition',1,'p_condition_term_1','plyInmantaParser.py',516),
  ('operand -> constant','operand',1,'p_operand','plyInmantaParser.py',526),
  ('operand -> function_call','operand',1,'p_operand','plyInmantaParser.py',527),
  ('operand -> constructor','operand',1,'p_operand','plyInmantaParser.py',528),
  ('operand -> list_def','operand',1,'p_operand','plyInmantaParser.py',529),
  ('operand -> map_def','operand',1,'p_operand','plyInmantaParser.py',530),
  ('operand -> var_ref','operand',1,'p_operand','plyInmantaParser.py',531),
  ('operand -> index_lookup','operand',1,'p_operand','plyInmantaParser.py',532),
  ('constructor -> class_ref ( param_list )','constructor',4,'p_constructor','plyInmantaParser.py',537),
  ('constructor -> class_ref ( )','constructor',3,'p_constructor_empty','plyInmantaParser.py',542),
  ('function_call -> ns_ref ( )','function_call',3,'p_function_call_empty','plyInmantaParser.py',547),
  ('function_call -> ns_ref ( operand_list )','function_call',4,'p_function_call','plyInmantaParser.py',553),
  ('list_def -> [ operand_list ]','list_def',3,'p_list_def','plyInmantaParser.py',559),
  ('list_def -> [ ]','list_def',2,'p_list_def_empty','plyInmantaParser.py',565),
  ('pair_list -> STRING : operand , pair_list','pair_list',5,'p_pair_list_collect','plyInmantaParser.py',571),
  ('pair_list -> STRING : operand','pair_list',3,'p_pair_list_term','plyInmantaParser.py',577),
  ('map_def -> { pair_list }','map_def',3,'p_map_def','plyInmantaParser.py',582),
  ('map_def -> { }','map_def',2,'p_map_def_empty','plyInmantaParser.py',588),
  ('index_lookup -> class_ref [ param_list ]','index_lookup',4,'p_index_lookup','plyInmantaParser.py',594),
  ('index_lookup -> attr_ref [ param_list ]','index_lookup',4,'p_short_index_lookup','plyInmantaParser.py',600),
  ('constant -> INT','constant',1,'p_constant','plyInmantaParser.py',609),
  ('constant -> FLOAT','constant',1,'p_constant','plyInmantaParser.py',610),
  ('constant -> mls','constant',1,'p_constant','plyInmantaParser.py',611),
  ('constant -> NULL','constant',1,'p_constant_none','plyInmantaParser.py',618),
  ('constant -> REGEX','constant',1,'p_constant_regex','plyInmantaParser.py',625),
  ('constant -> TRUE','constant',1,'p_constant_t','plyInmantaParser.py',632),
  ('constant -> FALSE','constant',1,'p_constant_f','plyInmantaParser.py',639),
  ('constant -> STRING','constant',1,'p_string','plyInmantaParser.py',649),
  ('constant_list -> [ ]','constant_list',2,'p_constant_list_empty','plyInmantaParser.py',684),
  ('constant_list -> [ constants ]','constant_list',3,'p_constant_list','plyInmantaParser.py',690),
  ('constants -> constant','constants',1,'p_constants_term','plyInmantaParser.py',696),
  ('constants -> constant , constants','constants',3,'p_constants_collect','plyInmantaParser.py',701),
  ('param_list -> ID = operand , param_list','param_list',5,'p_param_list_collect','plyInmantaParser.py',707),
  ('param_list -> ID = operand','param_list',3,'p_param_list_term','plyInmantaParser.py',713),
  ('operand_list -> operand , operand_list','operand_list',3,'p_operand_list_collect','plyInmantaParser.py',718),
  ('operand_list -> operand','operand_list',1,'p_operand_list_term','plyInmantaParser.py',724),
  ('ns_list -> ns_ref , ns_list','ns_list',3,'p_ns_list_collect','plyInmantaParser.py',729),
  ('ns_list -> ns_ref','ns_list',1,'p_ns_list_term','plyInmantaParser.py',735),
  ('var_ref -> attr_ref','var_ref',1,'p_var_ref','plyInmantaParser.py',740),
  ('attr_ref -> var_ref . ID','attr_ref',3,'p_attr_ref','plyInmantaParser.py',745),
  ('var_ref -> ns_ref','var_ref',1,'p_var_ref_2','plyInmantaParser.py',751),
  ('class_ref -> CID','class_ref',1,'p_class_ref_direct','plyInmantaParser.py',757),
  ('class_ref -> ns_ref SEP CID','class_ref',3,'p_class_ref','plyInmantaParser.py',762),
  ('class_ref_list -> class_ref , class_ref_list','class_ref_list',3,'p_class_ref_list_collect','plyInmantaParser.py',767),
  ('class_ref_list -> class_ref','class_ref_list',1,'p_class_ref_list_term','plyInmantaParser.py',773),
  ('ns_ref -> ns_ref SEP ID','ns_ref',3,'p_ns_ref','plyInmantaParser.py',778),
  ('ns_ref -> ID','ns_ref',1,'p_ns_ref_term','plyInmantaParser.py',784),
  ('id_list -> ID , id_list','id_list',3,'p_id_list_collect','plyInmantaParser.py',790),
  ('id_list -> ID','id_list',1,'p_id_list_term','plyInmantaParser.py',796),
  ('mls -> MLS_END','mls',1,'p_mls_term','plyInmantaParser.py',801),
  ('mls -> MLS mls','mls',2,'p_mls_collect','plyInmantaParser.py',807),
]
