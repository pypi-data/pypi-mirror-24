#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {
    'case',
    'catch',
    'class',
    'def',
    'do',
    'else',
    'extends',
    'false',
    'final',
    'finally',
    'for',
    'forSome',
    'if',
    'implicit',
    'import',
    'lazy',
    'match',
    'new',
    'null',
    'object',
    'override',
    'package',
    'private',
    'protected',
    'super',
    'this',
    'throw',
    'trait',
    'true',
    'try',
    'val',
    'var',
    'while',
    'with',
}  # type: ignore


class ScalaBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=' ',
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(ScalaBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class ScalaParser(Parser):
    def __init__(
        self,
        whitespace=' ',
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=ScalaBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(ScalaParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _nl1_(self):  # noqa
        with self._optional():
            self._eolComment_()
            self.name_last_node('comment')
        self._token('\n')
        self.name_last_node('nl')
        self.ast._define(
            ['comment', 'nl'],
            []
        )

    @tatsumasu()
    def _nl_(self):  # noqa

        def block0():
            self._nl1_()
        self._positive_closure(block0)

    @tatsumasu()
    def _seminl_(self):  # noqa
        self._token(';')
        self.name_last_node('semi')
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self.ast._define(
            ['nl', 'semi'],
            []
        )

    @tatsumasu()
    def _eol_(self):  # noqa
        with self._choice():
            with self._option():
                self._nl_()
            with self._option():
                self._seminl_()
            self._error('no available options')

    @tatsumasu()
    def _UnicodeEscape_(self):  # noqa
        self._token('\\u')

        def block0():
            self._token('u')
        self._closure(block0)
        self._HexDigit_()
        self._HexDigit_()
        self._HexDigit_()
        self._HexDigit_()

    @tatsumasu()
    def _HexDigit_(self):  # noqa
        self._pattern(r'[0-9A-Fa-f]')

    @tatsumasu()
    def _WhiteSpace_(self):  # noqa
        with self._choice():
            with self._option():
                self._token(' ')
            with self._option():
                self._token('\t')
            with self._option():
                self._token('\r')
            with self._option():
                self._token('\n')
            self._error('no available options')

    @tatsumasu()
    def _UnicodeUpper_(self):  # noqa
        self._pattern(r'.')

    @tatsumasu()
    def _UnicodeLower_(self):  # noqa
        self._pattern(r'.')

    @tatsumasu()
    def _UnicodeLetterMisc_(self):  # noqa
        self._pattern(r'.')

    @tatsumasu()
    def _UnicodeOpchar_(self):  # noqa
        self._pattern(r'.')

    @tatsumasu()
    def _Upper_(self):  # noqa
        self._UnicodeUpper_()

    @tatsumasu()
    def _Lower_(self):  # noqa
        self._UnicodeLower_()

    @tatsumasu()
    def _Letter_(self):  # noqa
        with self._choice():
            with self._option():
                self._Upper_()
            with self._option():
                self._Lower_()
            with self._option():
                self._UnicodeLetterMisc_()
            self._error('no available options')

    @tatsumasu()
    def _Digit_(self):  # noqa
        self._pattern(r'\d')

    @tatsumasu()
    def _paren_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')
            with self._option():
                self._token(')')
            with self._option():
                self._token('[')
            with self._option():
                self._token(']')
            with self._option():
                self._token('{')
            with self._option():
                self._token('}')
            self._error('no available options')

    @tatsumasu()
    def _delim_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('`')
            with self._option():
                self._token("'")
            with self._option():
                self._token('"')
            with self._option():
                self._token('.')
            with self._option():
                self._token(';')
            with self._option():
                self._token(',')
            self._error('no available options')

    @tatsumasu()
    def _assign_(self):  # noqa
        self._token('=')
        self.name_last_node('op')
        with self._ifnot():
            self._Opchar_()
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self.ast._define(
            ['nl', 'op'],
            []
        )

    @tatsumasu()
    def _wildcard_(self):  # noqa
        self._token('_')

    @tatsumasu()
    def _Wildcard_(self):  # noqa
        self._pattern(r'_')

    @tatsumasu()
    def _arrow_(self):  # noqa
        self._token('=>')
        self.name_last_node('arrow')
        with self._ifnot():
            self._Opchar_()
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self.ast._define(
            ['arrow', 'nl'],
            []
        )

    @tatsumasu()
    def _enumeratorArrow_(self):  # noqa
        self._token('<-')

    @tatsumasu()
    def _projectOp_(self):  # noqa
        self._token('#')

    @tatsumasu()
    def _OpcharBlocker_(self):  # noqa
        with self._choice():
            with self._option():
                self._Upper_()
            with self._option():
                self._Lower_()
            with self._option():
                self._Letter_()
            with self._option():
                self._Digit_()
            with self._option():
                self._paren_()
            with self._option():
                self._delim_()
            with self._option():
                self._blockCommentStart_()
            with self._option():
                self._eolCommentStart_()
            self._error('no available options')

    @tatsumasu()
    def _PrintableChar_(self):  # noqa
        self._pattern(r'[\u0020-\u007F]')

    @tatsumasu()
    def _PrintableCharNoWs_(self):  # noqa
        self._pattern(r'[\u0021-\u007F]')

    @tatsumasu()
    def _Opchar_(self):  # noqa
        with self._ifnot():
            self._OpcharBlocker_()
        with self._group():
            with self._choice():
                with self._option():
                    self._PrintableCharNoWs_()
                with self._option():
                    self._UnicodeOpchar_()
                self._error('no available options')

    @tatsumasu()
    def _CharEscapeSeq_(self):  # noqa
        self._token('\\')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('b')
                with self._option():
                    self._token('t')
                with self._option():
                    self._token('n')
                with self._option():
                    self._token('f')
                with self._option():
                    self._token('r')
                with self._option():
                    self._token('"')
                with self._option():
                    self._token("'")
                with self._option():
                    self._token('\\')
                self._error('no available options')

    @tatsumasu()
    def _lpar_(self):  # noqa
        self._token('(')
        self.name_last_node('par')
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self.ast._define(
            ['nl', 'par'],
            []
        )

    @tatsumasu()
    def _rpar_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._token(')')
        self.name_last_node('par')
        self.ast._define(
            ['nl', 'par'],
            []
        )

    @tatsumasu()
    def _lbrace_(self):  # noqa
        self._token('{')
        self.name_last_node('brace')
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self.ast._define(
            ['brace', 'nl'],
            []
        )

    @tatsumasu()
    def _rbrace_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._token('}')
        self.name_last_node('brace')
        self.ast._define(
            ['brace', 'nl'],
            []
        )

    @tatsumasu()
    def _lbrack_(self):  # noqa
        self._token('[')
        self.name_last_node('brack')
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self.ast._define(
            ['brack', 'nl'],
            []
        )

    @tatsumasu()
    def _rbrack_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._token(']')
        self.name_last_node('brack')
        self.ast._define(
            ['brack', 'nl'],
            []
        )

    @tatsumasu()
    def _prefixOperator_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('-')
            with self._option():
                self._token('+')
            with self._option():
                self._token('~')
            with self._option():
                self._token('!')
            self._error('no available options')

    @tatsumasu()
    def _syntaxOperator_(self):  # noqa
        with self._choice():
            with self._option():
                self._arrow_()
            with self._option():
                self._assign_()
            with self._option():
                self._enumeratorArrow_()
            self._error('no available options')

    @tatsumasu()
    def _this_(self):  # noqa
        self._token('this')

    @tatsumasu()
    def _booleanLiteral_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('true')
            with self._option():
                self._token('false')
            self._error('no available options')

    @tatsumasu('token')
    def _integerLiteral_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._decimalNumeral_()
                with self._option():
                    self._hexNumeral_()
                self._error('no available options')
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('L')
                with self._option():
                    self._token('l')
                self._error('no available options')

    @tatsumasu()
    def _negativeIntegerLiteral_(self):  # noqa
        self._token('-')
        self.name_last_node('minus')
        self._integerLiteral_()
        self.name_last_node('value')
        self.ast._define(
            ['minus', 'value'],
            []
        )

    @tatsumasu('token')
    def _decimalNumeral_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('0')
            with self._option():
                self._nonZeroDigit_()

                def block0():
                    self._Digit_()
                self._closure(block0)
            self._error('no available options')

    @tatsumasu('token')
    def _hexNumeral_(self):  # noqa
        self._token('0')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('x')
                with self._option():
                    self._token('X')
                self._error('no available options')
        self._HexDigit_()

        def block1():
            self._HexDigit_()
        self._closure(block1)

    @tatsumasu('token')
    def _nonZeroDigit_(self):  # noqa
        self._pattern(r'[1-9]')

    @tatsumasu('token')
    def _floatingPointLiteral_(self):  # noqa
        with self._choice():
            with self._option():

                def block0():
                    self._Digit_()
                self._positive_closure(block0)
                self._token('.')

                def block1():
                    self._Digit_()
                self._positive_closure(block1)
                with self._optional():
                    self._exponentPart_()
                with self._optional():
                    self._floatType_()
            with self._option():
                self._token('.')

                def block2():
                    self._Digit_()
                self._positive_closure(block2)
                with self._optional():
                    self._exponentPart_()
                with self._optional():
                    self._floatType_()
            with self._option():

                def block3():
                    self._Digit_()
                self._positive_closure(block3)
                self._exponentPart_()
                with self._optional():
                    self._floatType_()
            with self._option():

                def block4():
                    self._Digit_()
                self._positive_closure(block4)
                with self._optional():
                    self._exponentPart_()
                self._floatType_()
            self._error('no available options')

    @tatsumasu()
    def _negativeFloatingPointLiteral_(self):  # noqa
        self._token('-')
        self.name_last_node('minus')
        self._floatingPointLiteral_()
        self.name_last_node('value')
        self.ast._define(
            ['minus', 'value'],
            []
        )

    @tatsumasu()
    def _exponentPart_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('E')
                with self._option():
                    self._token('e')
                self._error('no available options')
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('+')
                with self._option():
                    self._token('-')
                self._error('no available options')

        def block2():
            self._Digit_()
        self._positive_closure(block2)

    @tatsumasu()
    def _floatType_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('F')
            with self._option():
                self._token('f')
            with self._option():
                self._token('D')
            with self._option():
                self._token('d')
            self._error('no available options')

    @tatsumasu()
    def _CharNoQuoteOrNewline_(self):  # noqa
        with self._ifnot():
            with self._group():
                with self._choice():
                    with self._option():
                        self._nl_()
                    with self._option():
                        self._token("'")
                    self._error('no available options')
        self._PrintableChar_()

    @tatsumasu()
    def _CharNoDoubleQuote_(self):  # noqa
        with self._ifnot():
            self._token('"')
        self._PrintableChar_()

    @tatsumasu()
    def _CharNoDoubleQuoteOrNewline_(self):  # noqa
        with self._ifnot():
            with self._group():
                with self._choice():
                    with self._option():
                        self._nl_()
                    with self._option():
                        self._token('"')
                    self._error('no available options')
        self._PrintableChar_()

    @tatsumasu()
    def _characterLiteral_(self):  # noqa
        self._token("'")
        with self._group():
            with self._choice():
                with self._option():
                    self._CharNoQuoteOrNewline_()
                with self._option():
                    self._UnicodeEscape_()
                with self._option():
                    self._CharEscapeSeq_()
                self._error('no available options')
        self._token("'")

    @tatsumasu()
    def _StringElement_(self):  # noqa
        with self._choice():
            with self._option():
                self._CharNoDoubleQuoteOrNewline_()
            with self._option():
                self._UnicodeEscape_()
            with self._option():
                self._CharEscapeSeq_()
            self._error('no available options')

    @tatsumasu('token')
    def _stringLiteralData_(self):  # noqa

        def block0():
            self._StringElement_()
        self._closure(block0)

    @tatsumasu()
    def _SingleQuote_(self):  # noqa
        self._token('"')

    @tatsumasu()
    def _openingSingleQuote_(self):  # noqa
        with self._optional():
            self._plainidName_()
            self.name_last_node('context')
        self._SingleQuote_()
        self.name_last_node('quote')
        self.ast._define(
            ['context', 'quote'],
            []
        )

    @tatsumasu()
    def _TripleQuote_(self):  # noqa
        self._token('"""')

    @tatsumasu()
    def _openingTripleQuote_(self):  # noqa
        with self._optional():
            self._plainidName_()
            self.name_last_node('context')
        self._TripleQuote_()
        self.name_last_node('quote')
        self.ast._define(
            ['context', 'quote'],
            []
        )

    @tatsumasu()
    def _singleLineStringLiteral_(self):  # noqa
        self._openingSingleQuote_()
        self.name_last_node('lquote')
        self._stringLiteralData_()
        self.name_last_node('data')
        self._token('"')
        self.name_last_node('rquote')
        self.ast._define(
            ['data', 'lquote', 'rquote'],
            []
        )

    @tatsumasu()
    def _multiLineChars_(self):  # noqa

        def block0():
            with self._optional():
                self._token('"')
            with self._optional():
                self._token('"')
            with self._group():
                with self._choice():
                    with self._option():
                        self._CharNoDoubleQuote_()
                    with self._option():
                        self._token('\n')
                    self._error('no available options')
        self._closure(block0)

    @tatsumasu()
    def _multiLineStringLiteral_(self):  # noqa
        self._openingTripleQuote_()
        self.name_last_node('lquote')
        self._multiLineChars_()
        self.name_last_node('data')
        self._token('"""')
        self.name_last_node('rquote')
        self.ast._define(
            ['data', 'lquote', 'rquote'],
            []
        )

    @tatsumasu()
    def _stringLiteral_(self):  # noqa
        with self._choice():
            with self._option():
                self._multiLineStringLiteral_()
            with self._option():
                self._singleLineStringLiteral_()
            self._error('no available options')

    @tatsumasu()
    def _symbolLiteral_(self):  # noqa
        self._token("'")
        self._plainidName_()

    @tatsumasu()
    def _blockCommentStart_(self):  # noqa
        self._token('/*')

    @tatsumasu()
    def _blockCommentEnd_(self):  # noqa
        self._token('*/')

    @tatsumasu()
    def _blockCommentChar1_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern(r'.')
            with self._option():
                self._nl_()
            self._error('no available options')

    @tatsumasu()
    def _blockCommentChar_(self):  # noqa
        with self._ifnot():
            self._blockCommentEnd_()
        self._blockCommentChar1_()

    @tatsumasu()
    def _eolCommentStart_(self):  # noqa
        self._token('//')

    @tatsumasu()
    def _eolCommentChar_(self):  # noqa
        with self._ifnot():
            self._nl_()
        self._pattern(r'.')

    @tatsumasu('token')
    def _blockCommentContent_(self):  # noqa

        def block0():
            self._blockCommentChar_()
        self._closure(block0)

    @tatsumasu('token')
    def _eolCommentContent_(self):  # noqa

        def block0():
            self._eolCommentChar_()
        self._closure(block0)

    @tatsumasu()
    def _blockComment_(self):  # noqa
        self._blockCommentStart_()
        self.name_last_node('start')
        self._blockCommentContent_()
        self.name_last_node('content')
        self._blockCommentEnd_()
        self.name_last_node('end')
        self.ast._define(
            ['content', 'end', 'start'],
            []
        )

    @tatsumasu()
    def _eolComment_(self):  # noqa
        self._eolCommentStart_()
        self.name_last_node('start')
        self._eolCommentContent_()
        self.name_last_node('content')
        with self._if():
            self._nl_()
        self.ast._define(
            ['content', 'start'],
            []
        )

    @tatsumasu()
    def _comment_(self):  # noqa
        with self._choice():
            with self._option():
                self._blockComment_()
            with self._option():
                self._eolComment_()
            self._error('no available options')

    @tatsumasu()
    def _OpBlocker_(self):  # noqa
        self._syntaxOperator_()
        with self._ifnot():
            self._Opchar_()

    @tatsumasu('token')
    def _op_(self):  # noqa
        with self._ifnot():
            self._OpBlocker_()

        def block0():
            self._Opchar_()
        self._positive_closure(block0)

    @tatsumasu()
    def _IdWildcard_(self):  # noqa
        self._Wildcard_()
        with self._ifnot():
            self._Opchar_()

    @tatsumasu()
    def _IdLetter_(self):  # noqa
        with self._choice():
            with self._option():
                self._Letter_()
            with self._option():
                self._IdWildcard_()
            self._error('no available options')

    @tatsumasu()
    def _plainidNoToken_(self):  # noqa
        self._IdLetter_()

        def block0():
            with self._choice():
                with self._option():
                    self._IdLetter_()
                with self._option():
                    self._Digit_()
                self._error('no available options')
        self._closure(block0)

    @tatsumasu('token')
    def _plainid_(self):  # noqa
        self._IdLetter_()

        def block0():
            with self._choice():
                with self._option():
                    self._IdLetter_()
                with self._option():
                    self._Digit_()
                self._error('no available options')
        self._closure(block0)

    @tatsumasu()
    def _plainidName_(self):  # noqa
        self._plainid_()
        self._check_name()

    @tatsumasu('token')
    def _idOpSuffix_(self):  # noqa
        self._plainidName_()
        self._Wildcard_()

        def block0():
            self._Opchar_()
        self._positive_closure(block0)

    @tatsumasu()
    def _quotedId_(self):  # noqa
        self._token('`')
        self._stringLiteralData_()
        self._token('`')

    @tatsumasu()
    def _id_(self):  # noqa
        with self._choice():
            with self._option():
                self._idOpSuffix_()
            with self._option():
                self._plainidName_()
            with self._option():
                self._op_()
            with self._option():
                self._quotedId_()
            self._error('no available options')

    @tatsumasu()
    def _case_(self):  # noqa
        self._token('case')

    @tatsumasu()
    def _match_(self):  # noqa
        self._token('match')

    @tatsumasu()
    def _typekw_(self):  # noqa
        self._token('type')

    @tatsumasu()
    def _literal_(self):  # noqa
        with self._choice():
            with self._option():
                self._negativeIntegerLiteral_()
            with self._option():
                self._integerLiteral_()
            with self._option():
                self._negativeFloatingPointLiteral_()
            with self._option():
                self._floatingPointLiteral_()
            with self._option():
                self._booleanLiteral_()
            with self._option():
                self._characterLiteral_()
            with self._option():
                self._token('null')
            with self._option():
                self._stringLiteral_()
            with self._option():
                self._symbolLiteral_()
            self._error('no available options')

    @tatsumasu()
    def _qualId_(self):  # noqa
        self._id_()

        def block0():
            self._token('.')
            self._id_()
        self._closure(block0)

    @tatsumasu()
    def _ids_(self):  # noqa
        self._id_()

        def block0():
            self._token(',')
            self._id_()
        self._closure(block0)

    @tatsumasu()
    def _classQualifier_(self):  # noqa
        self._lbrack_()
        self.name_last_node('lbrack')
        self._id_()
        self.name_last_node('id')
        self._rbrack_()
        self.name_last_node('rbrack')
        self.ast._define(
            ['id', 'lbrack', 'rbrack'],
            []
        )

    @tatsumasu()
    def _superAttrPre_(self):  # noqa
        self._id_()
        self.name_last_node('id')
        self._token('.')
        self.name_last_node('dot')
        self.ast._define(
            ['dot', 'id'],
            []
        )

    @tatsumasu()
    def _superAttr_(self):  # noqa
        with self._optional():
            self._superAttrPre_()
            self.name_last_node('pre')
        self._token('super')
        self.name_last_node('superkw')
        with self._optional():
            self._classQualifier_()
            self.name_last_node('qual')
        self._token('.')
        self.name_last_node('dot')
        self._id_()
        self.name_last_node('attr')
        self.ast._define(
            ['attr', 'dot', 'pre', 'qual', 'superkw'],
            []
        )

    @tatsumasu()
    def _stableId_(self):  # noqa
        with self._choice():
            with self._option():
                self._thisRef_()
            with self._option():
                self._superAttr_()
            with self._option():
                self._id_()
            self._error('no available options')

    @tatsumasu()
    def _thisRef_(self):  # noqa
        with self._optional():
            self._id_()
            self._token('.')
        self._token('this')

    @tatsumasu()
    def _selectrest_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._token('.')
        self.name_last_node('dot')
        self._id_()
        self.name_last_node('id')
        self.ast._define(
            ['dot', 'id', 'nl'],
            []
        )

    @tatsumasu()
    def _select_(self):  # noqa
        self._stableId_()
        self.name_last_node('head')

        def block1():
            self._selectrest_()
            self.name_last_node('tail')
        self._positive_closure(block1)
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _path_(self):  # noqa
        with self._choice():
            with self._option():
                self._select_()
            with self._option():
                self._id_()
            self._error('no available options')

    @tatsumasu()
    def _functionArgTypes_(self):  # noqa
        with self._choice():
            with self._option():
                self._infixType_()
            with self._option():
                self._token('(')
                with self._optional():
                    self._paramType_()

                    def block0():
                        self._token(',')
                        self._paramType_()
                    self._closure(block0)
                self._token(')')
            self._error('no available options')

    @tatsumasu()
    def _existentialClause_(self):  # noqa
        self._token('forSome')
        self._token('{')
        self._existentialDcl_()

        def block0():
            self._eol_()
            self._existentialDcl_()
        self._closure(block0)
        self._token('}')

    @tatsumasu()
    def _existentialDcl_(self):  # noqa
        with self._choice():
            with self._option():
                self._typekw_()
                self._typeDcl_()
            with self._option():
                self._token('val')
                self._valDcl_()
            self._error('no available options')

    @tatsumasu()
    def _typeProjectionPre_(self):  # noqa
        with self._choice():
            with self._option():
                self._appliedType_()
            with self._option():
                self._simpleType_()
            self._error('no available options')

    @tatsumasu()
    def _typeProjection_(self):  # noqa
        self._typeProjectionPre_()
        self.name_last_node('pre')
        self._projectOp_()
        self.name_last_node('hash')
        self._id_()
        self.name_last_node('id')
        self.ast._define(
            ['hash', 'id', 'pre'],
            []
        )

    @tatsumasu()
    def _dependentType_(self):  # noqa
        self._path_()
        self._token('.')
        self._typekw_()

    @tatsumasu()
    def _parenthesizedTypes_(self):  # noqa
        self._lpar_()
        self.name_last_node('lpar')
        self._types_()
        self.name_last_node('types')
        self._rpar_()
        self.name_last_node('rpar')
        self.ast._define(
            ['lpar', 'rpar', 'types'],
            []
        )

    @tatsumasu()
    def _simpleType_(self):  # noqa
        with self._choice():
            with self._option():
                self._dependentType_()
            with self._option():
                self._parenthesizedTypes_()
            with self._option():
                self._select_()
            with self._option():
                self._stableId_()
            self._error('no available options')

    @tatsumasu()
    def _typeArgs_(self):  # noqa
        self._lbrack_()
        self.name_last_node('lbrack')
        self._types_()
        self.name_last_node('types')
        self._rbrack_()
        self.name_last_node('rbrack')
        self.ast._define(
            ['lbrack', 'rbrack', 'types'],
            []
        )

    @tatsumasu()
    def _refinementTemplate_(self):  # noqa
        with self._optional():
            self._nl_()
        self._token('{')
        self._refineStat_()

        def block0():
            self._eol_()
            self._refineStat_()
        self._closure(block0)
        self._token('}')

    @tatsumasu()
    def _refineStat_(self):  # noqa
        with self._choice():
            with self._option():
                self._dcl_()
            with self._option():
                self._typeDef_()
            self._error('no available options')

    @tatsumasu()
    def _appliedType_(self):  # noqa
        self._simpleType_()
        self.name_last_node('simple')
        self._typeArgs_()
        self.name_last_node('args')
        self.ast._define(
            ['args', 'simple'],
            []
        )

    @tatsumasu()
    def _regularType_(self):  # noqa
        with self._choice():
            with self._option():
                self._typeProjection_()
            with self._option():
                self._appliedType_()
            with self._option():
                self._simpleType_()
            self._error('no available options')

    @tatsumasu()
    def _annotType_(self):  # noqa
        self._regularType_()
        self.name_last_node('tpe')

        def block2():
            self._annotation_()
        self._positive_closure(block2)
        self.name_last_node('anno')
        self.ast._define(
            ['anno', 'tpe'],
            []
        )

    @tatsumasu()
    def _annotOrRegularType_(self):  # noqa
        with self._choice():
            with self._option():
                self._annotType_()
            with self._option():
                self._regularType_()
            self._error('no available options')

    @tatsumasu()
    def _refinementSubtype_(self):  # noqa
        self._withkw_()
        self.name_last_node('withkw')
        self._annotOrRegularType_()
        self.name_last_node('type')
        self.ast._define(
            ['type', 'withkw'],
            []
        )

    @tatsumasu()
    def _refinementsOnlySubtype_(self):  # noqa

        def block0():
            self._refinementSubtype_()
        self._positive_closure(block0)

    @tatsumasu()
    def _refinementsWithTemplate_(self):  # noqa

        def block0():
            self._refinementSubtype_()
            self.name_last_node('subtype')
        self._closure(block0)
        self._refinementTemplate_()
        self.name_last_node('templ')
        self.ast._define(
            ['subtype', 'templ'],
            []
        )

    @tatsumasu()
    def _refinements_(self):  # noqa
        with self._choice():
            with self._option():
                self._refinementsOnlySubtype_()
            with self._option():
                self._refinementsWithTemplate_()
            self._error('no available options')

    @tatsumasu()
    def _refinedType_(self):  # noqa
        self._annotOrRegularType_()
        self.name_last_node('compoundpre')
        self._refinements_()
        self.name_last_node('refine')
        self.ast._define(
            ['compoundpre', 'refine'],
            []
        )

    @tatsumasu()
    def _compoundType_(self):  # noqa
        with self._choice():
            with self._option():
                self._refinedType_()
            with self._option():
                self._refinementTemplate_()
            self._error('no available options')

    @tatsumasu()
    def _infixTypePart_(self):  # noqa
        with self._choice():
            with self._option():
                self._compoundType_()
            with self._option():
                self._simpleType_()
            self._error('no available options')

    @tatsumasu()
    def _infixTypeRest_(self):  # noqa
        self._id_()
        self.name_last_node('infix')
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._infixTypePart_()
        self.name_last_node('rhs')
        self.ast._define(
            ['infix', 'nl', 'rhs'],
            []
        )

    @tatsumasu()
    def _infixType_(self):  # noqa
        self._infixTypePart_()
        self.name_last_node('head')

        def block2():
            self._infixTypeRest_()
        self._positive_closure(block2)
        self.name_last_node('tail')
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _functionType_(self):  # noqa
        self._functionArgTypes_()
        self.name_last_node('args')
        self._arrow_()
        self.name_last_node('arrow')
        self._type_()
        self.name_last_node('tpe')
        self.ast._define(
            ['args', 'arrow', 'tpe'],
            []
        )

    @tatsumasu()
    def _infixExistentialType_(self):  # noqa
        self._infixType_()
        self.name_last_node('tpe')
        self._existentialClause_()
        self.name_last_node('exi')
        self.ast._define(
            ['exi', 'tpe'],
            []
        )

    @tatsumasu()
    def _type_(self):  # noqa
        with self._choice():
            with self._option():
                self._functionType_()
            with self._option():
                self._infixExistentialType_()
            with self._option():
                self._infixType_()
            with self._option():
                self._compoundType_()
            with self._option():
                self._annotType_()
            with self._option():
                self._regularType_()
            self._error('no available options')

    @tatsumasu()
    def _typesTail_(self):  # noqa
        self._token(',')
        self.name_last_node('comma')
        self._type_()
        self.name_last_node('tpe')
        self.ast._define(
            ['comma', 'tpe'],
            []
        )

    @tatsumasu()
    def _types_(self):  # noqa
        self._type_()
        self.name_last_node('head')

        def block2():
            self._typesTail_()
        self._closure(block2)
        self.name_last_node('tail')
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _ascription_(self):  # noqa
        with self._choice():
            with self._option():
                self._token(':')
                self._infixType_()
            with self._option():
                self._token(':')
                self._annotation_()

                def block0():
                    self._annotation_()
                self._closure(block0)
            with self._option():
                self._token(':')
                self._wildcard_()
                self._token('*')
            self._error('no available options')

    @tatsumasu()
    def _patMat_(self):  # noqa
        self._simpleOrCompoundExpr_()
        self.name_last_node('scrutinee')
        self._match_()
        self.name_last_node('match')
        self._caseBlock_()
        self.name_last_node('block')
        self.ast._define(
            ['block', 'match', 'scrutinee'],
            []
        )

    @tatsumasu()
    def _bindings_(self):  # noqa
        self._token('(')
        with self._optional():
            self._binding_()

            def block0():
                self._token(',')
                self._binding_()
            self._closure(block0)
        self._token(')')

    @tatsumasu()
    def _binding_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._id_()
                with self._option():
                    self._wildcard_()
                self._error('no available options')
        with self._optional():
            self._token(':')
            self._type_()

    @tatsumasu()
    def _postfixExpr_(self):  # noqa
        self._infixExpr_()
        self._id_()
        with self._if():
            self._eol_()

    @tatsumasu()
    def _infixOper_(self):  # noqa
        with self._choice():
            with self._option():
                self._classInstantiation_()
            with self._option():
                self._applyExpr_()
            with self._option():
                self._attrExpr_()
            with self._option():
                self._prefixExpr_()
            with self._option():
                self._infixExpr_()
            with self._option():
                self._simpleExpr_()
            self._error('no available options')

    @tatsumasu()
    def _infixExpr_(self):  # noqa
        self._infixOper_()
        self.name_last_node('left')
        self._id_()
        self.name_last_node('method')
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._expr_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'method', 'nl', 'right'],
            []
        )

    @tatsumasu()
    def _prefixExpr_(self):  # noqa
        self._prefixOperator_()
        self.name_last_node('prefix')
        self._simpleExpr_()
        self.name_last_node('expr')
        self.ast._define(
            ['expr', 'prefix'],
            []
        )

    @tatsumasu()
    def _simpleAssignExpr_(self):  # noqa
        self._id_()
        self.name_last_node('id')
        self._assign_()
        self.name_last_node('assign')
        self._expr_()
        self.name_last_node('rhs')
        self.ast._define(
            ['assign', 'id', 'rhs'],
            []
        )

    @tatsumasu()
    def _attrAssignExpr_(self):  # noqa
        self._attrExpr_()
        self.name_last_node('lhs')
        self._assign_()
        self.name_last_node('assign')
        self._expr_()
        self.name_last_node('rhs')
        self.ast._define(
            ['assign', 'lhs', 'rhs'],
            []
        )

    @tatsumasu()
    def _applyAssignExprPre_(self):  # noqa
        with self._choice():
            with self._option():
                self._parenthesizedExprsExpr_()
            with self._option():
                self._path_()
            with self._option():
                self._wildcard_()
            self._error('no available options')

    @tatsumasu()
    def _applyAssignExpr_(self):  # noqa
        self._applyAssignExprPre_()
        self.name_last_node('expr')
        self._argListExpr_()
        self.name_last_node('app')
        self._assign_()
        self.name_last_node('assign')
        self._expr_()
        self.name_last_node('rhs')
        self.ast._define(
            ['app', 'assign', 'expr', 'rhs'],
            []
        )

    @tatsumasu()
    def _assignExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._attrAssignExpr_()
            with self._option():
                self._simpleAssignExpr_()
            with self._option():
                self._applyAssignExpr_()
            self._error('no available options')

    @tatsumasu()
    def _argumentExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._simpleAssignExpr_()
            with self._option():
                self._expr_()
            self._error('no available options')

    @tatsumasu()
    def _argumentExprsTail_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        self._token(',')
        self.name_last_node('comma')
        with self._optional():
            self._nl_()
            self.name_last_node('nl2')
        self._argumentExpr_()
        self.name_last_node('arg')
        self.ast._define(
            ['arg', 'comma', 'nl1', 'nl2'],
            []
        )

    @tatsumasu()
    def _argumentExprs_(self):  # noqa
        self._argumentExpr_()
        self.name_last_node('head')

        def block2():
            self._argumentExprsTail_()
        self._closure(block2)
        self.name_last_node('tail')
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _arguments_(self):  # noqa
        self._lpar_()
        self.name_last_node('lpar')
        with self._optional():
            self._argumentExprs_()
            self.name_last_node('args')
        self._rpar_()
        self.name_last_node('rpar')
        self.ast._define(
            ['args', 'lpar', 'rpar'],
            []
        )

    @tatsumasu()
    def _argumentSplat_(self):  # noqa
        self._simpleOrCompoundExpr_()
        self.name_last_node('expr')
        self._token(':')
        self.name_last_node('colon')
        self._wildcard_()
        self.name_last_node('wildcard')
        self._token('*')
        self.name_last_node('aster')
        self.ast._define(
            ['aster', 'colon', 'expr', 'wildcard'],
            []
        )

    @tatsumasu()
    def _argumentsWithSplat_(self):  # noqa
        self._lpar_()
        self.name_last_node('lpar')
        with self._optional():
            self._argumentExprs_()
            self.name_last_node('args')
            self._token(',')
            self.name_last_node('comma')
        self.name_last_node('regular')
        self._argumentSplat_()
        self.name_last_node('splat')
        self._rpar_()
        self.name_last_node('rpar')
        self.ast._define(
            ['args', 'comma', 'lpar', 'regular', 'rpar', 'splat'],
            []
        )

    @tatsumasu()
    def _argumentsBlock_(self):  # noqa
        with self._optional():
            self._nl_()
        self._block_()

    @tatsumasu()
    def _argListExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._argumentsWithSplat_()
            with self._option():
                self._arguments_()
            with self._option():
                self._argumentsBlock_()
            self._error('no available options')

    @tatsumasu()
    def _parenthesizedInfixExpr_(self):  # noqa
        self._infixOper_()
        self.name_last_node('left')
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        self._id_()
        self.name_last_node('method')
        with self._optional():
            self._nl_()
            self.name_last_node('nl2')
        self._parenthesizedExpr_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'method', 'nl1', 'nl2', 'right'],
            []
        )

    @tatsumasu()
    def _parenthesizedExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._parenthesizedInfixExpr_()
            with self._option():
                self._expr_()
            self._error('no available options')

    @tatsumasu()
    def _parenthesizedExprs_(self):  # noqa
        self._parenthesizedExpr_()
        self.name_last_node('head')

        def block1():
            with self._optional():
                self._nl_()
                self.name_last_node('nl1')
            self._token(',')
            self.name_last_node('comma')
            with self._optional():
                self._nl_()
                self.name_last_node('nl2')
            self._parenthesizedExpr_()
        self._closure(block1)
        self.ast._define(
            ['comma', 'head', 'nl1', 'nl2'],
            []
        )

    @tatsumasu()
    def _parenthesizedExprsExpr_(self):  # noqa
        self._lpar_()
        self.name_last_node('lpar')
        with self._optional():
            self._parenthesizedExprs_()
            self.name_last_node('exprs')
        self._rpar_()
        self.name_last_node('rpar')
        self.ast._define(
            ['exprs', 'lpar', 'rpar'],
            []
        )

    @tatsumasu()
    def _simpleExprPre_(self):  # noqa
        with self._choice():
            with self._option():
                self._literal_()
            with self._option():
                self._attrExpr_()
            with self._option():
                self._simpleExprTypeArgs_()
            with self._option():
                self._simpleExpr_()
            with self._option():
                self._path_()
            with self._option():
                self._parenthesizedExprsExpr_()
            with self._option():
                self._wildcard_()
            self._error('no available options')

    @tatsumasu()
    def _attrExprPre_(self):  # noqa
        with self._choice():
            with self._option():
                self._literal_()
            with self._option():
                self._stableId_()
            with self._option():
                self._parenthesizedExprsExpr_()
            with self._option():
                self._wildcard_()
            with self._option():
                self._classInstantiation_()
            self._error('no available options')

    @tatsumasu()
    def _attrExpr_(self):  # noqa
        self._attrExprPre_()
        self.name_last_node('head')

        def block2():
            self._selectrest_()
        self._positive_closure(block2)
        self.name_last_node('tail')
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _attrExprTypeArgs_(self):  # noqa
        self._attrExpr_()
        self.name_last_node('expr')
        self._typeArgs_()
        self.name_last_node('targs')
        self.ast._define(
            ['expr', 'targs'],
            []
        )

    @tatsumasu()
    def _idTypeArgs_(self):  # noqa
        self._id_()
        self.name_last_node('id')
        self._typeArgs_()
        self.name_last_node('targs')
        self.ast._define(
            ['id', 'targs'],
            []
        )

    @tatsumasu()
    def _applyExprMethod_(self):  # noqa
        with self._choice():
            with self._option():
                self._idTypeArgs_()
            with self._option():
                self._id_()
            self._error('no available options')

    @tatsumasu()
    def _oneComponentExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._literal_()
            with self._option():
                self._applyExprMethod_()
            with self._option():
                self._wildcard_()
            with self._option():
                self._this_()
            self._error('no available options')

    @tatsumasu()
    def _applyMethod_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._token('.')
        self.name_last_node('dot')
        self._applyExprMethod_()
        self.name_last_node('meth')
        self.ast._define(
            ['dot', 'meth', 'nl'],
            []
        )

    @tatsumasu()
    def _applyExprArgss_(self):  # noqa

        def block0():
            self._argListExpr_()
        self._positive_closure(block0)

    @tatsumasu()
    def _applyExprApp_(self):  # noqa
        self._applyMethod_()
        self.name_last_node('meth')
        self._applyExprArgss_()
        self.name_last_node('argss')
        self.ast._define(
            ['argss', 'meth'],
            []
        )

    @tatsumasu()
    def _applyExprElem_(self):  # noqa
        with self._choice():
            with self._option():
                self._applyExprArgss_()
            with self._option():
                self._applyExprApp_()
            with self._option():
                self._applyMethod_()
            self._error('no available options')

    @tatsumasu()
    def _applyExprChain_(self):  # noqa

        def block0():
            self._applyExprElem_()
        self._positive_closure(block0)

    @tatsumasu()
    def _applyExpr_(self):  # noqa
        self._oneComponentExpr_()
        self.name_last_node('pre')
        self._applyExprChain_()
        self.name_last_node('app')
        self.ast._define(
            ['app', 'pre'],
            []
        )

    @tatsumasu()
    def _simpleExpr1_(self):  # noqa
        with self._choice():
            with self._option():
                self._literal_()
            with self._option():
                self._parenthesizedExprsExpr_()
            with self._option():
                self._applyExpr_()
            with self._option():
                self._path_()
            with self._option():
                self._wildcard_()
            with self._option():
                self._this_()
            self._error('no available options')

    @tatsumasu()
    def _classInstantiation_(self):  # noqa
        self._token('new')
        self.name_last_node('new')
        with self._group():
            with self._choice():
                with self._option():
                    self._classTemplate_()
                with self._option():
                    self._template_()
                self._error('no available options')
        self.name_last_node('templ')
        self.ast._define(
            ['new', 'templ'],
            []
        )

    @tatsumasu()
    def _etaPre_(self):  # noqa
        with self._choice():
            with self._option():
                self._simpleExprTypeArgs_()
            with self._option():
                self._simpleExpr1_()
            self._error('no available options')

    @tatsumasu()
    def _etaExpansion_(self):  # noqa
        self._etaPre_()
        self.name_last_node('expr')
        self._wildcard_()
        self.name_last_node('wildcard')
        self.ast._define(
            ['expr', 'wildcard'],
            []
        )

    @tatsumasu()
    def _simpleExprTypeArgs_(self):  # noqa
        self._simpleExpr1_()
        self.name_last_node('expr')
        self._typeArgs_()
        self.name_last_node('targs')
        self.ast._define(
            ['expr', 'targs'],
            []
        )

    @tatsumasu()
    def _simpleExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._simpleExprTypeArgs_()
            with self._option():
                self._simpleExpr1_()
            self._error('no available options')

    @tatsumasu()
    def _compoundExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._block_()
            with self._option():
                self._infixExpr_()
            with self._option():
                self._prefixExpr_()
            with self._option():
                self._postfixExpr_()
            with self._option():
                self._assignExpr_()
            with self._option():
                self._etaExpansion_()
            with self._option():
                self._applyExpr_()
            with self._option():
                self._attrExprTypeArgs_()
            with self._option():
                self._attrExpr_()
            with self._option():
                self._classInstantiation_()
            self._error('no available options')

    @tatsumasu()
    def _simpleOrCompoundExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._compoundExpr_()
            with self._option():
                self._simpleExpr_()
            self._error('no available options')

    @tatsumasu()
    def _ifExpr_(self):  # noqa
        self._token('if')
        self._token('(')
        self._expr_()
        self._token(')')

        def block0():
            self._nl_()
        self._closure(block0)
        self._expr_()
        with self._optional():
            with self._optional():
                self._eol_()
            self._token('else')
            with self._optional():
                self._nl_()
            self._expr_()

    @tatsumasu()
    def _whileExpr_(self):  # noqa
        self._token('while')
        self._token('(')
        self._expr_()
        self._token(')')

        def block0():
            self._nl_()
        self._closure(block0)
        self._expr_()

    @tatsumasu()
    def _catchExpr_(self):  # noqa
        self._token('catch')
        with self._optional():
            self._nl_()
        self._caseBlock_()

    @tatsumasu()
    def _finallyExpr_(self):  # noqa
        self._token('finally')
        self._expr_()

    @tatsumasu()
    def _tryExpr_(self):  # noqa
        self._token('try')
        with self._optional():
            self._nl_()
        with self._group():
            with self._choice():
                with self._option():
                    self._statBlock_()
                with self._option():
                    self._expr_()
                self._error('no available options')
        with self._optional():
            with self._optional():
                self._nl_()
            self._catchExpr_()
        with self._optional():
            with self._optional():
                self._nl_()
            self._finallyExpr_()

    @tatsumasu()
    def _doExpr_(self):  # noqa
        self._token('do')
        self._expr_()
        with self._optional():
            self._eol_()
        self._token('while')
        self._token('(')
        self._expr_()
        self._token(')')

    @tatsumasu()
    def _forExpr_(self):  # noqa
        self._token('for')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('(')
                    self._enumerators_()
                    self._token(')')
                with self._option():
                    self._token('{')
                    self._enumerators_()
                    self._token('}')
                self._error('no available options')

        def block1():
            self._nl_()
        self._closure(block1)
        with self._optional():
            self._token('yield')
        self._expr_()

    @tatsumasu()
    def _throwExpr_(self):  # noqa
        self._token('throw')
        self._expr_()

    @tatsumasu()
    def _returnExpr_(self):  # noqa
        self._token('return')
        with self._optional():
            self._expr_()

    @tatsumasu()
    def _controlExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._ifExpr_()
            with self._option():
                self._whileExpr_()
            with self._option():
                self._tryExpr_()
            with self._option():
                self._doExpr_()
            with self._option():
                self._forExpr_()
            with self._option():
                self._throwExpr_()
            with self._option():
                self._returnExpr_()
            self._error('no available options')

    @tatsumasu()
    def _anonFuncExprParamImplicit_(self):  # noqa
        self._token('implicit')
        self.name_last_node('implicitkw')
        self._id_()
        self.name_last_node('id')
        self.ast._define(
            ['id', 'implicitkw'],
            []
        )

    @tatsumasu()
    def _anonFuncExprParams_(self):  # noqa
        with self._choice():
            with self._option():
                self._bindings_()
            with self._option():
                self._anonFuncExprParamImplicit_()
            with self._option():
                self._id_()
            with self._option():
                self._wildcard_()
            self._error('no available options')

    @tatsumasu()
    def _anonFuncRhs_(self):  # noqa
        with self._choice():
            with self._option():
                self._blockBody_()
            with self._option():
                self._expr_()
            self._error('no available options')

    @tatsumasu()
    def _anonFuncExpr_(self):  # noqa
        self._anonFuncExprParams_()
        self.name_last_node('params')
        self._arrow_()
        self.name_last_node('arrow')
        self._anonFuncRhs_()
        self.name_last_node('rhs')
        self.ast._define(
            ['arrow', 'params', 'rhs'],
            []
        )

    @tatsumasu()
    def _ascribedSimpleOrCompoundExpr_(self):  # noqa
        self._simpleOrCompoundExpr_()
        self._ascription_()

    @tatsumasu()
    def _expr_(self):  # noqa
        with self._choice():
            with self._option():
                self._anonFuncExpr_()
            with self._option():
                self._controlExpr_()
            with self._option():
                self._patMat_()
            with self._option():
                self._simpleOrCompoundExpr_()
            with self._option():
                self._ascribedSimpleOrCompoundExpr_()
            self._error('no available options')

    @tatsumasu()
    def _exprsTail_(self):  # noqa
        self._token(',')
        self.name_last_node('comma')
        self._expr_()
        self.name_last_node('expr')
        self.ast._define(
            ['comma', 'expr'],
            []
        )

    @tatsumasu()
    def _exprs_(self):  # noqa
        self._expr_()
        self.name_last_node('head')

        def block2():
            self._exprsTail_()
        self._closure(block2)
        self.name_last_node('tail')
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _enumerators_(self):  # noqa
        self._generator_()

        def block0():
            self._eol_()
            self._generator_()
        self._closure(block0)

    @tatsumasu()
    def _generator_(self):  # noqa
        self._pattern1_()
        self._token('<-')
        self._expr_()

        def block0():
            with self._choice():
                with self._option():
                    with self._optional():
                        self._eol_()
                    self._guard_()
                with self._option():
                    self._eol_()
                    self._pattern1_()
                    self._assign_()
                    self._expr_()
                self._error('no available options')
        self._closure(block0)

    @tatsumasu()
    def _patternApply_(self):  # noqa
        self._stableId_()
        self.name_last_node('id')
        self._lpar_()
        self.name_last_node('lpar')
        with self._optional():
            self._patterns_()
            self.name_last_node('pats')
        self._rpar_()
        self.name_last_node('rpar')
        self.ast._define(
            ['id', 'lpar', 'pats', 'rpar'],
            []
        )

    @tatsumasu()
    def _patternApplyVariadic_(self):  # noqa
        self._stableId_()
        self.name_last_node('id')
        self._lpar_()
        self.name_last_node('lpar')
        with self._optional():
            self._patterns_()
            self.name_last_node('pats')
            self._token(',')
            self.name_last_node('comma')
        with self._optional():
            self._plainidName_()
            self.name_last_node('alias')
            self._token('@')
            self.name_last_node('at')
        self._token('_*')
        self.name_last_node('splat')
        self._rpar_()
        self.name_last_node('rpar')
        self.ast._define(
            ['alias', 'at', 'comma', 'id', 'lpar', 'pats', 'rpar', 'splat'],
            []
        )

    @tatsumasu()
    def _parenthesizedPatterns_(self):  # noqa
        self._lpar_()
        self.name_last_node('lpar')
        with self._optional():
            self._patterns_()
            self.name_last_node('pats')
        self._rpar_()
        self.name_last_node('rpar')
        self.ast._define(
            ['lpar', 'pats', 'rpar'],
            []
        )

    @tatsumasu()
    def _patternSimple_(self):  # noqa
        with self._choice():
            with self._option():
                self._wildcard_()
            with self._option():
                self._literal_()
            with self._option():
                self._select_()
            with self._option():
                self._patternApply_()
            with self._option():
                self._patternApplyVariadic_()
            with self._option():
                self._parenthesizedPatterns_()
            with self._option():
                self._plainidName_()
            with self._option():
                self._stableId_()
            self._error('no available options')

    @tatsumasu()
    def _patternInfix_(self):  # noqa
        self._patternSimple_()

        def block0():
            self._id_()
            with self._optional():
                self._nl_()
            self._patternSimple_()
        self._positive_closure(block0)

    @tatsumasu()
    def _patternInfixOrSimple_(self):  # noqa
        with self._choice():
            with self._option():
                self._patternInfix_()
            with self._option():
                self._patternSimple_()
            self._error('no available options')

    @tatsumasu()
    def _patternAliasedName_(self):  # noqa
        self._plainidName_()
        self._token('@')
        self._patternInfixOrSimple_()

    @tatsumasu()
    def _patternTyped_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._plainidName_()
                with self._option():
                    self._wildcard_()
                self._error('no available options')
        self._token(':')
        with self._group():
            with self._choice():
                with self._option():
                    self._infixExistentialType_()
                with self._option():
                    self._functionType_()
                self._error('no available options')

    @tatsumasu()
    def _pattern1_(self):  # noqa
        with self._choice():
            with self._option():
                self._patternTyped_()
            with self._option():
                self._patternAliasedName_()
            with self._option():
                self._patternInfixOrSimple_()
            self._error('no available options')

    @tatsumasu()
    def _patternTail_(self):  # noqa
        self._token('|')
        self.name_last_node('pipe')
        self._pattern1_()
        self.name_last_node('pat')
        self.ast._define(
            ['pat', 'pipe'],
            []
        )

    @tatsumasu()
    def _pattern_(self):  # noqa
        self._pattern1_()
        self.name_last_node('head')

        def block1():
            self._patternTail_()
            self.name_last_node('tail')
        self._closure(block1)
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _patternsTail_(self):  # noqa
        self._token(',')
        self.name_last_node('comma')
        self._patterns_()
        self.name_last_node('pats')
        self.ast._define(
            ['comma', 'pats'],
            []
        )

    @tatsumasu()
    def _patternsSeq_(self):  # noqa
        self._pattern_()
        self.name_last_node('head')
        with self._optional():
            self._patternsTail_()
            self.name_last_node('tail')
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _patternVariadic_(self):  # noqa
        self._token('_*')

    @tatsumasu()
    def _patterns_(self):  # noqa
        with self._choice():
            with self._option():
                self._patternsSeq_()
            with self._option():
                self._patternVariadic_()
            self._error('no available options')

    @tatsumasu()
    def _guardExpr_(self):  # noqa
        self._simpleOrCompoundExpr_()

    @tatsumasu()
    def _guard_(self):  # noqa
        self._token('if')
        self.name_last_node('ifkw')
        self._guardExpr_()
        self.name_last_node('expr')
        self.ast._define(
            ['expr', 'ifkw'],
            []
        )

    @tatsumasu()
    def _caseBlockBody_(self):  # noqa
        self._blockBody_()
        with self._if():
            with self._group():
                self._nl_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('case')
                        with self._option():
                            self._token('}')
                        self._error('no available options')

    @tatsumasu()
    def _caseClauseRhs_(self):  # noqa
        with self._choice():
            with self._option():
                self._block_()
            with self._option():
                self._caseBlockBody_()
            with self._option():
                self._expr_()
            self._error('no available options')

    @tatsumasu()
    def _caseClause_(self):  # noqa
        self._case_()
        self.name_last_node('casekw')
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        self._pattern_()
        self.name_last_node('pat')
        with self._optional():
            with self._optional():
                self._nl_()
                self.name_last_node('nl2')
            self._guard_()
            self.name_last_node('guard')
        with self._optional():
            self._nl_()
            self.name_last_node('nl3')
        self._arrow_()
        self.name_last_node('arr')
        with self._optional():
            self._caseClauseRhs_()
            self.name_last_node('rhs')
        self.ast._define(
            ['arr', 'casekw', 'guard', 'nl1', 'nl2', 'nl3', 'pat', 'rhs'],
            []
        )

    @tatsumasu()
    def _caseClausesRest_(self):  # noqa
        with self._optional():
            self._eol_()
            self.name_last_node('eol')
        self._caseClause_()
        self.name_last_node('case')
        self.ast._define(
            ['case', 'eol'],
            []
        )

    @tatsumasu()
    def _caseClauses_(self):  # noqa
        self._caseClause_()
        self.name_last_node('head')

        def block2():
            self._caseClausesRest_()
        self._closure(block2)
        self.name_last_node('tail')
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _typeParam_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._id_()
                with self._option():
                    self._wildcard_()
                self._error('no available options')
        self.name_last_node('id')
        with self._optional():
            self._typeParamClause_()
            self.name_last_node('sub')
        with self._optional():
            self._tpLowerBound_()
            self.name_last_node('b')
        with self._optional():
            self._tpUpperBound_()
            self.name_last_node('ub')

        def block6():
            self._tpViewBound_()
        self._closure(block6)
        self.name_last_node('vbs')

        def block8():
            self._tpContextBound_()
        self._closure(block8)
        self.name_last_node('cbs')
        self.ast._define(
            ['b', 'cbs', 'id', 'sub', 'ub', 'vbs'],
            []
        )

    @tatsumasu()
    def _typeParamClause_(self):  # noqa
        self._lbrack_()
        self.name_last_node('lbrack')
        self._variantTypeParam_()

        def block1():
            self._token(',')
            self._variantTypeParam_()
        self._closure(block1)
        self._rbrack_()
        self.name_last_node('rbrack')
        self.ast._define(
            ['lbrack', 'rbrack'],
            []
        )

    @tatsumasu()
    def _typeParams_(self):  # noqa
        self._typeParam_()

        def block0():
            self._token(',')
            self._typeParam_()
        self._closure(block0)

    @tatsumasu()
    def _funTypeParamClause_(self):  # noqa
        self._lbrack_()
        self.name_last_node('lbrack')
        self._typeParams_()
        self.name_last_node('params')
        self._rbrack_()
        self.name_last_node('rbrack')
        self.ast._define(
            ['lbrack', 'params', 'rbrack'],
            []
        )

    @tatsumasu()
    def _variantTypeParam_(self):  # noqa

        def block0():
            self._annotation_()
        self._closure(block0)
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('+')
                with self._option():
                    self._token('-')
                self._error('no available options')
        self._typeParam_()

    @tatsumasu()
    def _tpLowerBound_(self):  # noqa
        self._token('>:')
        self._type_()

    @tatsumasu()
    def _tpUpperBound_(self):  # noqa
        self._token('<:')
        self._type_()

    @tatsumasu()
    def _tpViewBound_(self):  # noqa
        self._token('<%')
        self._type_()

    @tatsumasu()
    def _tpContextBound_(self):  # noqa
        self._token(':')
        self._type_()

    @tatsumasu()
    def _paramTypeLazy_(self):  # noqa
        self._arrow_()
        self._type_()

    @tatsumasu()
    def _paramTypeVariant_(self):  # noqa
        self._type_()
        self._token('*')

    @tatsumasu()
    def _paramType_(self):  # noqa
        with self._choice():
            with self._option():
                self._type_()
            with self._option():
                self._paramTypeLazy_()
            with self._option():
                self._paramTypeVariant_()
            self._error('no available options')

    @tatsumasu()
    def _param_(self):  # noqa

        def block0():
            self._annotation_()
            self.name_last_node('anno')
        self._closure(block0)
        self._id_()
        self.name_last_node('id')
        self._token(':')
        self.name_last_node('colon')
        self._paramType_()
        self.name_last_node('tpe')
        with self._optional():
            self._assign_()
            self.name_last_node('assign')
            self._expr_()
            self.name_last_node('rhs')
        self.ast._define(
            ['anno', 'assign', 'colon', 'id', 'rhs', 'tpe'],
            []
        )

    @tatsumasu()
    def _variadicParam_(self):  # noqa

        def block0():
            self._annotation_()
            self.name_last_node('anno')
        self._closure(block0)
        self._id_()
        self.name_last_node('id')
        self._token(':')
        self.name_last_node('colon')
        self._paramType_()
        self.name_last_node('tpe')
        self._token('*')
        self.name_last_node('aster')
        self.ast._define(
            ['anno', 'aster', 'colon', 'id', 'tpe'],
            []
        )

    @tatsumasu()
    def _params_(self):  # noqa

        def block1():
            self._param_()
            self._token(',')
        self._closure(block1)
        self.name_last_node('init')
        with self._group():
            with self._choice():
                with self._option():
                    self._variadicParam_()
                with self._option():
                    self._param_()
                self._error('no available options')
        self.name_last_node('last')
        self.ast._define(
            ['init', 'last'],
            []
        )

    @tatsumasu()
    def _paramClause_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        self._lpar_()
        self.name_last_node('lpar')
        with self._ifnot():
            self._token('implicit')
        with self._optional():
            self._params_()
            self.name_last_node('params')
        self._rpar_()
        self.name_last_node('rpar')
        self.ast._define(
            ['lpar', 'nl1', 'params', 'rpar'],
            []
        )

    @tatsumasu()
    def _implicitParamClause_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        self._lpar_()
        self.name_last_node('lpar')
        self._token('implicit')
        self.name_last_node('implicitkw')
        with self._optional():
            self._nl_()
            self.name_last_node('nl2')
        self._params_()
        self.name_last_node('params')
        self._rpar_()
        self.name_last_node('rpar')
        self.ast._define(
            ['implicitkw', 'lpar', 'nl1', 'nl2', 'params', 'rpar'],
            []
        )

    @tatsumasu()
    def _paramClauses_(self):  # noqa

        def block1():
            self._paramClause_()
        self._closure(block1)
        self.name_last_node('explicit')
        with self._optional():
            self._implicitParamClause_()
            self.name_last_node('implicit')
        self.ast._define(
            ['explicit', 'implicit'],
            []
        )

    @tatsumasu()
    def _valVarKw_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('val')
            with self._option():
                self._token('var')
            self._error('no available options')

    @tatsumasu()
    def _classParam_(self):  # noqa

        def block1():
            self._annotation_()
        self._closure(block1)
        self.name_last_node('annos')

        def block3():
            self._modifier_()
        self._closure(block3)
        self.name_last_node('mods')
        with self._optional():
            self._valVarKw_()
            self.name_last_node('kw')
        self._id_()
        self.name_last_node('id')
        self._token(':')
        self.name_last_node('colon')
        self._paramType_()
        self.name_last_node('type')
        with self._optional():
            self._assign_()
            self.name_last_node('assign')
            self._expr_()
            self.name_last_node('default')
        self.ast._define(
            ['annos', 'assign', 'colon', 'default', 'id', 'kw', 'mods', 'type'],
            []
        )

    @tatsumasu()
    def _classParamsTail_(self):  # noqa
        self._token(',')
        self.name_last_node('comma')
        self._classParam_()
        self.name_last_node('param')
        self.ast._define(
            ['comma', 'param'],
            []
        )

    @tatsumasu()
    def _classParams_(self):  # noqa
        self._classParam_()
        self.name_last_node('head')

        def block2():
            self._classParamsTail_()
        self._closure(block2)
        self.name_last_node('tail')
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _classParamClause_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._lpar_()
        self.name_last_node('lpar')
        with self._optional():
            self._classParams_()
        self.name_last_node('params')
        self._rpar_()
        self.name_last_node('rpar')
        self.ast._define(
            ['lpar', 'nl', 'params', 'rpar'],
            []
        )

    @tatsumasu()
    def _implicitClassParamClause_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._lpar_()
        self.name_last_node('lpar')
        self._token('implicit')
        self.name_last_node('implicitkw')
        self._classParams_()
        self.name_last_node('params')
        self._rpar_()
        self.name_last_node('rpar')
        self.ast._define(
            ['implicitkw', 'lpar', 'nl', 'params', 'rpar'],
            []
        )

    @tatsumasu()
    def _classParamClauses_(self):  # noqa

        def block1():
            self._classParamClause_()
        self._closure(block1)
        self.name_last_node('paramss')
        with self._optional():
            self._implicitClassParamClause_()
            self.name_last_node('implicits')
        self.ast._define(
            ['implicits', 'paramss'],
            []
        )

    @tatsumasu()
    def _modifier_(self):  # noqa
        with self._choice():
            with self._option():
                self._localModifier_()
            with self._option():
                self._accessModifier_()
            with self._option():
                self._token('override')
            self._error('no available options')

    @tatsumasu()
    def _localModifier_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('abstract')
            with self._option():
                self._token('final')
            with self._option():
                self._token('sealed')
            with self._option():
                self._token('implicit')
            with self._option():
                self._token('lazy')
            self._error('no available options')

    @tatsumasu()
    def _accessModifier_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('private')
                with self._option():
                    self._token('protected')
                self._error('no available options')
        with self._optional():
            self._accessQualifier_()

    @tatsumasu()
    def _accessQualifier_(self):  # noqa
        self._lbrack_()
        self.name_last_node('lbrack')
        with self._group():
            with self._choice():
                with self._option():
                    self._id_()
                with self._option():
                    self._token('this')
                self._error('no available options')
        self._rbrack_()
        self.name_last_node('rbrack')
        self.ast._define(
            ['lbrack', 'rbrack'],
            []
        )

    @tatsumasu()
    def _annotation_(self):  # noqa
        self._token('@')
        self._regularType_()

        def block0():
            self._argListExpr_()
        self._closure(block0)

    @tatsumasu()
    def _ctorAnnotation_(self):  # noqa
        self._token('@')
        self._regularType_()
        self._argListExpr_()

    @tatsumasu()
    def _templateStatDef_(self):  # noqa

        def block0():
            self._annotation_()
            self.name_last_node('anno')
            with self._optional():
                self._nl_()
                self.name_last_node('nl')
        self._closure(block0)

        def block3():
            self._modifier_()
            self.name_last_node('mod')
        self._closure(block3)
        self._def_()
        self.name_last_node('def_')
        self.ast._define(
            ['anno', 'def_', 'mod', 'nl'],
            []
        )

    @tatsumasu()
    def _templateStatDcl_(self):  # noqa

        def block0():
            self._annotation_()
            self.name_last_node('anno')
            with self._optional():
                self._nl_()
                self.name_last_node('nl')
        self._closure(block0)

        def block3():
            self._modifier_()
            self.name_last_node('mod')
        self._closure(block3)
        self._dcl_()
        self.name_last_node('dcl')
        self.ast._define(
            ['anno', 'dcl', 'mod', 'nl'],
            []
        )

    @tatsumasu()
    def _templateStat1_(self):  # noqa
        with self._choice():
            with self._option():
                self._comment_()
            with self._option():
                self._import_()
            with self._option():
                self._templateStatDef_()
            with self._option():
                self._templateStatDcl_()
            with self._option():
                self._expr_()
            self._error('no available options')

    @tatsumasu()
    def _templateStat_(self):  # noqa
        with self._choice():
            with self._option():
                self._templateStat1_()
                self._eolComment_()
            with self._option():
                self._templateStat1_()
            self._error('no available options')

    @tatsumasu()
    def _templateStatsTail_(self):  # noqa
        self._eol_()
        self.name_last_node('eol')
        self._templateStat_()
        self.name_last_node('stat')
        self.ast._define(
            ['eol', 'stat'],
            []
        )

    @tatsumasu()
    def _templateStats_(self):  # noqa
        self._templateStat_()
        self.name_last_node('head')

        def block2():
            self._templateStatsTail_()
        self._closure(block2)
        self.name_last_node('tail')
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _templateBody_(self):  # noqa
        with self._optional():
            self._selfType_()
            self.name_last_node('selftype')
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        self._templateStats_()
        self.name_last_node('stats')
        self.ast._define(
            ['nl1', 'selftype', 'stats'],
            []
        )

    @tatsumasu()
    def _template_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        self._lbrace_()
        self.name_last_node('lbrace')
        with self._optional():
            self._templateBody_()
            self.name_last_node('stats')
        self._rbrace_()
        self.name_last_node('rbrace')
        self.ast._define(
            ['lbrace', 'nl1', 'rbrace', 'stats'],
            []
        )

    @tatsumasu()
    def _selfType_(self):  # noqa
        with self._choice():
            with self._option():
                self._id_()
                with self._optional():
                    self._token(':')
                    self._type_()
                self._arrow_()
            with self._option():
                self._token('this')
                self._token(':')
                self._type_()
                self._arrow_()
            self._error('no available options')

    @tatsumasu()
    def _import_(self):  # noqa
        self._token('import')
        self._importExpr_()

        def block0():
            self._token(',')
            self._importExpr_()
        self._closure(block0)

    @tatsumasu()
    def _importExprPre_(self):  # noqa
        self._id_()
        self._token('.')

    @tatsumasu()
    def _importExpr_(self):  # noqa

        def block0():
            self._importExprPre_()
        self._positive_closure(block0)
        with self._group():
            with self._choice():
                with self._option():
                    self._id_()
                with self._option():
                    self._wildcard_()
                with self._option():
                    self._importSelectors_()
                self._error('no available options')

    @tatsumasu()
    def _importSelectors_(self):  # noqa
        self._token('{')

        def block0():
            self._importSelector_()
            self._token(',')
        self._closure(block0)
        with self._group():
            with self._choice():
                with self._option():
                    self._importSelector_()
                with self._option():
                    self._wildcard_()
                self._error('no available options')
        self._token('}')

    @tatsumasu()
    def _importSelector_(self):  # noqa
        self._id_()
        with self._optional():
            with self._choice():
                with self._option():
                    self._arrow_()
                    self._id_()
                with self._option():
                    self._arrow_()
                    self._wildcard_()
                self._error('no available options')

    @tatsumasu()
    def _dcl_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('val')
                self.name_last_node('key')
                self._valDcl_()
                self.name_last_node('dcl')
            with self._option():
                self._token('var')
                self.name_last_node('key')
                self._valDcl_()
                self.name_last_node('dcl')
            with self._option():
                self._token('def')
                self.name_last_node('key')
                self._funDcl_()
                self.name_last_node('dcl')
            with self._option():
                self._typekw_()
                self.name_last_node('key')

                def block7():
                    self._nl_()
                self._closure(block7)
                self._typeDcl_()
                self.name_last_node('dcl')
            self._error('no available options')
        self.ast._define(
            ['dcl', 'key'],
            []
        )

    @tatsumasu()
    def _valDcl_(self):  # noqa
        self._ids_()
        self._token(':')
        self._type_()

    @tatsumasu()
    def _funDcl_(self):  # noqa
        self._funSig_()
        self.name_last_node('sig')
        with self._optional():
            self._token(':')
            self._type_()
            self.name_last_node('type')
        self.ast._define(
            ['sig', 'type'],
            []
        )

    @tatsumasu()
    def _typeDcl_(self):  # noqa
        self._id_()
        with self._optional():
            self._typeParamClause_()
        with self._optional():
            self._token('>:')
            self._type_()
        with self._optional():
            self._token('<:')
            self._type_()

    @tatsumasu()
    def _patDefPats_(self):  # noqa
        self._patternInfixOrSimple_()
        self.name_last_node('head')

        def block2():
            self._token(',')
            self.name_last_node('comma')
            self._patternInfixOrSimple_()
            self.name_last_node('pat')
        self._closure(block2)
        self.name_last_node('tail')
        self.ast._define(
            ['comma', 'head', 'pat', 'tail'],
            []
        )

    @tatsumasu()
    def _varDefSimple_(self):  # noqa
        self._id_()
        self.name_last_node('id')
        with self._optional():
            self._token(':')
            self.name_last_node('colon')
            self._type_()
            self.name_last_node('tpe')
        self._assign_()
        self.name_last_node('assign')
        self._expr_()
        self.name_last_node('rhs')
        self.ast._define(
            ['assign', 'colon', 'id', 'rhs', 'tpe'],
            []
        )

    @tatsumasu()
    def _patDef_(self):  # noqa
        self._patDefPats_()
        self.name_last_node('pats')
        with self._optional():
            self._token(':')
            self.name_last_node('colon')
            self._type_()
            self.name_last_node('tpe')
        self._assign_()
        self.name_last_node('assign')
        self._expr_()
        self.name_last_node('rhs')
        self.ast._define(
            ['assign', 'colon', 'pats', 'rhs', 'tpe'],
            []
        )

    @tatsumasu()
    def _uninitializedVarDef_(self):  # noqa
        self._ids_()
        self._token(':')
        self._type_()
        self._assign_()
        self.name_last_node('assign')
        self._wildcard_()
        self.ast._define(
            ['assign'],
            []
        )

    @tatsumasu()
    def _varDef_(self):  # noqa
        with self._choice():
            with self._option():
                self._varDefSimple_()
            with self._option():
                self._patDef_()
            with self._option():
                self._uninitializedVarDef_()
            self._error('no available options')

    @tatsumasu()
    def _funSig_(self):  # noqa
        self._id_()
        self.name_last_node('id')
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        with self._optional():
            self._funTypeParamClause_()
            self.name_last_node('tparams')
        with self._optional():
            self._nl_()
            self.name_last_node('nl2')
        with self._optional():
            self._paramClauses_()
            self.name_last_node('paramss')
        self.ast._define(
            ['id', 'nl1', 'nl2', 'paramss', 'tparams'],
            []
        )

    @tatsumasu()
    def _funDefFull_(self):  # noqa
        self._funSig_()
        self.name_last_node('sig')
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        with self._optional():
            self._token(':')
            self.name_last_node('colon')
            with self._optional():
                self._nl_()
                self.name_last_node('nl2')
            self._type_()
            self.name_last_node('type')
        with self._optional():
            self._nl_()
            self.name_last_node('nl3')
        self._assign_()
        self.name_last_node('assign')
        with self._optional():
            self._nl_()
            self.name_last_node('nl4')
        self._expr_()
        self.name_last_node('rhs')
        self.ast._define(
            ['assign', 'colon', 'nl1', 'nl2', 'nl3', 'nl4', 'rhs', 'sig', 'type'],
            []
        )

    @tatsumasu()
    def _funDefUnit_(self):  # noqa
        self._funSig_()
        self.name_last_node('sig')
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        self._lbrace_()
        self.name_last_node('lbrace')
        with self._optional():
            self._blockBody_()
            self.name_last_node('rhs')
        self._rbrace_()
        self.name_last_node('rbrace')
        self.ast._define(
            ['lbrace', 'nl1', 'rbrace', 'rhs', 'sig'],
            []
        )

    @tatsumasu()
    def _funDefCtor_(self):  # noqa
        self._token('this')
        self._paramClauses_()
        with self._group():
            with self._choice():
                with self._option():
                    self._assign_()
                    self.name_last_node('assign')
                    self._ctorExpr_()
                with self._option():
                    with self._optional():
                        self._nl_()
                    self._ctorBlock_()
                self._error('no available options')
        self.ast._define(
            ['assign'],
            []
        )

    @tatsumasu()
    def _funDef1_(self):  # noqa
        with self._choice():
            with self._option():
                self._funDefFull_()
            with self._option():
                self._funDefUnit_()
            with self._option():
                self._funDefCtor_()
            self._error('no available options')

    @tatsumasu()
    def _funDef_(self):  # noqa
        self._token('def')
        self.name_last_node('defkw')
        self._funDef1_()
        self.name_last_node('def_')
        self.ast._define(
            ['def_', 'defkw'],
            []
        )

    @tatsumasu()
    def _typeDef_(self):  # noqa
        self._typekw_()
        self.name_last_node('typekw')

        def block2():
            self._nl_()
        self._closure(block2)
        self.name_last_node('nls')
        self._id_()
        self.name_last_node('id')
        with self._optional():
            self._typeParamClause_()
            self.name_last_node('params')
        self._assign_()
        self.name_last_node('assign')
        self._type_()
        self.name_last_node('rhs')
        self.ast._define(
            ['assign', 'id', 'nls', 'params', 'rhs', 'typekw'],
            []
        )

    @tatsumasu()
    def _valVarDef_(self):  # noqa
        self._token('val')
        self.name_last_node('valkw')
        self._patDef_()
        self.name_last_node('def_')
        self.ast._define(
            ['def_', 'valkw'],
            []
        )

    @tatsumasu()
    def _varVarDef_(self):  # noqa
        self._token('var')
        self.name_last_node('varkw')
        self._varDef_()
        self.name_last_node('def_')
        self.ast._define(
            ['def_', 'varkw'],
            []
        )

    @tatsumasu()
    def _patVarDef_(self):  # noqa
        with self._choice():
            with self._option():
                self._valVarDef_()
            with self._option():
                self._varVarDef_()
            self._error('no available options')

    @tatsumasu()
    def _def_(self):  # noqa
        with self._choice():
            with self._option():
                self._patVarDef_()
            with self._option():
                self._funDef_()
            with self._option():
                self._typeDef_()
            with self._option():
                self._implDef_()
            self._error('no available options')

    @tatsumasu()
    def _resultAnonFunc_(self):  # noqa
        self._anonFuncExprParams_()
        self.name_last_node('params')
        self._token(':')
        self.name_last_node('colon')
        self._compoundType_()
        self.name_last_node('type')
        self._arrow_()
        self.name_last_node('arrow')
        self._blockBody_()
        self.name_last_node('rhs')
        self.ast._define(
            ['arrow', 'colon', 'params', 'rhs', 'type'],
            []
        )

    @tatsumasu()
    def _resultExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._expr_()
            with self._option():
                self._arrow_()
                self._blockBody_()
            self._error('no available options')

    @tatsumasu()
    def _blockStatMod_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('implicit')
            with self._option():
                self._token('lazy')
            self._error('no available options')

    @tatsumasu()
    def _blockStatDef_(self):  # noqa

        def block1():
            self._annotation_()
        self._closure(block1)
        self.name_last_node('anno')
        with self._optional():
            self._blockStatMod_()
            self.name_last_node('mod')
        self._def_()
        self.name_last_node('def_')
        self.ast._define(
            ['anno', 'def_', 'mod'],
            []
        )

    @tatsumasu()
    def _blockStatTemplDef_(self):  # noqa

        def block1():
            self._annotation_()
        self._closure(block1)
        self.name_last_node('anno')

        def block3():
            self._localModifier_()
        self._closure(block3)
        self.name_last_node('mod')
        self._implDef_()
        self.name_last_node('def_')
        self.ast._define(
            ['anno', 'def_', 'mod'],
            []
        )

    @tatsumasu()
    def _blockStat_(self):  # noqa
        with self._choice():
            with self._option():
                self._comment_()
            with self._option():
                self._import_()
            with self._option():
                self._blockStatDef_()
            with self._option():
                self._blockStatTemplDef_()
            with self._option():
                self._expr_()
            self._error('no available options')

    @tatsumasu()
    def _blockRest_(self):  # noqa
        self._eol_()
        self.name_last_node('eol')
        self._blockStat_()
        self.name_last_node('stat')
        self.ast._define(
            ['eol', 'stat'],
            []
        )

    @tatsumasu()
    def _blockBody_(self):  # noqa
        self._blockStat_()
        self.name_last_node('head')

        def block2():
            self._blockRest_()
        self._closure(block2)
        self.name_last_node('tail')
        with self._optional():
            self._eol_()
            self.name_last_node('eol')
            self._resultExpr_()
            self.name_last_node('result')
        self.ast._define(
            ['eol', 'head', 'result', 'tail'],
            []
        )

    @tatsumasu()
    def _statBlock_(self):  # noqa
        self._lbrace_()
        self.name_last_node('lbrace')
        self._blockBody_()
        self.name_last_node('body')
        self._rbrace_()
        self.name_last_node('rbrace')
        self.ast._define(
            ['body', 'lbrace', 'rbrace'],
            []
        )

    @tatsumasu()
    def _caseBlock_(self):  # noqa
        self._lbrace_()
        self.name_last_node('lbrace')
        self._caseClauses_()
        self.name_last_node('body')
        self._rbrace_()
        self.name_last_node('rbrace')
        self.ast._define(
            ['body', 'lbrace', 'rbrace'],
            []
        )

    @tatsumasu()
    def _block_(self):  # noqa
        with self._choice():
            with self._option():
                self._caseBlock_()
            with self._option():
                self._statBlock_()
            self._error('no available options')

    @tatsumasu()
    def _earlyDef_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')

        def block1():
            self._annotation_()
            self.name_last_node('anno')
            with self._optional():
                self._nl_()
                self.name_last_node('nl2')
        self._closure(block1)

        def block5():
            self._modifier_()
        self._closure(block5)
        self.name_last_node('mods')
        self._patVarDef_()
        self.name_last_node('def_')
        self.ast._define(
            ['anno', 'def_', 'mods', 'nl1', 'nl2'],
            []
        )

    @tatsumasu()
    def _earlyDefs_(self):  # noqa

        def block0():
            self._earlyDef_()
        self._positive_closure(block0)

    @tatsumasu()
    def _earlyDefsClause_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        self._lbrace_()
        self.name_last_node('lbrace')
        with self._optional():
            self._earlyDefs_()
            self.name_last_node('defs')
        self._rbrace_()
        self.name_last_node('rbrace')
        with self._optional():
            self._nl_()
            self.name_last_node('nl2')
        self._withkw_()
        self.name_last_node('withkw')
        self.ast._define(
            ['defs', 'lbrace', 'nl1', 'nl2', 'rbrace', 'withkw'],
            []
        )

    @tatsumasu()
    def _extends_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._token('extends')
        self.name_last_node('kw')
        self.ast._define(
            ['kw', 'nl'],
            []
        )

    @tatsumasu()
    def _withkw_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._token('with')
        self.name_last_node('kw')
        self.ast._define(
            ['kw', 'nl'],
            []
        )

    @tatsumasu()
    def _parentsTail_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl')
        self._withkw_()
        self.name_last_node('withkw')
        self._annotOrRegularType_()
        self.name_last_node('tpe')
        self.ast._define(
            ['nl', 'tpe', 'withkw'],
            []
        )

    @tatsumasu()
    def _parentCtor_(self):  # noqa
        self._annotOrRegularType_()
        self.name_last_node('tpe')

        def block2():
            self._argListExpr_()
        self._closure(block2)
        self.name_last_node('argss')
        self.ast._define(
            ['argss', 'tpe'],
            []
        )

    @tatsumasu()
    def _traitParents_(self):  # noqa
        self._annotOrRegularType_()
        self.name_last_node('tpe')

        def block1():
            self._parentsTail_()
            self.name_last_node('tail')
        self._closure(block1)
        self.ast._define(
            ['tail', 'tpe'],
            []
        )

    @tatsumasu()
    def _traitParentsClause_(self):  # noqa
        with self._if():
            with self._group():
                with self._choice():
                    with self._option():
                        self._earlyDefsClause_()
                    with self._option():
                        self._annotOrRegularType_()
                    self._error('no available options')
        with self._optional():
            self._earlyDefsClause_()
            self.name_last_node('early')
        with self._optional():
            self._traitParents_()
            self.name_last_node('parents')
        self.ast._define(
            ['early', 'parents'],
            []
        )

    @tatsumasu()
    def _traitTemplateFull_(self):  # noqa
        self._extends_()
        self.name_last_node('extendskw')
        with self._optional():
            self._traitParentsClause_()
            self.name_last_node('parents')
        with self._optional():
            self._template_()
            self.name_last_node('template')
        self.ast._define(
            ['extendskw', 'parents', 'template'],
            []
        )

    @tatsumasu()
    def _traitTemplateSimple_(self):  # noqa
        with self._optional():
            self._extends_()
            self.name_last_node('extendskw')
        self._template_()
        self.name_last_node('template')
        self.ast._define(
            ['extendskw', 'template'],
            []
        )

    @tatsumasu()
    def _traitTemplate_(self):  # noqa
        with self._choice():
            with self._option():
                self._traitTemplateFull_()
            with self._option():
                self._traitTemplateSimple_()
            self._error('no available options')

    @tatsumasu()
    def _traitDef_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        self._id_()
        self.name_last_node('id')
        with self._optional():
            self._nl_()
            self.name_last_node('nl2')
        with self._optional():
            self._typeParamClause_()
            self.name_last_node('tparams')
        with self._optional():
            self._nl_()
            self.name_last_node('nl3')
        self._traitTemplate_()
        self.name_last_node('template')
        self.ast._define(
            ['id', 'nl1', 'nl2', 'nl3', 'template', 'tparams'],
            []
        )

    @tatsumasu()
    def _trait_(self):  # noqa
        self._token('trait')
        self.name_last_node('traitkw')
        self._traitDef_()
        self.name_last_node('def_')
        self.ast._define(
            ['def_', 'traitkw'],
            []
        )

    @tatsumasu()
    def _classParents_(self):  # noqa
        self._parentCtor_()
        self.name_last_node('parentCtor')

        def block1():
            self._parentsTail_()
            self.name_last_node('tail')
        self._closure(block1)
        self.ast._define(
            ['parentCtor', 'tail'],
            []
        )

    @tatsumasu()
    def _classParentsClause_(self):  # noqa
        with self._if():
            with self._group():
                with self._choice():
                    with self._option():
                        self._earlyDefsClause_()
                    with self._option():
                        self._annotOrRegularType_()
                    self._error('no available options')
        with self._optional():
            self._earlyDefsClause_()
            self.name_last_node('early')
        with self._optional():
            self._classParents_()
            self.name_last_node('parents')
        self.ast._define(
            ['early', 'parents'],
            []
        )

    @tatsumasu()
    def _classTemplateFull_(self):  # noqa
        self._extends_()
        self.name_last_node('extendskw')
        with self._optional():
            self._classParentsClause_()
            self.name_last_node('parents')
        with self._optional():
            self._template_()
            self.name_last_node('template')
        self.ast._define(
            ['extendskw', 'parents', 'template'],
            []
        )

    @tatsumasu()
    def _classTemplateSimple_(self):  # noqa
        with self._optional():
            self._extends_()
            self.name_last_node('extendskw')
        self._template_()
        self.name_last_node('template')
        self.ast._define(
            ['extendskw', 'template'],
            []
        )

    @tatsumasu()
    def _classTemplate_(self):  # noqa
        with self._choice():
            with self._option():
                self._classTemplateFull_()
            with self._option():
                self._classTemplateSimple_()
            self._error('no available options')

    @tatsumasu()
    def _classDef_(self):  # noqa
        with self._optional():
            self._nl_()
            self.name_last_node('nl1')
        self._id_()
        self.name_last_node('id')
        with self._optional():
            with self._optional():
                self._nl_()
                self.name_last_node('nl2')
            self._typeParamClause_()
            self.name_last_node('tparams')

        def block4():
            self._ctorAnnotation_()
            self.name_last_node('anno')
        self._closure(block4)
        with self._optional():
            self._accessModifier_()
            self.name_last_node('ctormod')
        self._classParamClauses_()
        self.name_last_node('params')
        with self._optional():
            self._classTemplate_()
            self.name_last_node('template')
        self.ast._define(
            ['anno', 'ctormod', 'id', 'nl1', 'nl2', 'params', 'template', 'tparams'],
            []
        )

    @tatsumasu()
    def _class_(self):  # noqa
        with self._optional():
            self._case_()
            self.name_last_node('casekw')
        self._token('class')
        self.name_last_node('classkw')
        self._classDef_()
        self.name_last_node('def_')
        self.ast._define(
            ['casekw', 'classkw', 'def_'],
            []
        )

    @tatsumasu()
    def _objectDef_(self):  # noqa
        self._id_()
        self.name_last_node('id')
        self._classTemplate_()
        self.name_last_node('tmpl')
        self.ast._define(
            ['id', 'tmpl'],
            []
        )

    @tatsumasu()
    def _module_(self):  # noqa
        with self._optional():
            self._case_()
            self.name_last_node('casekw')
        self._token('object')
        self.name_last_node('objectkw')
        self._objectDef_()
        self.name_last_node('def_')
        self.ast._define(
            ['casekw', 'def_', 'objectkw'],
            []
        )

    @tatsumasu()
    def _implDef_(self):  # noqa
        with self._choice():
            with self._option():
                self._class_()
            with self._option():
                self._module_()
            with self._option():
                self._trait_()
            self._error('no available options')

    @tatsumasu()
    def _ctorExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._selfInvocation_()
            with self._option():
                self._ctorBlock_()
            self._error('no available options')

    @tatsumasu()
    def _ctorBlock_(self):  # noqa
        self._token('{')
        self._selfInvocation_()

        def block0():
            self._eol_()
            self._blockStat_()
        self._closure(block0)
        self._token('}')

    @tatsumasu()
    def _selfInvocation_(self):  # noqa
        self._token('this')
        self._argListExpr_()

        def block0():
            self._argListExpr_()
        self._closure(block0)

    @tatsumasu()
    def _topImplDef_(self):  # noqa

        def block1():
            self._annotation_()
            with self._optional():
                self._nl_()
        self._closure(block1)
        self.name_last_node('anno')

        def block3():
            self._modifier_()
        self._closure(block3)
        self.name_last_node('mod')
        self._implDef_()
        self.name_last_node('tmpl')
        self.ast._define(
            ['anno', 'mod', 'tmpl'],
            []
        )

    @tatsumasu()
    def _topStat_(self):  # noqa
        with self._choice():
            with self._option():
                self._comment_()
            with self._option():
                self._topImplDef_()
            with self._option():
                self._import_()
            with self._option():
                self._packaging_()
            with self._option():
                self._packageObject_()
            with self._option():
                self._nl_()
            self._error('no available options')

    @tatsumasu()
    def _topStatSeq_(self):  # noqa
        self._topStat_()
        self.name_last_node('head')

        def block2():
            self._eol_()
            self._topStat_()
        self._closure(block2)
        self.name_last_node('tail')
        self.ast._define(
            ['head', 'tail'],
            []
        )

    @tatsumasu()
    def _packaging_(self):  # noqa
        self._token('package')
        self._qualId_()
        with self._optional():
            self._nl_()
        self._token('{')
        self._topStatSeq_()
        self._token('}')

    @tatsumasu()
    def _packageObject_(self):  # noqa
        self._token('package')
        self._token('object')
        self._objectDef_()

    @tatsumasu()
    def _package_(self):  # noqa
        self._token('package')
        self._qualId_()

    @tatsumasu()
    def _compilationUnit_(self):  # noqa

        def block1():
            self._comment_()
            self._nl_()
        self._closure(block1)
        self.name_last_node('initialcomment')

        def block3():
            self._package_()
            self._eol_()
        self._closure(block3)
        self.name_last_node('package')
        self._topStatSeq_()
        self.name_last_node('stats')
        self.ast._define(
            ['initialcomment', 'package', 'stats'],
            []
        )


class ScalaSemantics(object):
    def nl1(self, ast):  # noqa
        return ast

    def nl(self, ast):  # noqa
        return ast

    def seminl(self, ast):  # noqa
        return ast

    def eol(self, ast):  # noqa
        return ast

    def UnicodeEscape(self, ast):  # noqa
        return ast

    def HexDigit(self, ast):  # noqa
        return ast

    def WhiteSpace(self, ast):  # noqa
        return ast

    def UnicodeUpper(self, ast):  # noqa
        return ast

    def UnicodeLower(self, ast):  # noqa
        return ast

    def UnicodeLetterMisc(self, ast):  # noqa
        return ast

    def UnicodeOpchar(self, ast):  # noqa
        return ast

    def Upper(self, ast):  # noqa
        return ast

    def Lower(self, ast):  # noqa
        return ast

    def Letter(self, ast):  # noqa
        return ast

    def Digit(self, ast):  # noqa
        return ast

    def paren(self, ast):  # noqa
        return ast

    def delim(self, ast):  # noqa
        return ast

    def assign(self, ast):  # noqa
        return ast

    def wildcard(self, ast):  # noqa
        return ast

    def Wildcard(self, ast):  # noqa
        return ast

    def arrow(self, ast):  # noqa
        return ast

    def enumeratorArrow(self, ast):  # noqa
        return ast

    def projectOp(self, ast):  # noqa
        return ast

    def OpcharBlocker(self, ast):  # noqa
        return ast

    def PrintableChar(self, ast):  # noqa
        return ast

    def PrintableCharNoWs(self, ast):  # noqa
        return ast

    def Opchar(self, ast):  # noqa
        return ast

    def CharEscapeSeq(self, ast):  # noqa
        return ast

    def lpar(self, ast):  # noqa
        return ast

    def rpar(self, ast):  # noqa
        return ast

    def lbrace(self, ast):  # noqa
        return ast

    def rbrace(self, ast):  # noqa
        return ast

    def lbrack(self, ast):  # noqa
        return ast

    def rbrack(self, ast):  # noqa
        return ast

    def prefixOperator(self, ast):  # noqa
        return ast

    def syntaxOperator(self, ast):  # noqa
        return ast

    def this(self, ast):  # noqa
        return ast

    def booleanLiteral(self, ast):  # noqa
        return ast

    def integerLiteral(self, ast):  # noqa
        return ast

    def negativeIntegerLiteral(self, ast):  # noqa
        return ast

    def decimalNumeral(self, ast):  # noqa
        return ast

    def hexNumeral(self, ast):  # noqa
        return ast

    def nonZeroDigit(self, ast):  # noqa
        return ast

    def floatingPointLiteral(self, ast):  # noqa
        return ast

    def negativeFloatingPointLiteral(self, ast):  # noqa
        return ast

    def exponentPart(self, ast):  # noqa
        return ast

    def floatType(self, ast):  # noqa
        return ast

    def CharNoQuoteOrNewline(self, ast):  # noqa
        return ast

    def CharNoDoubleQuote(self, ast):  # noqa
        return ast

    def CharNoDoubleQuoteOrNewline(self, ast):  # noqa
        return ast

    def characterLiteral(self, ast):  # noqa
        return ast

    def StringElement(self, ast):  # noqa
        return ast

    def stringLiteralData(self, ast):  # noqa
        return ast

    def SingleQuote(self, ast):  # noqa
        return ast

    def openingSingleQuote(self, ast):  # noqa
        return ast

    def TripleQuote(self, ast):  # noqa
        return ast

    def openingTripleQuote(self, ast):  # noqa
        return ast

    def singleLineStringLiteral(self, ast):  # noqa
        return ast

    def multiLineChars(self, ast):  # noqa
        return ast

    def multiLineStringLiteral(self, ast):  # noqa
        return ast

    def stringLiteral(self, ast):  # noqa
        return ast

    def symbolLiteral(self, ast):  # noqa
        return ast

    def blockCommentStart(self, ast):  # noqa
        return ast

    def blockCommentEnd(self, ast):  # noqa
        return ast

    def blockCommentChar1(self, ast):  # noqa
        return ast

    def blockCommentChar(self, ast):  # noqa
        return ast

    def eolCommentStart(self, ast):  # noqa
        return ast

    def eolCommentChar(self, ast):  # noqa
        return ast

    def blockCommentContent(self, ast):  # noqa
        return ast

    def eolCommentContent(self, ast):  # noqa
        return ast

    def blockComment(self, ast):  # noqa
        return ast

    def eolComment(self, ast):  # noqa
        return ast

    def comment(self, ast):  # noqa
        return ast

    def OpBlocker(self, ast):  # noqa
        return ast

    def op(self, ast):  # noqa
        return ast

    def IdWildcard(self, ast):  # noqa
        return ast

    def IdLetter(self, ast):  # noqa
        return ast

    def plainidNoToken(self, ast):  # noqa
        return ast

    def plainid(self, ast):  # noqa
        return ast

    def plainidName(self, ast):  # noqa
        return ast

    def idOpSuffix(self, ast):  # noqa
        return ast

    def quotedId(self, ast):  # noqa
        return ast

    def id(self, ast):  # noqa
        return ast

    def case(self, ast):  # noqa
        return ast

    def match(self, ast):  # noqa
        return ast

    def typekw(self, ast):  # noqa
        return ast

    def literal(self, ast):  # noqa
        return ast

    def qualId(self, ast):  # noqa
        return ast

    def ids(self, ast):  # noqa
        return ast

    def classQualifier(self, ast):  # noqa
        return ast

    def superAttrPre(self, ast):  # noqa
        return ast

    def superAttr(self, ast):  # noqa
        return ast

    def stableId(self, ast):  # noqa
        return ast

    def thisRef(self, ast):  # noqa
        return ast

    def selectrest(self, ast):  # noqa
        return ast

    def select(self, ast):  # noqa
        return ast

    def path(self, ast):  # noqa
        return ast

    def functionArgTypes(self, ast):  # noqa
        return ast

    def existentialClause(self, ast):  # noqa
        return ast

    def existentialDcl(self, ast):  # noqa
        return ast

    def typeProjectionPre(self, ast):  # noqa
        return ast

    def typeProjection(self, ast):  # noqa
        return ast

    def dependentType(self, ast):  # noqa
        return ast

    def parenthesizedTypes(self, ast):  # noqa
        return ast

    def simpleType(self, ast):  # noqa
        return ast

    def typeArgs(self, ast):  # noqa
        return ast

    def refinementTemplate(self, ast):  # noqa
        return ast

    def refineStat(self, ast):  # noqa
        return ast

    def appliedType(self, ast):  # noqa
        return ast

    def regularType(self, ast):  # noqa
        return ast

    def annotType(self, ast):  # noqa
        return ast

    def annotOrRegularType(self, ast):  # noqa
        return ast

    def refinementSubtype(self, ast):  # noqa
        return ast

    def refinementsOnlySubtype(self, ast):  # noqa
        return ast

    def refinementsWithTemplate(self, ast):  # noqa
        return ast

    def refinements(self, ast):  # noqa
        return ast

    def refinedType(self, ast):  # noqa
        return ast

    def compoundType(self, ast):  # noqa
        return ast

    def infixTypePart(self, ast):  # noqa
        return ast

    def infixTypeRest(self, ast):  # noqa
        return ast

    def infixType(self, ast):  # noqa
        return ast

    def functionType(self, ast):  # noqa
        return ast

    def infixExistentialType(self, ast):  # noqa
        return ast

    def type(self, ast):  # noqa
        return ast

    def typesTail(self, ast):  # noqa
        return ast

    def types(self, ast):  # noqa
        return ast

    def ascription(self, ast):  # noqa
        return ast

    def patMat(self, ast):  # noqa
        return ast

    def bindings(self, ast):  # noqa
        return ast

    def binding(self, ast):  # noqa
        return ast

    def postfixExpr(self, ast):  # noqa
        return ast

    def infixOper(self, ast):  # noqa
        return ast

    def infixExpr(self, ast):  # noqa
        return ast

    def prefixExpr(self, ast):  # noqa
        return ast

    def simpleAssignExpr(self, ast):  # noqa
        return ast

    def attrAssignExpr(self, ast):  # noqa
        return ast

    def applyAssignExprPre(self, ast):  # noqa
        return ast

    def applyAssignExpr(self, ast):  # noqa
        return ast

    def assignExpr(self, ast):  # noqa
        return ast

    def argumentExpr(self, ast):  # noqa
        return ast

    def argumentExprsTail(self, ast):  # noqa
        return ast

    def argumentExprs(self, ast):  # noqa
        return ast

    def arguments(self, ast):  # noqa
        return ast

    def argumentSplat(self, ast):  # noqa
        return ast

    def argumentsWithSplat(self, ast):  # noqa
        return ast

    def argumentsBlock(self, ast):  # noqa
        return ast

    def argListExpr(self, ast):  # noqa
        return ast

    def parenthesizedInfixExpr(self, ast):  # noqa
        return ast

    def parenthesizedExpr(self, ast):  # noqa
        return ast

    def parenthesizedExprs(self, ast):  # noqa
        return ast

    def parenthesizedExprsExpr(self, ast):  # noqa
        return ast

    def simpleExprPre(self, ast):  # noqa
        return ast

    def attrExprPre(self, ast):  # noqa
        return ast

    def attrExpr(self, ast):  # noqa
        return ast

    def attrExprTypeArgs(self, ast):  # noqa
        return ast

    def idTypeArgs(self, ast):  # noqa
        return ast

    def applyExprMethod(self, ast):  # noqa
        return ast

    def oneComponentExpr(self, ast):  # noqa
        return ast

    def applyMethod(self, ast):  # noqa
        return ast

    def applyExprArgss(self, ast):  # noqa
        return ast

    def applyExprApp(self, ast):  # noqa
        return ast

    def applyExprElem(self, ast):  # noqa
        return ast

    def applyExprChain(self, ast):  # noqa
        return ast

    def applyExpr(self, ast):  # noqa
        return ast

    def simpleExpr1(self, ast):  # noqa
        return ast

    def classInstantiation(self, ast):  # noqa
        return ast

    def etaPre(self, ast):  # noqa
        return ast

    def etaExpansion(self, ast):  # noqa
        return ast

    def simpleExprTypeArgs(self, ast):  # noqa
        return ast

    def simpleExpr(self, ast):  # noqa
        return ast

    def compoundExpr(self, ast):  # noqa
        return ast

    def simpleOrCompoundExpr(self, ast):  # noqa
        return ast

    def ifExpr(self, ast):  # noqa
        return ast

    def whileExpr(self, ast):  # noqa
        return ast

    def catchExpr(self, ast):  # noqa
        return ast

    def finallyExpr(self, ast):  # noqa
        return ast

    def tryExpr(self, ast):  # noqa
        return ast

    def doExpr(self, ast):  # noqa
        return ast

    def forExpr(self, ast):  # noqa
        return ast

    def throwExpr(self, ast):  # noqa
        return ast

    def returnExpr(self, ast):  # noqa
        return ast

    def controlExpr(self, ast):  # noqa
        return ast

    def anonFuncExprParamImplicit(self, ast):  # noqa
        return ast

    def anonFuncExprParams(self, ast):  # noqa
        return ast

    def anonFuncRhs(self, ast):  # noqa
        return ast

    def anonFuncExpr(self, ast):  # noqa
        return ast

    def ascribedSimpleOrCompoundExpr(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def exprsTail(self, ast):  # noqa
        return ast

    def exprs(self, ast):  # noqa
        return ast

    def enumerators(self, ast):  # noqa
        return ast

    def generator(self, ast):  # noqa
        return ast

    def patternApply(self, ast):  # noqa
        return ast

    def patternApplyVariadic(self, ast):  # noqa
        return ast

    def parenthesizedPatterns(self, ast):  # noqa
        return ast

    def patternSimple(self, ast):  # noqa
        return ast

    def patternInfix(self, ast):  # noqa
        return ast

    def patternInfixOrSimple(self, ast):  # noqa
        return ast

    def patternAliasedName(self, ast):  # noqa
        return ast

    def patternTyped(self, ast):  # noqa
        return ast

    def pattern1(self, ast):  # noqa
        return ast

    def patternTail(self, ast):  # noqa
        return ast

    def pattern(self, ast):  # noqa
        return ast

    def patternsTail(self, ast):  # noqa
        return ast

    def patternsSeq(self, ast):  # noqa
        return ast

    def patternVariadic(self, ast):  # noqa
        return ast

    def patterns(self, ast):  # noqa
        return ast

    def guardExpr(self, ast):  # noqa
        return ast

    def guard(self, ast):  # noqa
        return ast

    def caseBlockBody(self, ast):  # noqa
        return ast

    def caseClauseRhs(self, ast):  # noqa
        return ast

    def caseClause(self, ast):  # noqa
        return ast

    def caseClausesRest(self, ast):  # noqa
        return ast

    def caseClauses(self, ast):  # noqa
        return ast

    def typeParam(self, ast):  # noqa
        return ast

    def typeParamClause(self, ast):  # noqa
        return ast

    def typeParams(self, ast):  # noqa
        return ast

    def funTypeParamClause(self, ast):  # noqa
        return ast

    def variantTypeParam(self, ast):  # noqa
        return ast

    def tpLowerBound(self, ast):  # noqa
        return ast

    def tpUpperBound(self, ast):  # noqa
        return ast

    def tpViewBound(self, ast):  # noqa
        return ast

    def tpContextBound(self, ast):  # noqa
        return ast

    def paramTypeLazy(self, ast):  # noqa
        return ast

    def paramTypeVariant(self, ast):  # noqa
        return ast

    def paramType(self, ast):  # noqa
        return ast

    def param(self, ast):  # noqa
        return ast

    def variadicParam(self, ast):  # noqa
        return ast

    def params(self, ast):  # noqa
        return ast

    def paramClause(self, ast):  # noqa
        return ast

    def implicitParamClause(self, ast):  # noqa
        return ast

    def paramClauses(self, ast):  # noqa
        return ast

    def valVarKw(self, ast):  # noqa
        return ast

    def classParam(self, ast):  # noqa
        return ast

    def classParamsTail(self, ast):  # noqa
        return ast

    def classParams(self, ast):  # noqa
        return ast

    def classParamClause(self, ast):  # noqa
        return ast

    def implicitClassParamClause(self, ast):  # noqa
        return ast

    def classParamClauses(self, ast):  # noqa
        return ast

    def modifier(self, ast):  # noqa
        return ast

    def localModifier(self, ast):  # noqa
        return ast

    def accessModifier(self, ast):  # noqa
        return ast

    def accessQualifier(self, ast):  # noqa
        return ast

    def annotation(self, ast):  # noqa
        return ast

    def ctorAnnotation(self, ast):  # noqa
        return ast

    def templateStatDef(self, ast):  # noqa
        return ast

    def templateStatDcl(self, ast):  # noqa
        return ast

    def templateStat1(self, ast):  # noqa
        return ast

    def templateStat(self, ast):  # noqa
        return ast

    def templateStatsTail(self, ast):  # noqa
        return ast

    def templateStats(self, ast):  # noqa
        return ast

    def templateBody(self, ast):  # noqa
        return ast

    def template(self, ast):  # noqa
        return ast

    def selfType(self, ast):  # noqa
        return ast

    def import_(self, ast):  # noqa
        return ast

    def importExprPre(self, ast):  # noqa
        return ast

    def importExpr(self, ast):  # noqa
        return ast

    def importSelectors(self, ast):  # noqa
        return ast

    def importSelector(self, ast):  # noqa
        return ast

    def dcl(self, ast):  # noqa
        return ast

    def valDcl(self, ast):  # noqa
        return ast

    def funDcl(self, ast):  # noqa
        return ast

    def typeDcl(self, ast):  # noqa
        return ast

    def patDefPats(self, ast):  # noqa
        return ast

    def varDefSimple(self, ast):  # noqa
        return ast

    def patDef(self, ast):  # noqa
        return ast

    def uninitializedVarDef(self, ast):  # noqa
        return ast

    def varDef(self, ast):  # noqa
        return ast

    def funSig(self, ast):  # noqa
        return ast

    def funDefFull(self, ast):  # noqa
        return ast

    def funDefUnit(self, ast):  # noqa
        return ast

    def funDefCtor(self, ast):  # noqa
        return ast

    def funDef1(self, ast):  # noqa
        return ast

    def funDef(self, ast):  # noqa
        return ast

    def typeDef(self, ast):  # noqa
        return ast

    def valVarDef(self, ast):  # noqa
        return ast

    def varVarDef(self, ast):  # noqa
        return ast

    def patVarDef(self, ast):  # noqa
        return ast

    def def_(self, ast):  # noqa
        return ast

    def resultAnonFunc(self, ast):  # noqa
        return ast

    def resultExpr(self, ast):  # noqa
        return ast

    def blockStatMod(self, ast):  # noqa
        return ast

    def blockStatDef(self, ast):  # noqa
        return ast

    def blockStatTemplDef(self, ast):  # noqa
        return ast

    def blockStat(self, ast):  # noqa
        return ast

    def blockRest(self, ast):  # noqa
        return ast

    def blockBody(self, ast):  # noqa
        return ast

    def statBlock(self, ast):  # noqa
        return ast

    def caseBlock(self, ast):  # noqa
        return ast

    def block(self, ast):  # noqa
        return ast

    def earlyDef(self, ast):  # noqa
        return ast

    def earlyDefs(self, ast):  # noqa
        return ast

    def earlyDefsClause(self, ast):  # noqa
        return ast

    def extends(self, ast):  # noqa
        return ast

    def withkw(self, ast):  # noqa
        return ast

    def parentsTail(self, ast):  # noqa
        return ast

    def parentCtor(self, ast):  # noqa
        return ast

    def traitParents(self, ast):  # noqa
        return ast

    def traitParentsClause(self, ast):  # noqa
        return ast

    def traitTemplateFull(self, ast):  # noqa
        return ast

    def traitTemplateSimple(self, ast):  # noqa
        return ast

    def traitTemplate(self, ast):  # noqa
        return ast

    def traitDef(self, ast):  # noqa
        return ast

    def trait(self, ast):  # noqa
        return ast

    def classParents(self, ast):  # noqa
        return ast

    def classParentsClause(self, ast):  # noqa
        return ast

    def classTemplateFull(self, ast):  # noqa
        return ast

    def classTemplateSimple(self, ast):  # noqa
        return ast

    def classTemplate(self, ast):  # noqa
        return ast

    def classDef(self, ast):  # noqa
        return ast

    def class_(self, ast):  # noqa
        return ast

    def objectDef(self, ast):  # noqa
        return ast

    def module(self, ast):  # noqa
        return ast

    def implDef(self, ast):  # noqa
        return ast

    def ctorExpr(self, ast):  # noqa
        return ast

    def ctorBlock(self, ast):  # noqa
        return ast

    def selfInvocation(self, ast):  # noqa
        return ast

    def topImplDef(self, ast):  # noqa
        return ast

    def topStat(self, ast):  # noqa
        return ast

    def topStatSeq(self, ast):  # noqa
        return ast

    def packaging(self, ast):  # noqa
        return ast

    def packageObject(self, ast):  # noqa
        return ast

    def package(self, ast):  # noqa
        return ast

    def compilationUnit(self, ast):  # noqa
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = ScalaParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, ScalaParser, name='Scala')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
