# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    OpenAPI spec version: 0.1.0
    Contact: blah@cliffano.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GithubRepositories(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'links': 'GithubRepositorieslinks',
        'items': 'list[GithubRepository]',
        'last_page': 'int',
        'next_page': 'int',
        'page_size': 'int'
    }

    attribute_map = {
        '_class': '_class',
        'links': '_links',
        'items': 'items',
        'last_page': 'lastPage',
        'next_page': 'nextPage',
        'page_size': 'pageSize'
    }

    def __init__(self, _class=None, links=None, items=None, last_page=None, next_page=None, page_size=None):
        """
        GithubRepositories - a model defined in Swagger
        """

        self.__class = None
        self._links = None
        self._items = None
        self._last_page = None
        self._next_page = None
        self._page_size = None
        self.discriminator = None

        if _class is not None:
          self._class = _class
        if links is not None:
          self.links = links
        if items is not None:
          self.items = items
        if last_page is not None:
          self.last_page = last_page
        if next_page is not None:
          self.next_page = next_page
        if page_size is not None:
          self.page_size = page_size

    @property
    def _class(self):
        """
        Gets the _class of this GithubRepositories.

        :return: The _class of this GithubRepositories.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this GithubRepositories.

        :param _class: The _class of this GithubRepositories.
        :type: str
        """

        self.__class = _class

    @property
    def links(self):
        """
        Gets the links of this GithubRepositories.

        :return: The links of this GithubRepositories.
        :rtype: GithubRepositorieslinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this GithubRepositories.

        :param links: The links of this GithubRepositories.
        :type: GithubRepositorieslinks
        """

        self._links = links

    @property
    def items(self):
        """
        Gets the items of this GithubRepositories.

        :return: The items of this GithubRepositories.
        :rtype: list[GithubRepository]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this GithubRepositories.

        :param items: The items of this GithubRepositories.
        :type: list[GithubRepository]
        """

        self._items = items

    @property
    def last_page(self):
        """
        Gets the last_page of this GithubRepositories.

        :return: The last_page of this GithubRepositories.
        :rtype: int
        """
        return self._last_page

    @last_page.setter
    def last_page(self, last_page):
        """
        Sets the last_page of this GithubRepositories.

        :param last_page: The last_page of this GithubRepositories.
        :type: int
        """

        self._last_page = last_page

    @property
    def next_page(self):
        """
        Gets the next_page of this GithubRepositories.

        :return: The next_page of this GithubRepositories.
        :rtype: int
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """
        Sets the next_page of this GithubRepositories.

        :param next_page: The next_page of this GithubRepositories.
        :type: int
        """

        self._next_page = next_page

    @property
    def page_size(self):
        """
        Gets the page_size of this GithubRepositories.

        :return: The page_size of this GithubRepositories.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this GithubRepositories.

        :param page_size: The page_size of this GithubRepositories.
        :type: int
        """

        self._page_size = page_size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GithubRepositories):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
