# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    OpenAPI spec version: 0.1.0
    Contact: blah@cliffano.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BranchImpl(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'display_name': 'str',
        'estimated_duration_in_millis': 'int',
        'full_display_name': 'str',
        'full_name': 'str',
        'name': 'str',
        'organization': 'str',
        'parameters': 'list[StringParameterDefinition]',
        'permissions': 'BranchImplpermissions',
        'weather_score': 'int',
        'pull_request': 'str',
        'links': 'BranchImpllinks',
        'latest_run': 'PipelineRunImpl'
    }

    attribute_map = {
        '_class': '_class',
        'display_name': 'displayName',
        'estimated_duration_in_millis': 'estimatedDurationInMillis',
        'full_display_name': 'fullDisplayName',
        'full_name': 'fullName',
        'name': 'name',
        'organization': 'organization',
        'parameters': 'parameters',
        'permissions': 'permissions',
        'weather_score': 'weatherScore',
        'pull_request': 'pullRequest',
        'links': '_links',
        'latest_run': 'latestRun'
    }

    def __init__(self, _class=None, display_name=None, estimated_duration_in_millis=None, full_display_name=None, full_name=None, name=None, organization=None, parameters=None, permissions=None, weather_score=None, pull_request=None, links=None, latest_run=None):
        """
        BranchImpl - a model defined in Swagger
        """

        self.__class = None
        self._display_name = None
        self._estimated_duration_in_millis = None
        self._full_display_name = None
        self._full_name = None
        self._name = None
        self._organization = None
        self._parameters = None
        self._permissions = None
        self._weather_score = None
        self._pull_request = None
        self._links = None
        self._latest_run = None
        self.discriminator = None

        if _class is not None:
          self._class = _class
        if display_name is not None:
          self.display_name = display_name
        if estimated_duration_in_millis is not None:
          self.estimated_duration_in_millis = estimated_duration_in_millis
        if full_display_name is not None:
          self.full_display_name = full_display_name
        if full_name is not None:
          self.full_name = full_name
        if name is not None:
          self.name = name
        if organization is not None:
          self.organization = organization
        if parameters is not None:
          self.parameters = parameters
        if permissions is not None:
          self.permissions = permissions
        if weather_score is not None:
          self.weather_score = weather_score
        if pull_request is not None:
          self.pull_request = pull_request
        if links is not None:
          self.links = links
        if latest_run is not None:
          self.latest_run = latest_run

    @property
    def _class(self):
        """
        Gets the _class of this BranchImpl.

        :return: The _class of this BranchImpl.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this BranchImpl.

        :param _class: The _class of this BranchImpl.
        :type: str
        """

        self.__class = _class

    @property
    def display_name(self):
        """
        Gets the display_name of this BranchImpl.

        :return: The display_name of this BranchImpl.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this BranchImpl.

        :param display_name: The display_name of this BranchImpl.
        :type: str
        """

        self._display_name = display_name

    @property
    def estimated_duration_in_millis(self):
        """
        Gets the estimated_duration_in_millis of this BranchImpl.

        :return: The estimated_duration_in_millis of this BranchImpl.
        :rtype: int
        """
        return self._estimated_duration_in_millis

    @estimated_duration_in_millis.setter
    def estimated_duration_in_millis(self, estimated_duration_in_millis):
        """
        Sets the estimated_duration_in_millis of this BranchImpl.

        :param estimated_duration_in_millis: The estimated_duration_in_millis of this BranchImpl.
        :type: int
        """

        self._estimated_duration_in_millis = estimated_duration_in_millis

    @property
    def full_display_name(self):
        """
        Gets the full_display_name of this BranchImpl.

        :return: The full_display_name of this BranchImpl.
        :rtype: str
        """
        return self._full_display_name

    @full_display_name.setter
    def full_display_name(self, full_display_name):
        """
        Sets the full_display_name of this BranchImpl.

        :param full_display_name: The full_display_name of this BranchImpl.
        :type: str
        """

        self._full_display_name = full_display_name

    @property
    def full_name(self):
        """
        Gets the full_name of this BranchImpl.

        :return: The full_name of this BranchImpl.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this BranchImpl.

        :param full_name: The full_name of this BranchImpl.
        :type: str
        """

        self._full_name = full_name

    @property
    def name(self):
        """
        Gets the name of this BranchImpl.

        :return: The name of this BranchImpl.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this BranchImpl.

        :param name: The name of this BranchImpl.
        :type: str
        """

        self._name = name

    @property
    def organization(self):
        """
        Gets the organization of this BranchImpl.

        :return: The organization of this BranchImpl.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this BranchImpl.

        :param organization: The organization of this BranchImpl.
        :type: str
        """

        self._organization = organization

    @property
    def parameters(self):
        """
        Gets the parameters of this BranchImpl.

        :return: The parameters of this BranchImpl.
        :rtype: list[StringParameterDefinition]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this BranchImpl.

        :param parameters: The parameters of this BranchImpl.
        :type: list[StringParameterDefinition]
        """

        self._parameters = parameters

    @property
    def permissions(self):
        """
        Gets the permissions of this BranchImpl.

        :return: The permissions of this BranchImpl.
        :rtype: BranchImplpermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """
        Sets the permissions of this BranchImpl.

        :param permissions: The permissions of this BranchImpl.
        :type: BranchImplpermissions
        """

        self._permissions = permissions

    @property
    def weather_score(self):
        """
        Gets the weather_score of this BranchImpl.

        :return: The weather_score of this BranchImpl.
        :rtype: int
        """
        return self._weather_score

    @weather_score.setter
    def weather_score(self, weather_score):
        """
        Sets the weather_score of this BranchImpl.

        :param weather_score: The weather_score of this BranchImpl.
        :type: int
        """

        self._weather_score = weather_score

    @property
    def pull_request(self):
        """
        Gets the pull_request of this BranchImpl.

        :return: The pull_request of this BranchImpl.
        :rtype: str
        """
        return self._pull_request

    @pull_request.setter
    def pull_request(self, pull_request):
        """
        Sets the pull_request of this BranchImpl.

        :param pull_request: The pull_request of this BranchImpl.
        :type: str
        """

        self._pull_request = pull_request

    @property
    def links(self):
        """
        Gets the links of this BranchImpl.

        :return: The links of this BranchImpl.
        :rtype: BranchImpllinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this BranchImpl.

        :param links: The links of this BranchImpl.
        :type: BranchImpllinks
        """

        self._links = links

    @property
    def latest_run(self):
        """
        Gets the latest_run of this BranchImpl.

        :return: The latest_run of this BranchImpl.
        :rtype: PipelineRunImpl
        """
        return self._latest_run

    @latest_run.setter
    def latest_run(self, latest_run):
        """
        Sets the latest_run of this BranchImpl.

        :param latest_run: The latest_run of this BranchImpl.
        :type: PipelineRunImpl
        """

        self._latest_run = latest_run

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BranchImpl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
