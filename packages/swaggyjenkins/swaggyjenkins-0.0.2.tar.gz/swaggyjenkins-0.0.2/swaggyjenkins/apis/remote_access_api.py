# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    OpenAPI spec version: 0.1.0
    Contact: blah@cliffano.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class RemoteAccessApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_computer(self, **kwargs):
        """
        Retrieve computer details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_computer(async=True)
        >>> result = thread.get()

        :param async bool
        :return: HudsonmodelComputerSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_computer_with_http_info(**kwargs)
        else:
            (data) = self.get_computer_with_http_info(**kwargs)
            return data

    def get_computer_with_http_info(self, **kwargs):
        """
        Retrieve computer details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_computer_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: HudsonmodelComputerSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_computer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/computer/api/json?depth=1', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HudsonmodelComputerSet',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_crumb(self, **kwargs):
        """
        Retrieve CSRF protection token
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crumb(async=True)
        >>> result = thread.get()

        :param async bool
        :return: HudsonsecuritycsrfDefaultCrumbIssuer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_crumb_with_http_info(**kwargs)
        else:
            (data) = self.get_crumb_with_http_info(**kwargs)
            return data

    def get_crumb_with_http_info(self, **kwargs):
        """
        Retrieve CSRF protection token
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crumb_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: HudsonsecuritycsrfDefaultCrumbIssuer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crumb" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/crumbIssuer/api/json', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HudsonsecuritycsrfDefaultCrumbIssuer',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_jenkins(self, **kwargs):
        """
        Retrieve Jenkins details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_jenkins(async=True)
        >>> result = thread.get()

        :param async bool
        :return: HudsonmodelHudson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_jenkins_with_http_info(**kwargs)
        else:
            (data) = self.get_jenkins_with_http_info(**kwargs)
            return data

    def get_jenkins_with_http_info(self, **kwargs):
        """
        Retrieve Jenkins details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_jenkins_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: HudsonmodelHudson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jenkins" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/api/json', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HudsonmodelHudson',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_job(self, name, **kwargs):
        """
        Retrieve job details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_job(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :return: HudsonmodelFreeStyleProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_job_with_http_info(name, **kwargs)
        else:
            (data) = self.get_job_with_http_info(name, **kwargs)
            return data

    def get_job_with_http_info(self, name, **kwargs):
        """
        Retrieve job details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_job_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :return: HudsonmodelFreeStyleProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_job`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/job/{name}/api/json', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HudsonmodelFreeStyleProject',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_job_config(self, name, **kwargs):
        """
        Retrieve job configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_job_config(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_job_config_with_http_info(name, **kwargs)
        else:
            (data) = self.get_job_config_with_http_info(name, **kwargs)
            return data

    def get_job_config_with_http_info(self, name, **kwargs):
        """
        Retrieve job configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_job_config_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_job_config`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/job/{name}/config.xml', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_job_last_build(self, name, **kwargs):
        """
        Retrieve job's last build details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_job_last_build(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :return: HudsonmodelFreeStyleBuild
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_job_last_build_with_http_info(name, **kwargs)
        else:
            (data) = self.get_job_last_build_with_http_info(name, **kwargs)
            return data

    def get_job_last_build_with_http_info(self, name, **kwargs):
        """
        Retrieve job's last build details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_job_last_build_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :return: HudsonmodelFreeStyleBuild
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_last_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_job_last_build`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/job/{name}/lastBuild/api/json', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HudsonmodelFreeStyleBuild',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_job_progressive_text(self, name, number, start, **kwargs):
        """
        Retrieve job's build progressive text output
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_job_progressive_text(name, number, start, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str number: Build number (required)
        :param str start: Starting point of progressive text output (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_job_progressive_text_with_http_info(name, number, start, **kwargs)
        else:
            (data) = self.get_job_progressive_text_with_http_info(name, number, start, **kwargs)
            return data

    def get_job_progressive_text_with_http_info(self, name, number, start, **kwargs):
        """
        Retrieve job's build progressive text output
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_job_progressive_text_with_http_info(name, number, start, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str number: Build number (required)
        :param str start: Starting point of progressive text output (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'number', 'start']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_progressive_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_job_progressive_text`")
        # verify the required parameter 'number' is set
        if ('number' not in params) or (params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `get_job_progressive_text`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_job_progressive_text`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'number' in params:
            path_params['number'] = params['number']

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/job/{name}/{number}/logText/progressiveText', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_queue(self, **kwargs):
        """
        Retrieve queue details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_queue(async=True)
        >>> result = thread.get()

        :param async bool
        :return: HudsonmodelQueue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_queue_with_http_info(**kwargs)
        else:
            (data) = self.get_queue_with_http_info(**kwargs)
            return data

    def get_queue_with_http_info(self, **kwargs):
        """
        Retrieve queue details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_queue_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: HudsonmodelQueue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_queue" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/queue/api/json', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HudsonmodelQueue',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_queue_item(self, number, **kwargs):
        """
        Retrieve queued item details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_queue_item(number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str number: Queue number (required)
        :return: HudsonmodelQueue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_queue_item_with_http_info(number, **kwargs)
        else:
            (data) = self.get_queue_item_with_http_info(number, **kwargs)
            return data

    def get_queue_item_with_http_info(self, number, **kwargs):
        """
        Retrieve queued item details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_queue_item_with_http_info(number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str number: Queue number (required)
        :return: HudsonmodelQueue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['number']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_queue_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'number' is set
        if ('number' not in params) or (params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `get_queue_item`")


        collection_formats = {}

        path_params = {}
        if 'number' in params:
            path_params['number'] = params['number']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/queue/item/{number}/api/json', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HudsonmodelQueue',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_view(self, name, **kwargs):
        """
        Retrieve view details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_view(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the view (required)
        :return: HudsonmodelListView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_view_with_http_info(name, **kwargs)
        else:
            (data) = self.get_view_with_http_info(name, **kwargs)
            return data

    def get_view_with_http_info(self, name, **kwargs):
        """
        Retrieve view details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_view_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the view (required)
        :return: HudsonmodelListView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_view" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_view`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/view/{name}/api/json', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HudsonmodelListView',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_view_config(self, name, **kwargs):
        """
        Retrieve view configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_view_config(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the view (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_view_config_with_http_info(name, **kwargs)
        else:
            (data) = self.get_view_config_with_http_info(name, **kwargs)
            return data

    def get_view_config_with_http_info(self, name, **kwargs):
        """
        Retrieve view configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_view_config_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the view (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_view_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_view_config`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/view/{name}/config.xml', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def head_jenkins(self, **kwargs):
        """
        Retrieve Jenkins headers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.head_jenkins(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.head_jenkins_with_http_info(**kwargs)
        else:
            (data) = self.head_jenkins_with_http_info(**kwargs)
            return data

    def head_jenkins_with_http_info(self, **kwargs):
        """
        Retrieve Jenkins headers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.head_jenkins_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method head_jenkins" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/api/json', 'HEAD',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_create_item(self, name, **kwargs):
        """
        Create a new job using job configuration, or copied from an existing job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_create_item(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the new job (required)
        :param str _from: Existing job to copy from
        :param str mode: Set to 'copy' for copying an existing job
        :param str body: Job configuration in config.xml format
        :param str jenkins_crumb: CSRF protection token
        :param str content_type: Content type header application/xml
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_create_item_with_http_info(name, **kwargs)
        else:
            (data) = self.post_create_item_with_http_info(name, **kwargs)
            return data

    def post_create_item_with_http_info(self, name, **kwargs):
        """
        Create a new job using job configuration, or copied from an existing job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_create_item_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the new job (required)
        :param str _from: Existing job to copy from
        :param str mode: Set to 'copy' for copying an existing job
        :param str body: Job configuration in config.xml format
        :param str jenkins_crumb: CSRF protection token
        :param str content_type: Content type header application/xml
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', '_from', 'mode', 'body', 'jenkins_crumb', 'content_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_create_item`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'mode' in params:
            query_params.append(('mode', params['mode']))

        header_params = {}
        if 'jenkins_crumb' in params:
            header_params['Jenkins-Crumb'] = params['jenkins_crumb']
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/html'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/createItem', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_create_view(self, name, **kwargs):
        """
        Create a new view using view configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_create_view(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the new view (required)
        :param str body: View configuration in config.xml format
        :param str jenkins_crumb: CSRF protection token
        :param str content_type: Content type header application/xml
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_create_view_with_http_info(name, **kwargs)
        else:
            (data) = self.post_create_view_with_http_info(name, **kwargs)
            return data

    def post_create_view_with_http_info(self, name, **kwargs):
        """
        Create a new view using view configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_create_view_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the new view (required)
        :param str body: View configuration in config.xml format
        :param str jenkins_crumb: CSRF protection token
        :param str content_type: Content type header application/xml
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body', 'jenkins_crumb', 'content_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_view" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_create_view`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))

        header_params = {}
        if 'jenkins_crumb' in params:
            header_params['Jenkins-Crumb'] = params['jenkins_crumb']
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/html'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/createView', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_job_build(self, name, json, **kwargs):
        """
        Build a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_build(name, json, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str json: (required)
        :param str token:
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_job_build_with_http_info(name, json, **kwargs)
        else:
            (data) = self.post_job_build_with_http_info(name, json, **kwargs)
            return data

    def post_job_build_with_http_info(self, name, json, **kwargs):
        """
        Build a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_build_with_http_info(name, json, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str json: (required)
        :param str token:
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'json', 'token', 'jenkins_crumb']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_job_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_job_build`")
        # verify the required parameter 'json' is set
        if ('json' not in params) or (params['json'] is None):
            raise ValueError("Missing the required parameter `json` when calling `post_job_build`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []
        if 'json' in params:
            query_params.append(('json', params['json']))
        if 'token' in params:
            query_params.append(('token', params['token']))

        header_params = {}
        if 'jenkins_crumb' in params:
            header_params['Jenkins-Crumb'] = params['jenkins_crumb']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/job/{name}/build', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_job_config(self, name, body, **kwargs):
        """
        Update job configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_config(name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str body: Job configuration in config.xml format (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_job_config_with_http_info(name, body, **kwargs)
        else:
            (data) = self.post_job_config_with_http_info(name, body, **kwargs)
            return data

    def post_job_config_with_http_info(self, name, body, **kwargs):
        """
        Update job configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_config_with_http_info(name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str body: Job configuration in config.xml format (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body', 'jenkins_crumb']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_job_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_job_config`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_job_config`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}
        if 'jenkins_crumb' in params:
            header_params['Jenkins-Crumb'] = params['jenkins_crumb']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml'])

        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/job/{name}/config.xml', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_job_delete(self, name, **kwargs):
        """
        Delete a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_delete(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_job_delete_with_http_info(name, **kwargs)
        else:
            (data) = self.post_job_delete_with_http_info(name, **kwargs)
            return data

    def post_job_delete_with_http_info(self, name, **kwargs):
        """
        Delete a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_delete_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'jenkins_crumb']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_job_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_job_delete`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}
        if 'jenkins_crumb' in params:
            header_params['Jenkins-Crumb'] = params['jenkins_crumb']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/job/{name}/doDelete', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_job_disable(self, name, **kwargs):
        """
        Disable a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_disable(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_job_disable_with_http_info(name, **kwargs)
        else:
            (data) = self.post_job_disable_with_http_info(name, **kwargs)
            return data

    def post_job_disable_with_http_info(self, name, **kwargs):
        """
        Disable a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_disable_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'jenkins_crumb']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_job_disable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_job_disable`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}
        if 'jenkins_crumb' in params:
            header_params['Jenkins-Crumb'] = params['jenkins_crumb']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/job/{name}/disable', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_job_enable(self, name, **kwargs):
        """
        Enable a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_enable(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_job_enable_with_http_info(name, **kwargs)
        else:
            (data) = self.post_job_enable_with_http_info(name, **kwargs)
            return data

    def post_job_enable_with_http_info(self, name, **kwargs):
        """
        Enable a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_enable_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'jenkins_crumb']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_job_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_job_enable`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}
        if 'jenkins_crumb' in params:
            header_params['Jenkins-Crumb'] = params['jenkins_crumb']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/job/{name}/enable', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_job_last_build_stop(self, name, **kwargs):
        """
        Stop a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_last_build_stop(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_job_last_build_stop_with_http_info(name, **kwargs)
        else:
            (data) = self.post_job_last_build_stop_with_http_info(name, **kwargs)
            return data

    def post_job_last_build_stop_with_http_info(self, name, **kwargs):
        """
        Stop a job
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_job_last_build_stop_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the job (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'jenkins_crumb']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_job_last_build_stop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_job_last_build_stop`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}
        if 'jenkins_crumb' in params:
            header_params['Jenkins-Crumb'] = params['jenkins_crumb']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/job/{name}/lastBuild/stop', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_view_config(self, name, body, **kwargs):
        """
        Update view configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_view_config(name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the view (required)
        :param str body: View configuration in config.xml format (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_view_config_with_http_info(name, body, **kwargs)
        else:
            (data) = self.post_view_config_with_http_info(name, body, **kwargs)
            return data

    def post_view_config_with_http_info(self, name, body, **kwargs):
        """
        Update view configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_view_config_with_http_info(name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the view (required)
        :param str body: View configuration in config.xml format (required)
        :param str jenkins_crumb: CSRF protection token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'body', 'jenkins_crumb']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_view_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_view_config`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_view_config`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}
        if 'jenkins_crumb' in params:
            header_params['Jenkins-Crumb'] = params['jenkins_crumb']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['jenkins_auth']

        return self.api_client.call_api('/view/{name}/config.xml', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
