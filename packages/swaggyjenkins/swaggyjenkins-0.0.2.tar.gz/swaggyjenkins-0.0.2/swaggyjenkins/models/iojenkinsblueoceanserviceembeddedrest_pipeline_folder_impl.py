# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    OpenAPI spec version: 0.1.0
    Contact: blah@cliffano.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'display_name': 'str',
        'full_name': 'str',
        'name': 'str',
        'organization': 'str',
        'number_of_folders': 'int',
        'number_of_pipelines': 'int'
    }

    attribute_map = {
        '_class': '_class',
        'display_name': 'displayName',
        'full_name': 'fullName',
        'name': 'name',
        'organization': 'organization',
        'number_of_folders': 'numberOfFolders',
        'number_of_pipelines': 'numberOfPipelines'
    }

    def __init__(self, _class=None, display_name=None, full_name=None, name=None, organization=None, number_of_folders=None, number_of_pipelines=None):
        """
        IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl - a model defined in Swagger
        """

        self.__class = None
        self._display_name = None
        self._full_name = None
        self._name = None
        self._organization = None
        self._number_of_folders = None
        self._number_of_pipelines = None
        self.discriminator = None

        if _class is not None:
          self._class = _class
        if display_name is not None:
          self.display_name = display_name
        if full_name is not None:
          self.full_name = full_name
        if name is not None:
          self.name = name
        if organization is not None:
          self.organization = organization
        if number_of_folders is not None:
          self.number_of_folders = number_of_folders
        if number_of_pipelines is not None:
          self.number_of_pipelines = number_of_pipelines

    @property
    def _class(self):
        """
        Gets the _class of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :return: The _class of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :param _class: The _class of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :type: str
        """

        self.__class = _class

    @property
    def display_name(self):
        """
        Gets the display_name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :return: The display_name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :param display_name: The display_name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :type: str
        """

        self._display_name = display_name

    @property
    def full_name(self):
        """
        Gets the full_name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :return: The full_name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :param full_name: The full_name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :type: str
        """

        self._full_name = full_name

    @property
    def name(self):
        """
        Gets the name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :return: The name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :param name: The name of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :type: str
        """

        self._name = name

    @property
    def organization(self):
        """
        Gets the organization of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :return: The organization of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :param organization: The organization of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :type: str
        """

        self._organization = organization

    @property
    def number_of_folders(self):
        """
        Gets the number_of_folders of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :return: The number_of_folders of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :rtype: int
        """
        return self._number_of_folders

    @number_of_folders.setter
    def number_of_folders(self, number_of_folders):
        """
        Sets the number_of_folders of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :param number_of_folders: The number_of_folders of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :type: int
        """

        self._number_of_folders = number_of_folders

    @property
    def number_of_pipelines(self):
        """
        Gets the number_of_pipelines of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :return: The number_of_pipelines of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :rtype: int
        """
        return self._number_of_pipelines

    @number_of_pipelines.setter
    def number_of_pipelines(self, number_of_pipelines):
        """
        Sets the number_of_pipelines of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.

        :param number_of_pipelines: The number_of_pipelines of this IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.
        :type: int
        """

        self._number_of_pipelines = number_of_pipelines

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
