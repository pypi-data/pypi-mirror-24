# Copyright (C) 2017 Jan Jancar
#
# This file is a part of the Mailman PGP plugin.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

# Default PGP config

[db]
# db path the PGP plugin will use to store list/user configuration (not keys!).
url: sqlite:////$DATA_DIR/pgp.db


[archiving]
# The directory where the local mbox archiver will save messages.
mailbox_dir: $ARCHIVE_DIR/pgp/mbox

# The directory where the local maildir archiver will save messages.
maildir_dir: $ARCHIVE_DIR/pgp/maildir


[keydirs]
# Key directory used to store user public keys.
user_keydir: $DATA_DIR/pgp/user_keydir/

# Key directory used to store list keypairs.
list_keydir: $DATA_DIR/pgp/list_keydir/

# Key directory used to store archive public keys.
archive_keydir: $DATA_DIR/pgp/archive_keydir/


[keypairs]
# Whether to autogenerate the list key on list creation.
autogenerate: yes

# Type of primary list key and its size.
# Format: type:size
# type is one of:
#     RSA, DSA, ECDSA.
# size is the key size or curve name for ECDSA, which can be one of:
#     nistp256, nistp384, nistp521, brainpoolP256r1, brainpoolP384r1,
#     brainpoolP512r1, secp256k1
primary_key: RSA:4096

# Type of list encryption subkey and its size.
# Format: type:size
# type is one of:
#     RSA, ECDH
# size is the key size or curve name for ECDH, which can be one of:
#     nistp256, nistp384, nistp521, brainpoolP256r1, brainpoolP384r1,
#     brainpoolP512r1, secp256k1
sub_key: RSA:4096

# Shred keypair on list deletion? Shredding tries to securely erase the file
# by overwriting it with random data many times. Will be only performed if
# the `delete` option is also set to yes.
shred: yes

# A command, that is run when shredding the list key (if shred is set).
# It is passed the list key path as an argument.
# If empty, mailman-pgp will try to shred the listkey itself.
# Some Linux distributions provide the `shred` command from GNU coreutils, or
# similar.
shred_command:

# Delete list keypair on list deletion?
delete: yes

[queues]
# The queue to which processed incoming messages are passed.
in: in_default


[misc]
# The lifetime for `key change` request confirmation.
change_request_lifetime: 1d


[rest]
# Allow the acessing/modification of a list private key through the REST API?
# This is necessary for the django-pgpmailman web ui to allow a list owner
# to change/export the list private key.
expose_private_key: yes