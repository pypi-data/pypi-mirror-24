/* Generated by Cython 0.23.4 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__py_stringsimjoin__join__set_sim_join_cy
#define __PYX_HAVE_API__py_stringsimjoin__join__set_sim_join_cy
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include "math.h"
#include <set>
#include "string.h"
#include <string>
#include <map>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "py_stringsimjoin/join/set_sim_join_cy.pyx",
  "py_stringsimjoin/index/position_index_cy.pxd",
  "py_stringsimjoin/index/inverted_index_cy.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy;
struct __pyx_obj_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy;

/* "py_stringsimjoin/utils/cython_utils.pxd":9
 * 
 * 
 * ctypedef bool (*compfnptr)(double, double) nogil             # <<<<<<<<<<<<<<
 * 
 * cdef void tokenize_lists(ltable, rtable,
 */
typedef bool (*__pyx_t_16py_stringsimjoin_5utils_12cython_utils_compfnptr)(double, double);

/* "py_stringsimjoin/join/set_sim_join_cy.pyx":221
 *         return <int>ceil((threshold / (1 + threshold)) * (l_num_tokens + r_num_tokens))
 * 
 * ctypedef double (*fnptr)(const vector[int]&, const vector[int]&) nogil             # <<<<<<<<<<<<<<
 * 
 * cdef fnptr get_sim_function(int& sim_type) nogil:
 */
typedef double (*__pyx_t_16py_stringsimjoin_4join_15set_sim_join_cy_fnptr)(std::vector<int>  const &, std::vector<int>  const &);

/* "py_stringsimjoin/index/position_index_cy.pxd":18
 * '''
 * 
 * cdef class PositionIndexCy:             # <<<<<<<<<<<<<<
 *     cdef void set_fields(self, omap[int, vector[pair[int, int]]]&, vector[int]&, vector[int]&, int, int, double)
 *     cdef omap[int, vector[pair[int, int]]] index
 */
struct __pyx_obj_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy {
  PyObject_HEAD
  struct __pyx_vtabstruct_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy *__pyx_vtab;
  std::map<int,std::vector<std::pair<int,int> > >  index;
  int min_len;
  int max_len;
  std::vector<int>  size_vector;
  std::vector<int>  l_empty_ids;
  double threshold;
};


/* "py_stringsimjoin/index/inverted_index_cy.pxd":16
 * '''
 * 
 * cdef class InvertedIndexCy:             # <<<<<<<<<<<<<<
 *     cdef void set_fields(self, omap[int, vector[int]]&, vector[int]&)
 *     cdef void build_prefix_index(self, vector[vector[int]]&, int, double)
 */
struct __pyx_obj_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy {
  PyObject_HEAD
  struct __pyx_vtabstruct_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy *__pyx_vtab;
  std::map<int,std::vector<int> >  index;
  std::vector<int>  size_vector;
};



/* "py_stringsimjoin/index/position_index_cy.pxd":18
 * '''
 * 
 * cdef class PositionIndexCy:             # <<<<<<<<<<<<<<
 *     cdef void set_fields(self, omap[int, vector[pair[int, int]]]&, vector[int]&, vector[int]&, int, int, double)
 *     cdef omap[int, vector[pair[int, int]]] index
 */

struct __pyx_vtabstruct_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy {
  void (*set_fields)(struct __pyx_obj_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy *, std::map<int,std::vector<std::pair<int,int> > >  &, std::vector<int>  &, std::vector<int>  &, int, int, double);
};
static struct __pyx_vtabstruct_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy *__pyx_vtabptr_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy;


/* "py_stringsimjoin/index/inverted_index_cy.pxd":16
 * '''
 * 
 * cdef class InvertedIndexCy:             # <<<<<<<<<<<<<<
 *     cdef void set_fields(self, omap[int, vector[int]]&, vector[int]&)
 *     cdef void build_prefix_index(self, vector[vector[int]]&, int, double)
 */

struct __pyx_vtabstruct_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy {
  void (*set_fields)(struct __pyx_obj_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy *, std::map<int,std::vector<int> >  &, std::vector<int>  &);
  void (*build_prefix_index)(struct __pyx_obj_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy *, std::vector<std::vector<int> >  &, int, double);
};
static struct __pyx_vtabstruct_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy *__pyx_vtabptr_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static void* __Pyx_GetVtable(PyObject *dict);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

#include <new>

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'py_stringsimjoin.similarity_measure.cosine' */
static double (*__pyx_f_16py_stringsimjoin_18similarity_measure_6cosine_cosine)(std::vector<int>  const &, std::vector<int>  const &); /*proto*/

/* Module declarations from 'py_stringsimjoin.similarity_measure.dice' */
static double (*__pyx_f_16py_stringsimjoin_18similarity_measure_4dice_dice)(std::vector<int>  const &, std::vector<int>  const &); /*proto*/

/* Module declarations from 'py_stringsimjoin.similarity_measure.jaccard' */
static double (*__pyx_f_16py_stringsimjoin_18similarity_measure_7jaccard_jaccard)(std::vector<int>  const &, std::vector<int>  const &); /*proto*/

/* Module declarations from 'py_stringsimjoin.index.position_index_cy' */
static PyTypeObject *__pyx_ptype_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy = 0;

/* Module declarations from 'py_stringsimjoin.index.inverted_index_cy' */
static PyTypeObject *__pyx_ptype_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy = 0;

/* Module declarations from 'py_stringsimjoin.utils.cython_utils' */
static void (*__pyx_f_16py_stringsimjoin_5utils_12cython_utils_tokenize_lists)(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &); /*proto*/
static int (*__pyx_f_16py_stringsimjoin_5utils_12cython_utils_get_comp_type)(PyObject *); /*proto*/
static __pyx_t_16py_stringsimjoin_5utils_12cython_utils_compfnptr (*__pyx_f_16py_stringsimjoin_5utils_12cython_utils_get_comparison_function)(int const ); /*proto*/
static int (*__pyx_f_16py_stringsimjoin_5utils_12cython_utils_int_min)(int, int); /*proto*/
static int (*__pyx_f_16py_stringsimjoin_5utils_12cython_utils_int_max)(int, int); /*proto*/

/* Module declarations from 'py_stringsimjoin.join.set_sim_join_cy' */
static void __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_set_sim_join_partition(std::pair<int,int> , std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int, int, double, bool, std::map<int,std::vector<std::pair<int,int> > >  &, std::vector<int>  &, std::vector<int>  &, int, int, std::vector<std::pair<int,int> >  &, std::vector<double>  &, int, bool); /*proto*/
static struct __pyx_obj_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy *__pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_build_position_index(std::vector<std::vector<int> >  &, int &, double &, bool); /*proto*/
static int __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_prefix_length(int &, int &, double &); /*proto*/
static int __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_size_lower_bound(int &, int &, double &); /*proto*/
static int __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_size_upper_bound(int &, int &, double &); /*proto*/
static int __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_overlap_threshold(int &, int &, int &, double &); /*proto*/
static __pyx_t_16py_stringsimjoin_4join_15set_sim_join_cy_fnptr __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_sim_function(int &); /*proto*/
static int __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_sim_type(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "py_stringsimjoin.join.set_sim_join_cy"
int __pyx_module_is_main_py_stringsimjoin__join__set_sim_join_cy = 0;

/* Implementation of 'py_stringsimjoin.join.set_sim_join_cy' */
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_range;
static char __pyx_k_DICE[] = "DICE";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_range[] = "range";
static char __pyx_k_COSINE[] = "COSINE";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_update[] = "update";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_JACCARD[] = "JACCARD";
static char __pyx_k_ProgBar[] = "ProgBar";
static char __pyx_k_pyprind[] = "pyprind";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_progress_bar[] = "_progress_bar";
static PyObject *__pyx_n_s_COSINE;
static PyObject *__pyx_n_s_DICE;
static PyObject *__pyx_n_s_JACCARD;
static PyObject *__pyx_n_s_ProgBar;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_progress_bar;
static PyObject *__pyx_n_s_pyprind;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_xrange;

/* "py_stringsimjoin/join/set_sim_join_cy.pyx":27
 * 
 * 
 * cdef void set_sim_join_cy(ltable, rtable,             # <<<<<<<<<<<<<<
 *                            l_join_attr_index, r_join_attr_index,
 *                            tokenizer, sim_measure, double threshold, comp_op,
 */

static void __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_set_sim_join_cy(PyObject *__pyx_v_ltable, PyObject *__pyx_v_rtable, PyObject *__pyx_v_l_join_attr_index, PyObject *__pyx_v_r_join_attr_index, PyObject *__pyx_v_tokenizer, PyObject *__pyx_v_sim_measure, double __pyx_v_threshold, PyObject *__pyx_v_comp_op, int __pyx_v_n_jobs, bool __pyx_v_allow_empty, bool __pyx_v_show_progress, std::vector<std::vector<std::pair<int,int> > >  &__pyx_v_output_pairs, std::vector<std::vector<double> >  &__pyx_v_output_sim_scores) {
  std::vector<std::vector<int> >  __pyx_v_ltokens;
  std::vector<std::vector<int> >  __pyx_v_rtokens;
  std::vector<std::pair<int,int> >  __pyx_v_partitions;
  int __pyx_v_i;
  int __pyx_v_n;
  int __pyx_v_partition_size;
  int __pyx_v_start;
  int __pyx_v_end;
  int __pyx_v_sim_type;
  int __pyx_v_comp_op_type;
  struct __pyx_obj_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy *__pyx_v_index = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  std::pair<int,int>  __pyx_t_6;
  std::vector<std::pair<int,int> >  __pyx_t_7;
  std::vector<double>  __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_sim_join_cy", 0);

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":35
 * 
 *     cdef vector[vector[int]] ltokens, rtokens
 *     tokenize_lists(ltable, rtable, l_join_attr_index, r_join_attr_index,             # <<<<<<<<<<<<<<
 *                    tokenizer, ltokens, rtokens)
 * 
 */
  __pyx_f_16py_stringsimjoin_5utils_12cython_utils_tokenize_lists(__pyx_v_ltable, __pyx_v_rtable, __pyx_v_l_join_attr_index, __pyx_v_r_join_attr_index, __pyx_v_tokenizer, __pyx_v_ltokens, __pyx_v_rtokens);

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":39
 * 
 *     cdef vector[pair[int, int]] partitions
 *     cdef int i, n=rtokens.size(), partition_size, start=0, end             # <<<<<<<<<<<<<<
 *     cdef int sim_type, comp_op_type
 * 
 */
  __pyx_v_n = __pyx_v_rtokens.size();
  __pyx_v_start = 0;

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":42
 *     cdef int sim_type, comp_op_type
 * 
 *     sim_type = get_sim_type(sim_measure)             # <<<<<<<<<<<<<<
 *     comp_op_type = get_comp_type(comp_op)
 * 
 */
  __pyx_v_sim_type = __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_sim_type(__pyx_v_sim_measure);

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":43
 * 
 *     sim_type = get_sim_type(sim_measure)
 *     comp_op_type = get_comp_type(comp_op)             # <<<<<<<<<<<<<<
 * 
 *     index = build_position_index(ltokens, sim_type, threshold, allow_empty)
 */
  __pyx_v_comp_op_type = __pyx_f_16py_stringsimjoin_5utils_12cython_utils_get_comp_type(__pyx_v_comp_op);

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":45
 *     comp_op_type = get_comp_type(comp_op)
 * 
 *     index = build_position_index(ltokens, sim_type, threshold, allow_empty)             # <<<<<<<<<<<<<<
 * 
 *     partition_size = <int>(<float> n / <float> n_jobs)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_build_position_index(__pyx_v_ltokens, __pyx_v_sim_type, __pyx_v_threshold, __pyx_v_allow_empty)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_index = ((struct __pyx_obj_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":47
 *     index = build_position_index(ltokens, sim_type, threshold, allow_empty)
 * 
 *     partition_size = <int>(<float> n / <float> n_jobs)             # <<<<<<<<<<<<<<
 *     for i in xrange(n_jobs):
 *         end = start + partition_size
 */
  if (unlikely(((float)__pyx_v_n_jobs) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_partition_size = ((int)(((float)__pyx_v_n) / ((float)__pyx_v_n_jobs)));

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":48
 * 
 *     partition_size = <int>(<float> n / <float> n_jobs)
 *     for i in xrange(n_jobs):             # <<<<<<<<<<<<<<
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:
 */
  __pyx_t_2 = __pyx_v_n_jobs;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":49
 *     partition_size = <int>(<float> n / <float> n_jobs)
 *     for i in xrange(n_jobs):
 *         end = start + partition_size             # <<<<<<<<<<<<<<
 *         if end > n or i == n_jobs - 1:
 *             end = n
 */
    __pyx_v_end = (__pyx_v_start + __pyx_v_partition_size);

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":50
 *     for i in xrange(n_jobs):
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    __pyx_t_5 = ((__pyx_v_end > __pyx_v_n) != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = ((__pyx_v_i == (__pyx_v_n_jobs - 1)) != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_4) {

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":51
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:
 *             end = n             # <<<<<<<<<<<<<<
 *         partitions.push_back(pair[int, int](start, end))
 *         start = end
 */
      __pyx_v_end = __pyx_v_n;

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":50
 *     for i in xrange(n_jobs):
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    }

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":52
 *         if end > n or i == n_jobs - 1:
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))             # <<<<<<<<<<<<<<
 *         start = end
 *         output_pairs.push_back(vector[pair[int, int]]())
 */
    try {
      __pyx_t_6 = std::pair<int,int> (__pyx_v_start, __pyx_v_end);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_partitions.push_back(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":53
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 *         start = end             # <<<<<<<<<<<<<<
 *         output_pairs.push_back(vector[pair[int, int]]())
 *         output_sim_scores.push_back(vector[double]())
 */
    __pyx_v_start = __pyx_v_end;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":54
 *         partitions.push_back(pair[int, int](start, end))
 *         start = end
 *         output_pairs.push_back(vector[pair[int, int]]())             # <<<<<<<<<<<<<<
 *         output_sim_scores.push_back(vector[double]())
 * 
 */
    try {
      __pyx_t_7 = std::vector<std::pair<int,int> > ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_output_pairs.push_back(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":55
 *         start = end
 *         output_pairs.push_back(vector[pair[int, int]]())
 *         output_sim_scores.push_back(vector[double]())             # <<<<<<<<<<<<<<
 * 
 *     # If the show_progress flag is enabled, then create a new progress bar and
 */
    try {
      __pyx_t_8 = std::vector<double> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_output_sim_scores.push_back(__pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":59
 *     # If the show_progress flag is enabled, then create a new progress bar and
 *     # assign it to the global variable.
 *     if show_progress:             # <<<<<<<<<<<<<<
 *         global _progress_bar
 *         _progress_bar = pyprind.ProgBar(partition_size)
 */
  __pyx_t_4 = (__pyx_v_show_progress != 0);
  if (__pyx_t_4) {

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":61
 *     if show_progress:
 *         global _progress_bar
 *         _progress_bar = pyprind.ProgBar(partition_size)             # <<<<<<<<<<<<<<
 * 
 *     for i in prange(n_jobs, nogil=True):
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyprind); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_ProgBar); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_partition_size); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    if (!__pyx_t_11) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_progress_bar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":59
 *     # If the show_progress flag is enabled, then create a new progress bar and
 *     # assign it to the global variable.
 *     if show_progress:             # <<<<<<<<<<<<<<
 *         global _progress_bar
 *         _progress_bar = pyprind.ProgBar(partition_size)
 */
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":63
 *         _progress_bar = pyprind.ProgBar(partition_size)
 * 
 *     for i in prange(n_jobs, nogil=True):             # <<<<<<<<<<<<<<
 *         set_sim_join_partition(partitions[i], ltokens, rtokens, sim_type,
 *                                comp_op_type, threshold, allow_empty,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {
        __pyx_t_2 = __pyx_v_n_jobs;
        if (1 == 0) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_13 = (__pyx_t_2 - 0) / 1;
            if (__pyx_t_13 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                    #endif /* _OPENMP */
                    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_13; __pyx_t_3++){
                        {
                            __pyx_v_i = 0 + 1 * __pyx_t_3;

                            /* "py_stringsimjoin/join/set_sim_join_cy.pyx":64
 * 
 *     for i in prange(n_jobs, nogil=True):
 *         set_sim_join_partition(partitions[i], ltokens, rtokens, sim_type,             # <<<<<<<<<<<<<<
 *                                comp_op_type, threshold, allow_empty,
 *                                index.index, index.size_vector, index.l_empty_ids,
 */
                            __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_set_sim_join_partition((__pyx_v_partitions[__pyx_v_i]), __pyx_v_ltokens, __pyx_v_rtokens, __pyx_v_sim_type, __pyx_v_comp_op_type, __pyx_v_threshold, __pyx_v_allow_empty, __pyx_v_index->index, __pyx_v_index->size_vector, __pyx_v_index->l_empty_ids, __pyx_v_index->min_len, __pyx_v_index->max_len, (__pyx_v_output_pairs[__pyx_v_i]), (__pyx_v_output_sim_scores[__pyx_v_i]), __pyx_v_i, __pyx_v_show_progress);
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":63
 *         _progress_bar = pyprind.ProgBar(partition_size)
 * 
 *     for i in prange(n_jobs, nogil=True):             # <<<<<<<<<<<<<<
 *         set_sim_join_partition(partitions[i], ltokens, rtokens, sim_type,
 *                                comp_op_type, threshold, allow_empty,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":27
 * 
 * 
 * cdef void set_sim_join_cy(ltable, rtable,             # <<<<<<<<<<<<<<
 *                            l_join_attr_index, r_join_attr_index,
 *                            tokenizer, sim_measure, double threshold, comp_op,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("py_stringsimjoin.join.set_sim_join_cy.set_sim_join_cy", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_index);
  __Pyx_RefNannyFinishContext();
}

/* "py_stringsimjoin/join/set_sim_join_cy.pyx":72
 * 
 * 
 * cdef void set_sim_join_partition(pair[int, int] partition,             # <<<<<<<<<<<<<<
 *                                  vector[vector[int]]& ltokens,
 *                                  vector[vector[int]]& rtokens,
 */

static void __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_set_sim_join_partition(std::pair<int,int>  __pyx_v_partition, std::vector<std::vector<int> >  &__pyx_v_ltokens, std::vector<std::vector<int> >  &__pyx_v_rtokens, int __pyx_v_sim_type, int __pyx_v_comp_op_type, double __pyx_v_threshold, bool __pyx_v_allow_empty, std::map<int,std::vector<std::pair<int,int> > >  &__pyx_v_index, std::vector<int>  &__pyx_v_size_vector, std::vector<int>  &__pyx_v_l_empty_ids, int __pyx_v_min_len, int __pyx_v_max_len, std::vector<std::pair<int,int> >  &__pyx_v_output_pairs, std::vector<double>  &__pyx_v_output_sim_scores, int __pyx_v_thread_id, bool __pyx_v_show_progress) {
  std::map<int,int>  __pyx_v_candidate_overlap;
  std::map<int,int>  __pyx_v_overlap_threshold_cache;
  std::vector<std::pair<int,int> >  __pyx_v_candidates;
  std::vector<int>  __pyx_v_tokens;
  std::pair<int,int>  __pyx_v_cand;
  std::pair<int,int>  __pyx_v_entry;
  CYTHON_UNUSED int __pyx_v_k;
  int __pyx_v_j;
  int __pyx_v_m;
  int __pyx_v_i;
  int __pyx_v_prefix_length;
  int __pyx_v_cand_num_tokens;
  int __pyx_v_current_overlap;
  int __pyx_v_overlap_upper_bound;
  int __pyx_v_size;
  int __pyx_v_size_lower_bound;
  int __pyx_v_size_upper_bound;
  double __pyx_v_sim_score;
  __pyx_t_16py_stringsimjoin_4join_15set_sim_join_cy_fnptr __pyx_v_sim_fn;
  __pyx_t_16py_stringsimjoin_5utils_12cython_utils_compfnptr __pyx_v_comp_fn;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::vector<int> ::iterator __pyx_t_5;
  int __pyx_t_6;
  std::pair<int,int>  __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  std::vector<std::pair<int,int> > ::iterator __pyx_t_10;
  std::map<int,int> ::iterator __pyx_t_11;
  std::pair<int,int>  __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_RefNannySetupContext("set_sim_join_partition", 1);

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":84
 *                                  vector[double]& output_sim_scores,
 *                                  int thread_id, bool show_progress) nogil:
 *     cdef omap[int, int] candidate_overlap, overlap_threshold_cache             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] candidates
 *     cdef vector[int] tokens
 */
  /*try:*/ {

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":88
 *     cdef vector[int] tokens
 *     cdef pair[int, int] cand, entry
 *     cdef int k=0, j=0, m, i, prefix_length, cand_num_tokens, current_overlap, overlap_upper_bound             # <<<<<<<<<<<<<<
 *     cdef int size, size_lower_bound, size_upper_bound
 *     cdef double sim_score, overlap_score
 */
    __pyx_v_k = 0;
    __pyx_v_j = 0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":93
 *     cdef fnptr sim_fn
 *     cdef compfnptr comp_fn
 *     sim_fn = get_sim_function(sim_type)             # <<<<<<<<<<<<<<
 *     comp_fn = get_comparison_function(comp_op_type)
 * 
 */
    __pyx_v_sim_fn = __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_sim_function(__pyx_v_sim_type);

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":94
 *     cdef compfnptr comp_fn
 *     sim_fn = get_sim_function(sim_type)
 *     comp_fn = get_comparison_function(comp_op_type)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(partition.first, partition.second):
 */
    __pyx_v_comp_fn = __pyx_f_16py_stringsimjoin_5utils_12cython_utils_get_comparison_function(__pyx_v_comp_op_type);

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":96
 *     comp_fn = get_comparison_function(comp_op_type)
 * 
 *     for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *         tokens = rtokens[i]
 *         m = tokens.size()
 */
    __pyx_t_1 = __pyx_v_partition.second;
    for (__pyx_t_2 = __pyx_v_partition.first; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
      __pyx_v_i = __pyx_t_2;

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":97
 * 
 *     for i in range(partition.first, partition.second):
 *         tokens = rtokens[i]             # <<<<<<<<<<<<<<
 *         m = tokens.size()
 * 
 */
      __pyx_v_tokens = (__pyx_v_rtokens[__pyx_v_i]);

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":98
 *     for i in range(partition.first, partition.second):
 *         tokens = rtokens[i]
 *         m = tokens.size()             # <<<<<<<<<<<<<<
 * 
 *         if allow_empty and m == 0:
 */
      __pyx_v_m = __pyx_v_tokens.size();

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":100
 *         m = tokens.size()
 * 
 *         if allow_empty and m == 0:             # <<<<<<<<<<<<<<
 *             for j in l_empty_ids:
 *                 output_pairs.push_back(pair[int, int](j, i))
 */
      __pyx_t_4 = (__pyx_v_allow_empty != 0);
      if (__pyx_t_4) {
      } else {
        __pyx_t_3 = __pyx_t_4;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_4 = ((__pyx_v_m == 0) != 0);
      __pyx_t_3 = __pyx_t_4;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_3) {

        /* "py_stringsimjoin/join/set_sim_join_cy.pyx":101
 * 
 *         if allow_empty and m == 0:
 *             for j in l_empty_ids:             # <<<<<<<<<<<<<<
 *                 output_pairs.push_back(pair[int, int](j, i))
 *                 output_sim_scores.push_back(1.0)
 */
        __pyx_t_5 = __pyx_v_l_empty_ids.begin();
        for (;;) {
          if (!(__pyx_t_5 != __pyx_v_l_empty_ids.end())) break;
          __pyx_t_6 = *__pyx_t_5;
          ++__pyx_t_5;
          __pyx_v_j = __pyx_t_6;

          /* "py_stringsimjoin/join/set_sim_join_cy.pyx":102
 *         if allow_empty and m == 0:
 *             for j in l_empty_ids:
 *                 output_pairs.push_back(pair[int, int](j, i))             # <<<<<<<<<<<<<<
 *                 output_sim_scores.push_back(1.0)
 *             continue
 */
          try {
            __pyx_t_7 = std::pair<int,int> (__pyx_v_j, __pyx_v_i);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          }
          try {
            __pyx_v_output_pairs.push_back(__pyx_t_7);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          }

          /* "py_stringsimjoin/join/set_sim_join_cy.pyx":103
 *             for j in l_empty_ids:
 *                 output_pairs.push_back(pair[int, int](j, i))
 *                 output_sim_scores.push_back(1.0)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
          try {
            __pyx_v_output_sim_scores.push_back(1.0);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          }

          /* "py_stringsimjoin/join/set_sim_join_cy.pyx":101
 * 
 *         if allow_empty and m == 0:
 *             for j in l_empty_ids:             # <<<<<<<<<<<<<<
 *                 output_pairs.push_back(pair[int, int](j, i))
 *                 output_sim_scores.push_back(1.0)
 */
        }

        /* "py_stringsimjoin/join/set_sim_join_cy.pyx":104
 *                 output_pairs.push_back(pair[int, int](j, i))
 *                 output_sim_scores.push_back(1.0)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         prefix_length = get_prefix_length(m, sim_type, threshold)
 */
        goto __pyx_L6_continue;

        /* "py_stringsimjoin/join/set_sim_join_cy.pyx":100
 *         m = tokens.size()
 * 
 *         if allow_empty and m == 0:             # <<<<<<<<<<<<<<
 *             for j in l_empty_ids:
 *                 output_pairs.push_back(pair[int, int](j, i))
 */
      }

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":106
 *             continue
 * 
 *         prefix_length = get_prefix_length(m, sim_type, threshold)             # <<<<<<<<<<<<<<
 *         size_lower_bound = int_max(get_size_lower_bound(m, sim_type, threshold),
 *                                    min_len)
 */
      __pyx_v_prefix_length = __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_prefix_length(__pyx_v_m, __pyx_v_sim_type, __pyx_v_threshold);

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":107
 * 
 *         prefix_length = get_prefix_length(m, sim_type, threshold)
 *         size_lower_bound = int_max(get_size_lower_bound(m, sim_type, threshold),             # <<<<<<<<<<<<<<
 *                                    min_len)
 *         size_upper_bound = int_min(get_size_upper_bound(m, sim_type, threshold),
 */
      __pyx_v_size_lower_bound = __pyx_f_16py_stringsimjoin_5utils_12cython_utils_int_max(__pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_size_lower_bound(__pyx_v_m, __pyx_v_sim_type, __pyx_v_threshold), __pyx_v_min_len);

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":109
 *         size_lower_bound = int_max(get_size_lower_bound(m, sim_type, threshold),
 *                                    min_len)
 *         size_upper_bound = int_min(get_size_upper_bound(m, sim_type, threshold),             # <<<<<<<<<<<<<<
 *                                    max_len)
 * 
 */
      __pyx_v_size_upper_bound = __pyx_f_16py_stringsimjoin_5utils_12cython_utils_int_min(__pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_size_upper_bound(__pyx_v_m, __pyx_v_sim_type, __pyx_v_threshold), __pyx_v_max_len);

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":112
 *                                    max_len)
 * 
 *         for size in range(size_lower_bound, size_upper_bound + 1):             # <<<<<<<<<<<<<<
 *             overlap_threshold_cache[size] = get_overlap_threshold(size, m, sim_type, threshold)
 * 
 */
      __pyx_t_8 = (__pyx_v_size_upper_bound + 1);
      for (__pyx_t_6 = __pyx_v_size_lower_bound; __pyx_t_6 < __pyx_t_8; __pyx_t_6+=1) {
        __pyx_v_size = __pyx_t_6;

        /* "py_stringsimjoin/join/set_sim_join_cy.pyx":113
 * 
 *         for size in range(size_lower_bound, size_upper_bound + 1):
 *             overlap_threshold_cache[size] = get_overlap_threshold(size, m, sim_type, threshold)             # <<<<<<<<<<<<<<
 * 
 *         for j in range(prefix_length):
 */
        (__pyx_v_overlap_threshold_cache[__pyx_v_size]) = __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_overlap_threshold(__pyx_v_size, __pyx_v_m, __pyx_v_sim_type, __pyx_v_threshold);
      }

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":115
 *             overlap_threshold_cache[size] = get_overlap_threshold(size, m, sim_type, threshold)
 * 
 *         for j in range(prefix_length):             # <<<<<<<<<<<<<<
 *             if index.find(tokens[j]) == index.end():
 *                 continue
 */
      __pyx_t_6 = __pyx_v_prefix_length;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_6; __pyx_t_9+=1) {
        __pyx_v_j = __pyx_t_9;

        /* "py_stringsimjoin/join/set_sim_join_cy.pyx":116
 * 
 *         for j in range(prefix_length):
 *             if index.find(tokens[j]) == index.end():             # <<<<<<<<<<<<<<
 *                 continue
 *             candidates = index[tokens[j]]
 */
        __pyx_t_3 = ((__pyx_v_index.find((__pyx_v_tokens[__pyx_v_j])) == __pyx_v_index.end()) != 0);
        if (__pyx_t_3) {

          /* "py_stringsimjoin/join/set_sim_join_cy.pyx":117
 *         for j in range(prefix_length):
 *             if index.find(tokens[j]) == index.end():
 *                 continue             # <<<<<<<<<<<<<<
 *             candidates = index[tokens[j]]
 *             for cand in candidates:
 */
          goto __pyx_L15_continue;

          /* "py_stringsimjoin/join/set_sim_join_cy.pyx":116
 * 
 *         for j in range(prefix_length):
 *             if index.find(tokens[j]) == index.end():             # <<<<<<<<<<<<<<
 *                 continue
 *             candidates = index[tokens[j]]
 */
        }

        /* "py_stringsimjoin/join/set_sim_join_cy.pyx":118
 *             if index.find(tokens[j]) == index.end():
 *                 continue
 *             candidates = index[tokens[j]]             # <<<<<<<<<<<<<<
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]
 */
        __pyx_v_candidates = (__pyx_v_index[(__pyx_v_tokens[__pyx_v_j])]);

        /* "py_stringsimjoin/join/set_sim_join_cy.pyx":119
 *                 continue
 *             candidates = index[tokens[j]]
 *             for cand in candidates:             # <<<<<<<<<<<<<<
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:
 */
        __pyx_t_10 = __pyx_v_candidates.begin();
        for (;;) {
          if (!(__pyx_t_10 != __pyx_v_candidates.end())) break;
          __pyx_t_7 = *__pyx_t_10;
          ++__pyx_t_10;
          __pyx_v_cand = __pyx_t_7;

          /* "py_stringsimjoin/join/set_sim_join_cy.pyx":120
 *             candidates = index[tokens[j]]
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]             # <<<<<<<<<<<<<<
 *                 if current_overlap != -1:
 *                     cand_num_tokens = size_vector[cand.first]
 */
          __pyx_v_current_overlap = (__pyx_v_candidate_overlap[__pyx_v_cand.first]);

          /* "py_stringsimjoin/join/set_sim_join_cy.pyx":121
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:             # <<<<<<<<<<<<<<
 *                     cand_num_tokens = size_vector[cand.first]
 * 
 */
          __pyx_t_3 = ((__pyx_v_current_overlap != -1L) != 0);
          if (__pyx_t_3) {

            /* "py_stringsimjoin/join/set_sim_join_cy.pyx":122
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:
 *                     cand_num_tokens = size_vector[cand.first]             # <<<<<<<<<<<<<<
 * 
 *                     # only consider candidates satisfying the size filter
 */
            __pyx_v_cand_num_tokens = (__pyx_v_size_vector[__pyx_v_cand.first]);

            /* "py_stringsimjoin/join/set_sim_join_cy.pyx":126
 *                     # only consider candidates satisfying the size filter
 *                     # condition.
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:             # <<<<<<<<<<<<<<
 * 
 *                         if m - j <= cand_num_tokens - cand.second:
 */
            __pyx_t_3 = (__pyx_v_size_lower_bound <= __pyx_v_cand_num_tokens);
            if (__pyx_t_3) {
              __pyx_t_3 = (__pyx_v_cand_num_tokens <= __pyx_v_size_upper_bound);
            }
            __pyx_t_4 = (__pyx_t_3 != 0);
            if (__pyx_t_4) {

              /* "py_stringsimjoin/join/set_sim_join_cy.pyx":128
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:
 * 
 *                         if m - j <= cand_num_tokens - cand.second:             # <<<<<<<<<<<<<<
 *                             overlap_upper_bound = m - j
 *                         else:
 */
              __pyx_t_4 = (((__pyx_v_m - __pyx_v_j) <= (__pyx_v_cand_num_tokens - __pyx_v_cand.second)) != 0);
              if (__pyx_t_4) {

                /* "py_stringsimjoin/join/set_sim_join_cy.pyx":129
 * 
 *                         if m - j <= cand_num_tokens - cand.second:
 *                             overlap_upper_bound = m - j             # <<<<<<<<<<<<<<
 *                         else:
 *                             overlap_upper_bound = cand_num_tokens - cand.second
 */
                __pyx_v_overlap_upper_bound = (__pyx_v_m - __pyx_v_j);

                /* "py_stringsimjoin/join/set_sim_join_cy.pyx":128
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:
 * 
 *                         if m - j <= cand_num_tokens - cand.second:             # <<<<<<<<<<<<<<
 *                             overlap_upper_bound = m - j
 *                         else:
 */
                goto __pyx_L22;
              }

              /* "py_stringsimjoin/join/set_sim_join_cy.pyx":131
 *                             overlap_upper_bound = m - j
 *                         else:
 *                             overlap_upper_bound = cand_num_tokens - cand.second             # <<<<<<<<<<<<<<
 * 
 *                         # only consider candidates for which the overlap upper
 */
              /*else*/ {
                __pyx_v_overlap_upper_bound = (__pyx_v_cand_num_tokens - __pyx_v_cand.second);
              }
              __pyx_L22:;

              /* "py_stringsimjoin/join/set_sim_join_cy.pyx":135
 *                         # only consider candidates for which the overlap upper
 *                         # bound is at least the required overlap.
 *                         if (current_overlap + overlap_upper_bound >=             # <<<<<<<<<<<<<<
 *                                 overlap_threshold_cache[cand_num_tokens]):
 *                             candidate_overlap[cand.first] = current_overlap + 1
 */
              __pyx_t_4 = (((__pyx_v_current_overlap + __pyx_v_overlap_upper_bound) >= (__pyx_v_overlap_threshold_cache[__pyx_v_cand_num_tokens])) != 0);
              if (__pyx_t_4) {

                /* "py_stringsimjoin/join/set_sim_join_cy.pyx":137
 *                         if (current_overlap + overlap_upper_bound >=
 *                                 overlap_threshold_cache[cand_num_tokens]):
 *                             candidate_overlap[cand.first] = current_overlap + 1             # <<<<<<<<<<<<<<
 *                         else:
 *                             candidate_overlap[cand.first] = -1
 */
                (__pyx_v_candidate_overlap[__pyx_v_cand.first]) = (__pyx_v_current_overlap + 1);

                /* "py_stringsimjoin/join/set_sim_join_cy.pyx":135
 *                         # only consider candidates for which the overlap upper
 *                         # bound is at least the required overlap.
 *                         if (current_overlap + overlap_upper_bound >=             # <<<<<<<<<<<<<<
 *                                 overlap_threshold_cache[cand_num_tokens]):
 *                             candidate_overlap[cand.first] = current_overlap + 1
 */
                goto __pyx_L23;
              }

              /* "py_stringsimjoin/join/set_sim_join_cy.pyx":139
 *                             candidate_overlap[cand.first] = current_overlap + 1
 *                         else:
 *                             candidate_overlap[cand.first] = -1             # <<<<<<<<<<<<<<
 * 
 *         for entry in candidate_overlap:
 */
              /*else*/ {
                (__pyx_v_candidate_overlap[__pyx_v_cand.first]) = -1;
              }
              __pyx_L23:;

              /* "py_stringsimjoin/join/set_sim_join_cy.pyx":126
 *                     # only consider candidates satisfying the size filter
 *                     # condition.
 *                     if size_lower_bound <= cand_num_tokens <= size_upper_bound:             # <<<<<<<<<<<<<<
 * 
 *                         if m - j <= cand_num_tokens - cand.second:
 */
            }

            /* "py_stringsimjoin/join/set_sim_join_cy.pyx":121
 *             for cand in candidates:
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:             # <<<<<<<<<<<<<<
 *                     cand_num_tokens = size_vector[cand.first]
 * 
 */
          }

          /* "py_stringsimjoin/join/set_sim_join_cy.pyx":119
 *                 continue
 *             candidates = index[tokens[j]]
 *             for cand in candidates:             # <<<<<<<<<<<<<<
 *                 current_overlap = candidate_overlap[cand.first]
 *                 if current_overlap != -1:
 */
        }
        __pyx_L15_continue:;
      }

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":141
 *                             candidate_overlap[cand.first] = -1
 * 
 *         for entry in candidate_overlap:             # <<<<<<<<<<<<<<
 *             if entry.second > 0:
 *                 sim_score = sim_fn(ltokens[entry.first], tokens)
 */
      __pyx_t_11 = __pyx_v_candidate_overlap.begin();
      for (;;) {
        if (!(__pyx_t_11 != __pyx_v_candidate_overlap.end())) break;
        __pyx_t_12 = *__pyx_t_11;
        ++__pyx_t_11;
        __pyx_v_entry = __pyx_t_12;

        /* "py_stringsimjoin/join/set_sim_join_cy.pyx":142
 * 
 *         for entry in candidate_overlap:
 *             if entry.second > 0:             # <<<<<<<<<<<<<<
 *                 sim_score = sim_fn(ltokens[entry.first], tokens)
 * 
 */
        __pyx_t_4 = ((__pyx_v_entry.second > 0) != 0);
        if (__pyx_t_4) {

          /* "py_stringsimjoin/join/set_sim_join_cy.pyx":143
 *         for entry in candidate_overlap:
 *             if entry.second > 0:
 *                 sim_score = sim_fn(ltokens[entry.first], tokens)             # <<<<<<<<<<<<<<
 * 
 *                 if comp_fn(sim_score, threshold):
 */
          __pyx_v_sim_score = __pyx_v_sim_fn((__pyx_v_ltokens[__pyx_v_entry.first]), __pyx_v_tokens);

          /* "py_stringsimjoin/join/set_sim_join_cy.pyx":145
 *                 sim_score = sim_fn(ltokens[entry.first], tokens)
 * 
 *                 if comp_fn(sim_score, threshold):             # <<<<<<<<<<<<<<
 *                     output_pairs.push_back(pair[int, int](entry.first, i))
 *                     output_sim_scores.push_back(sim_score)
 */
          __pyx_t_4 = (__pyx_v_comp_fn(__pyx_v_sim_score, __pyx_v_threshold) != 0);
          if (__pyx_t_4) {

            /* "py_stringsimjoin/join/set_sim_join_cy.pyx":146
 * 
 *                 if comp_fn(sim_score, threshold):
 *                     output_pairs.push_back(pair[int, int](entry.first, i))             # <<<<<<<<<<<<<<
 *                     output_sim_scores.push_back(sim_score)
 * 
 */
            try {
              __pyx_t_7 = std::pair<int,int> (__pyx_v_entry.first, __pyx_v_i);
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            }
            try {
              __pyx_v_output_pairs.push_back(__pyx_t_7);
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            }

            /* "py_stringsimjoin/join/set_sim_join_cy.pyx":147
 *                 if comp_fn(sim_score, threshold):
 *                     output_pairs.push_back(pair[int, int](entry.first, i))
 *                     output_sim_scores.push_back(sim_score)             # <<<<<<<<<<<<<<
 * 
 *         candidate_overlap.clear()
 */
            try {
              __pyx_v_output_sim_scores.push_back(__pyx_v_sim_score);
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            }

            /* "py_stringsimjoin/join/set_sim_join_cy.pyx":145
 *                 sim_score = sim_fn(ltokens[entry.first], tokens)
 * 
 *                 if comp_fn(sim_score, threshold):             # <<<<<<<<<<<<<<
 *                     output_pairs.push_back(pair[int, int](entry.first, i))
 *                     output_sim_scores.push_back(sim_score)
 */
          }

          /* "py_stringsimjoin/join/set_sim_join_cy.pyx":142
 * 
 *         for entry in candidate_overlap:
 *             if entry.second > 0:             # <<<<<<<<<<<<<<
 *                 sim_score = sim_fn(ltokens[entry.first], tokens)
 * 
 */
        }

        /* "py_stringsimjoin/join/set_sim_join_cy.pyx":141
 *                             candidate_overlap[cand.first] = -1
 * 
 *         for entry in candidate_overlap:             # <<<<<<<<<<<<<<
 *             if entry.second > 0:
 *                 sim_score = sim_fn(ltokens[entry.first], tokens)
 */
      }

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":149
 *                     output_sim_scores.push_back(sim_score)
 * 
 *         candidate_overlap.clear()             # <<<<<<<<<<<<<<
 *         overlap_threshold_cache.clear()
 * 
 */
      __pyx_v_candidate_overlap.clear();

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":150
 * 
 *         candidate_overlap.clear()
 *         overlap_threshold_cache.clear()             # <<<<<<<<<<<<<<
 * 
 *         # If the show_progress flag is enabled, we update the progress bar.
 */
      __pyx_v_overlap_threshold_cache.clear();

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":156
 *         # do so, it releases GIL and updates the global variable that keeps
 *         # track of the progress bar.
 *         if thread_id == 0 and show_progress:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 global _progress_bar
 */
      __pyx_t_3 = ((__pyx_v_thread_id == 0) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_4 = __pyx_t_3;
        goto __pyx_L29_bool_binop_done;
      }
      __pyx_t_3 = (__pyx_v_show_progress != 0);
      __pyx_t_4 = __pyx_t_3;
      __pyx_L29_bool_binop_done:;
      if (__pyx_t_4) {

        /* "py_stringsimjoin/join/set_sim_join_cy.pyx":157
 *         # track of the progress bar.
 *         if thread_id == 0 and show_progress:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 global _progress_bar
 *                 _progress_bar.update()
 */
        {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            /*try:*/ {

              /* "py_stringsimjoin/join/set_sim_join_cy.pyx":159
 *             with gil:
 *                 global _progress_bar
 *                 _progress_bar.update()             # <<<<<<<<<<<<<<
 * 
 * 
 */
              __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_progress_bar); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L34_error;}
              __Pyx_GOTREF(__pyx_t_14);
              __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_update); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L34_error;}
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __pyx_t_14 = NULL;
              if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_15))) {
                __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_15);
                if (likely(__pyx_t_14)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                  __Pyx_INCREF(__pyx_t_14);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_15, function);
                }
              }
              if (__pyx_t_14) {
                __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_14); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L34_error;}
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              } else {
                __pyx_t_13 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L34_error;}
              }
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            }

            /* "py_stringsimjoin/join/set_sim_join_cy.pyx":157
 *         # track of the progress bar.
 *         if thread_id == 0 and show_progress:
 *             with gil:             # <<<<<<<<<<<<<<
 *                 global _progress_bar
 *                 _progress_bar.update()
 */
            /*finally:*/ {
              /*normal exit:*/{
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                goto __pyx_L35;
              }
              __pyx_L34_error: {
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                goto __pyx_L4_error;
              }
              __pyx_L35:;
            }
        }

        /* "py_stringsimjoin/join/set_sim_join_cy.pyx":156
 *         # do so, it releases GIL and updates the global variable that keeps
 *         # track of the progress bar.
 *         if thread_id == 0 and show_progress:             # <<<<<<<<<<<<<<
 *             with gil:
 *                 global _progress_bar
 */
      }
      __pyx_L6_continue:;
    }
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":84
 *                                  vector[double]& output_sim_scores,
 *                                  int thread_id, bool show_progress) nogil:
 *     cdef omap[int, int] candidate_overlap, overlap_threshold_cache             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] candidates
 *     cdef vector[int] tokens
 */
  /*finally:*/ {
    /*normal exit:*/{
      #ifdef WITH_THREAD
      __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      goto __pyx_L5;
    }
    __pyx_L4_error: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":72
 * 
 * 
 * cdef void set_sim_join_partition(pair[int, int] partition,             # <<<<<<<<<<<<<<
 *                                  vector[vector[int]]& ltokens,
 *                                  vector[vector[int]]& rtokens,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_WriteUnraisable("py_stringsimjoin.join.set_sim_join_cy.set_sim_join_partition", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "py_stringsimjoin/join/set_sim_join_cy.pyx":162
 * 
 * 
 * cdef PositionIndexCy build_position_index(vector[vector[int]]& token_vectors,             # <<<<<<<<<<<<<<
 *                                int& sim_type, double& threshold,
 *                                bool allow_empty):
 */

static struct __pyx_obj_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy *__pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_build_position_index(std::vector<std::vector<int> >  &__pyx_v_token_vectors, int &__pyx_v_sim_type, double &__pyx_v_threshold, bool __pyx_v_allow_empty) {
  struct __pyx_obj_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy *__pyx_v_pos_index = 0;
  std::vector<int>  __pyx_v_tokens;
  std::vector<int>  __pyx_v_size_vector;
  int __pyx_v_prefix_length;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_min_len;
  int __pyx_v_max_len;
  std::map<int,std::vector<std::pair<int,int> > >  __pyx_v_index;
  std::vector<int>  __pyx_v_empty_l_ids;
  struct __pyx_obj_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  std::pair<int,int>  __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("build_position_index", 0);

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":165
 *                                int& sim_type, double& threshold,
 *                                bool allow_empty):
 *     cdef PositionIndexCy pos_index = PositionIndexCy()             # <<<<<<<<<<<<<<
 *     cdef vector[int] tokens, size_vector
 *     cdef int prefix_length, token, i, j, m, n=token_vectors.size(), min_len=100000, max_len=0
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pos_index = ((struct __pyx_obj_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":167
 *     cdef PositionIndexCy pos_index = PositionIndexCy()
 *     cdef vector[int] tokens, size_vector
 *     cdef int prefix_length, token, i, j, m, n=token_vectors.size(), min_len=100000, max_len=0             # <<<<<<<<<<<<<<
 *     cdef omap[int, vector[pair[int, int]]] index
 *     cdef vector[int] empty_l_ids
 */
  __pyx_v_n = __pyx_v_token_vectors.size();
  __pyx_v_min_len = 0x186A0;
  __pyx_v_max_len = 0;

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":170
 *     cdef omap[int, vector[pair[int, int]]] index
 *     cdef vector[int] empty_l_ids
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         tokens = token_vectors[i]
 *         m = tokens.size()
 */
  __pyx_t_2 = __pyx_v_n;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":171
 *     cdef vector[int] empty_l_ids
 *     for i in range(n):
 *         tokens = token_vectors[i]             # <<<<<<<<<<<<<<
 *         m = tokens.size()
 *         size_vector.push_back(m)
 */
    __pyx_v_tokens = (__pyx_v_token_vectors[__pyx_v_i]);

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":172
 *     for i in range(n):
 *         tokens = token_vectors[i]
 *         m = tokens.size()             # <<<<<<<<<<<<<<
 *         size_vector.push_back(m)
 *         prefix_length = get_prefix_length(m, sim_type, threshold)
 */
    __pyx_v_m = __pyx_v_tokens.size();

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":173
 *         tokens = token_vectors[i]
 *         m = tokens.size()
 *         size_vector.push_back(m)             # <<<<<<<<<<<<<<
 *         prefix_length = get_prefix_length(m, sim_type, threshold)
 *         for j in range(prefix_length):
 */
    try {
      __pyx_v_size_vector.push_back(__pyx_v_m);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":174
 *         m = tokens.size()
 *         size_vector.push_back(m)
 *         prefix_length = get_prefix_length(m, sim_type, threshold)             # <<<<<<<<<<<<<<
 *         for j in range(prefix_length):
 *             index[tokens[j]].push_back(pair[int, int](i, j))
 */
    __pyx_v_prefix_length = __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_prefix_length(__pyx_v_m, __pyx_v_sim_type, __pyx_v_threshold);

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":175
 *         size_vector.push_back(m)
 *         prefix_length = get_prefix_length(m, sim_type, threshold)
 *         for j in range(prefix_length):             # <<<<<<<<<<<<<<
 *             index[tokens[j]].push_back(pair[int, int](i, j))
 *         if m > max_len:
 */
    __pyx_t_4 = __pyx_v_prefix_length;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_j = __pyx_t_5;

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":176
 *         prefix_length = get_prefix_length(m, sim_type, threshold)
 *         for j in range(prefix_length):
 *             index[tokens[j]].push_back(pair[int, int](i, j))             # <<<<<<<<<<<<<<
 *         if m > max_len:
 *             max_len = m
 */
      try {
        __pyx_t_6 = std::pair<int,int> (__pyx_v_i, __pyx_v_j);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_index[(__pyx_v_tokens[__pyx_v_j])]).push_back(__pyx_t_6);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":177
 *         for j in range(prefix_length):
 *             index[tokens[j]].push_back(pair[int, int](i, j))
 *         if m > max_len:             # <<<<<<<<<<<<<<
 *             max_len = m
 *         if m < min_len:
 */
    __pyx_t_7 = ((__pyx_v_m > __pyx_v_max_len) != 0);
    if (__pyx_t_7) {

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":178
 *             index[tokens[j]].push_back(pair[int, int](i, j))
 *         if m > max_len:
 *             max_len = m             # <<<<<<<<<<<<<<
 *         if m < min_len:
 *             min_len = m
 */
      __pyx_v_max_len = __pyx_v_m;

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":177
 *         for j in range(prefix_length):
 *             index[tokens[j]].push_back(pair[int, int](i, j))
 *         if m > max_len:             # <<<<<<<<<<<<<<
 *             max_len = m
 *         if m < min_len:
 */
    }

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":179
 *         if m > max_len:
 *             max_len = m
 *         if m < min_len:             # <<<<<<<<<<<<<<
 *             min_len = m
 *         if allow_empty and m == 0:
 */
    __pyx_t_7 = ((__pyx_v_m < __pyx_v_min_len) != 0);
    if (__pyx_t_7) {

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":180
 *             max_len = m
 *         if m < min_len:
 *             min_len = m             # <<<<<<<<<<<<<<
 *         if allow_empty and m == 0:
 *             empty_l_ids.push_back(i)
 */
      __pyx_v_min_len = __pyx_v_m;

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":179
 *         if m > max_len:
 *             max_len = m
 *         if m < min_len:             # <<<<<<<<<<<<<<
 *             min_len = m
 *         if allow_empty and m == 0:
 */
    }

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":181
 *         if m < min_len:
 *             min_len = m
 *         if allow_empty and m == 0:             # <<<<<<<<<<<<<<
 *             empty_l_ids.push_back(i)
 * 
 */
    __pyx_t_8 = (__pyx_v_allow_empty != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_8 = ((__pyx_v_m == 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_7) {

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":182
 *             min_len = m
 *         if allow_empty and m == 0:
 *             empty_l_ids.push_back(i)             # <<<<<<<<<<<<<<
 * 
 *     pos_index.set_fields(index, size_vector, empty_l_ids,
 */
      try {
        __pyx_v_empty_l_ids.push_back(__pyx_v_i);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "py_stringsimjoin/join/set_sim_join_cy.pyx":181
 *         if m < min_len:
 *             min_len = m
 *         if allow_empty and m == 0:             # <<<<<<<<<<<<<<
 *             empty_l_ids.push_back(i)
 * 
 */
    }
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":184
 *             empty_l_ids.push_back(i)
 * 
 *     pos_index.set_fields(index, size_vector, empty_l_ids,             # <<<<<<<<<<<<<<
 *                          min_len, max_len, threshold)
 *     return pos_index
 */
  ((struct __pyx_vtabstruct_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy *)__pyx_v_pos_index->__pyx_vtab)->set_fields(__pyx_v_pos_index, __pyx_v_index, __pyx_v_size_vector, __pyx_v_empty_l_ids, __pyx_v_min_len, __pyx_v_max_len, __pyx_v_threshold);

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":186
 *     pos_index.set_fields(index, size_vector, empty_l_ids,
 *                          min_len, max_len, threshold)
 *     return pos_index             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_pos_index));
  __pyx_r = __pyx_v_pos_index;
  goto __pyx_L0;

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":162
 * 
 * 
 * cdef PositionIndexCy build_position_index(vector[vector[int]]& token_vectors,             # <<<<<<<<<<<<<<
 *                                int& sim_type, double& threshold,
 *                                bool allow_empty):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_stringsimjoin.join.set_sim_join_cy.build_position_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pos_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_stringsimjoin/join/set_sim_join_cy.pyx":189
 * 
 * 
 * cdef int get_prefix_length(int& num_tokens, int& sim_type, double& threshold) nogil:             # <<<<<<<<<<<<<<
 *     if sim_type == 0: # COSINE
 *         return <int>(num_tokens - ceil(threshold * threshold * num_tokens) + 1.0)
 */

static int __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_prefix_length(int &__pyx_v_num_tokens, int &__pyx_v_sim_type, double &__pyx_v_threshold) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":190
 * 
 * cdef int get_prefix_length(int& num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE             # <<<<<<<<<<<<<<
 *         return <int>(num_tokens - ceil(threshold * threshold * num_tokens) + 1.0)
 *     elif sim_type == 1: # DICE
 */
  switch (__pyx_v_sim_type) {
    case 0:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":191
 * cdef int get_prefix_length(int& num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE
 *         return <int>(num_tokens - ceil(threshold * threshold * num_tokens) + 1.0)             # <<<<<<<<<<<<<<
 *     elif sim_type == 1: # DICE
 *         return <int>(num_tokens - ceil((threshold / (2 - threshold)) * num_tokens) + 1.0)
 */
    __pyx_r = ((int)((__pyx_v_num_tokens - ceil(((__pyx_v_threshold * __pyx_v_threshold) * __pyx_v_num_tokens))) + 1.0));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":190
 * 
 * cdef int get_prefix_length(int& num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE             # <<<<<<<<<<<<<<
 *         return <int>(num_tokens - ceil(threshold * threshold * num_tokens) + 1.0)
 *     elif sim_type == 1: # DICE
 */
    break;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":192
 *     if sim_type == 0: # COSINE
 *         return <int>(num_tokens - ceil(threshold * threshold * num_tokens) + 1.0)
 *     elif sim_type == 1: # DICE             # <<<<<<<<<<<<<<
 *         return <int>(num_tokens - ceil((threshold / (2 - threshold)) * num_tokens) + 1.0)
 *     elif sim_type == 2: # JACCARD:
 */
    case 1:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":193
 *         return <int>(num_tokens - ceil(threshold * threshold * num_tokens) + 1.0)
 *     elif sim_type == 1: # DICE
 *         return <int>(num_tokens - ceil((threshold / (2 - threshold)) * num_tokens) + 1.0)             # <<<<<<<<<<<<<<
 *     elif sim_type == 2: # JACCARD:
 *         return <int>(num_tokens - ceil(threshold * num_tokens) + 1.0)
 */
    __pyx_t_1 = (2.0 - __pyx_v_threshold);
    if (unlikely(__pyx_t_1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_r = ((int)((__pyx_v_num_tokens - ceil(((__pyx_v_threshold / __pyx_t_1) * __pyx_v_num_tokens))) + 1.0));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":192
 *     if sim_type == 0: # COSINE
 *         return <int>(num_tokens - ceil(threshold * threshold * num_tokens) + 1.0)
 *     elif sim_type == 1: # DICE             # <<<<<<<<<<<<<<
 *         return <int>(num_tokens - ceil((threshold / (2 - threshold)) * num_tokens) + 1.0)
 *     elif sim_type == 2: # JACCARD:
 */
    break;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":194
 *     elif sim_type == 1: # DICE
 *         return <int>(num_tokens - ceil((threshold / (2 - threshold)) * num_tokens) + 1.0)
 *     elif sim_type == 2: # JACCARD:             # <<<<<<<<<<<<<<
 *         return <int>(num_tokens - ceil(threshold * num_tokens) + 1.0)
 * 
 */
    case 2:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":195
 *         return <int>(num_tokens - ceil((threshold / (2 - threshold)) * num_tokens) + 1.0)
 *     elif sim_type == 2: # JACCARD:
 *         return <int>(num_tokens - ceil(threshold * num_tokens) + 1.0)             # <<<<<<<<<<<<<<
 * 
 * cdef int get_size_lower_bound(int& num_tokens, int& sim_type, double& threshold) nogil:
 */
    __pyx_r = ((int)((__pyx_v_num_tokens - ceil((__pyx_v_threshold * __pyx_v_num_tokens))) + 1.0));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":194
 *     elif sim_type == 1: # DICE
 *         return <int>(num_tokens - ceil((threshold / (2 - threshold)) * num_tokens) + 1.0)
 *     elif sim_type == 2: # JACCARD:             # <<<<<<<<<<<<<<
 *         return <int>(num_tokens - ceil(threshold * num_tokens) + 1.0)
 * 
 */
    break;
    default: break;
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":189
 * 
 * 
 * cdef int get_prefix_length(int& num_tokens, int& sim_type, double& threshold) nogil:             # <<<<<<<<<<<<<<
 *     if sim_type == 0: # COSINE
 *         return <int>(num_tokens - ceil(threshold * threshold * num_tokens) + 1.0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("py_stringsimjoin.join.set_sim_join_cy.get_prefix_length", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "py_stringsimjoin/join/set_sim_join_cy.pyx":197
 *         return <int>(num_tokens - ceil(threshold * num_tokens) + 1.0)
 * 
 * cdef int get_size_lower_bound(int& num_tokens, int& sim_type, double& threshold) nogil:             # <<<<<<<<<<<<<<
 *     if sim_type == 0: # COSINE
 *         return <int>ceil(threshold * threshold * num_tokens)
 */

static int __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_size_lower_bound(int &__pyx_v_num_tokens, int &__pyx_v_sim_type, double &__pyx_v_threshold) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":198
 * 
 * cdef int get_size_lower_bound(int& num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE             # <<<<<<<<<<<<<<
 *         return <int>ceil(threshold * threshold * num_tokens)
 *     elif sim_type == 1: # DICE
 */
  switch (__pyx_v_sim_type) {
    case 0:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":199
 * cdef int get_size_lower_bound(int& num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE
 *         return <int>ceil(threshold * threshold * num_tokens)             # <<<<<<<<<<<<<<
 *     elif sim_type == 1: # DICE
 *         return <int>ceil((threshold / (2 - threshold)) * num_tokens)
 */
    __pyx_r = ((int)ceil(((__pyx_v_threshold * __pyx_v_threshold) * __pyx_v_num_tokens)));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":198
 * 
 * cdef int get_size_lower_bound(int& num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE             # <<<<<<<<<<<<<<
 *         return <int>ceil(threshold * threshold * num_tokens)
 *     elif sim_type == 1: # DICE
 */
    break;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":200
 *     if sim_type == 0: # COSINE
 *         return <int>ceil(threshold * threshold * num_tokens)
 *     elif sim_type == 1: # DICE             # <<<<<<<<<<<<<<
 *         return <int>ceil((threshold / (2 - threshold)) * num_tokens)
 *     elif sim_type == 2: # JACCARD:
 */
    case 1:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":201
 *         return <int>ceil(threshold * threshold * num_tokens)
 *     elif sim_type == 1: # DICE
 *         return <int>ceil((threshold / (2 - threshold)) * num_tokens)             # <<<<<<<<<<<<<<
 *     elif sim_type == 2: # JACCARD:
 *         return <int>ceil(threshold * num_tokens)
 */
    __pyx_t_1 = (2.0 - __pyx_v_threshold);
    if (unlikely(__pyx_t_1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_r = ((int)ceil(((__pyx_v_threshold / __pyx_t_1) * __pyx_v_num_tokens)));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":200
 *     if sim_type == 0: # COSINE
 *         return <int>ceil(threshold * threshold * num_tokens)
 *     elif sim_type == 1: # DICE             # <<<<<<<<<<<<<<
 *         return <int>ceil((threshold / (2 - threshold)) * num_tokens)
 *     elif sim_type == 2: # JACCARD:
 */
    break;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":202
 *     elif sim_type == 1: # DICE
 *         return <int>ceil((threshold / (2 - threshold)) * num_tokens)
 *     elif sim_type == 2: # JACCARD:             # <<<<<<<<<<<<<<
 *         return <int>ceil(threshold * num_tokens)
 * 
 */
    case 2:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":203
 *         return <int>ceil((threshold / (2 - threshold)) * num_tokens)
 *     elif sim_type == 2: # JACCARD:
 *         return <int>ceil(threshold * num_tokens)             # <<<<<<<<<<<<<<
 * 
 * cdef int get_size_upper_bound(int& num_tokens, int& sim_type, double& threshold) nogil:
 */
    __pyx_r = ((int)ceil((__pyx_v_threshold * __pyx_v_num_tokens)));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":202
 *     elif sim_type == 1: # DICE
 *         return <int>ceil((threshold / (2 - threshold)) * num_tokens)
 *     elif sim_type == 2: # JACCARD:             # <<<<<<<<<<<<<<
 *         return <int>ceil(threshold * num_tokens)
 * 
 */
    break;
    default: break;
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":197
 *         return <int>(num_tokens - ceil(threshold * num_tokens) + 1.0)
 * 
 * cdef int get_size_lower_bound(int& num_tokens, int& sim_type, double& threshold) nogil:             # <<<<<<<<<<<<<<
 *     if sim_type == 0: # COSINE
 *         return <int>ceil(threshold * threshold * num_tokens)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("py_stringsimjoin.join.set_sim_join_cy.get_size_lower_bound", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "py_stringsimjoin/join/set_sim_join_cy.pyx":205
 *         return <int>ceil(threshold * num_tokens)
 * 
 * cdef int get_size_upper_bound(int& num_tokens, int& sim_type, double& threshold) nogil:             # <<<<<<<<<<<<<<
 *     if sim_type == 0: # COSINE
 *         return <int>floor(num_tokens / (threshold * threshold))
 */

static int __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_size_upper_bound(int &__pyx_v_num_tokens, int &__pyx_v_sim_type, double &__pyx_v_threshold) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":206
 * 
 * cdef int get_size_upper_bound(int& num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE             # <<<<<<<<<<<<<<
 *         return <int>floor(num_tokens / (threshold * threshold))
 *     elif sim_type == 1: # DICE
 */
  switch (__pyx_v_sim_type) {
    case 0:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":207
 * cdef int get_size_upper_bound(int& num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE
 *         return <int>floor(num_tokens / (threshold * threshold))             # <<<<<<<<<<<<<<
 *     elif sim_type == 1: # DICE
 *         return <int>floor(((2 - threshold) / threshold) * num_tokens)
 */
    __pyx_t_1 = (__pyx_v_threshold * __pyx_v_threshold);
    if (unlikely(__pyx_t_1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_r = ((int)floor((__pyx_v_num_tokens / __pyx_t_1)));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":206
 * 
 * cdef int get_size_upper_bound(int& num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE             # <<<<<<<<<<<<<<
 *         return <int>floor(num_tokens / (threshold * threshold))
 *     elif sim_type == 1: # DICE
 */
    break;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":208
 *     if sim_type == 0: # COSINE
 *         return <int>floor(num_tokens / (threshold * threshold))
 *     elif sim_type == 1: # DICE             # <<<<<<<<<<<<<<
 *         return <int>floor(((2 - threshold) / threshold) * num_tokens)
 *     elif sim_type == 2: # JACCARD:
 */
    case 1:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":209
 *         return <int>floor(num_tokens / (threshold * threshold))
 *     elif sim_type == 1: # DICE
 *         return <int>floor(((2 - threshold) / threshold) * num_tokens)             # <<<<<<<<<<<<<<
 *     elif sim_type == 2: # JACCARD:
 *         return <int>floor(num_tokens / threshold)
 */
    __pyx_t_1 = (2.0 - __pyx_v_threshold);
    if (unlikely(__pyx_v_threshold == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_r = ((int)floor(((__pyx_t_1 / __pyx_v_threshold) * __pyx_v_num_tokens)));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":208
 *     if sim_type == 0: # COSINE
 *         return <int>floor(num_tokens / (threshold * threshold))
 *     elif sim_type == 1: # DICE             # <<<<<<<<<<<<<<
 *         return <int>floor(((2 - threshold) / threshold) * num_tokens)
 *     elif sim_type == 2: # JACCARD:
 */
    break;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":210
 *     elif sim_type == 1: # DICE
 *         return <int>floor(((2 - threshold) / threshold) * num_tokens)
 *     elif sim_type == 2: # JACCARD:             # <<<<<<<<<<<<<<
 *         return <int>floor(num_tokens / threshold)
 * 
 */
    case 2:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":211
 *         return <int>floor(((2 - threshold) / threshold) * num_tokens)
 *     elif sim_type == 2: # JACCARD:
 *         return <int>floor(num_tokens / threshold)             # <<<<<<<<<<<<<<
 * 
 * cdef int get_overlap_threshold(int& l_num_tokens, int& r_num_tokens, int& sim_type, double& threshold) nogil:
 */
    if (unlikely(__pyx_v_threshold == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_r = ((int)floor((__pyx_v_num_tokens / __pyx_v_threshold)));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":210
 *     elif sim_type == 1: # DICE
 *         return <int>floor(((2 - threshold) / threshold) * num_tokens)
 *     elif sim_type == 2: # JACCARD:             # <<<<<<<<<<<<<<
 *         return <int>floor(num_tokens / threshold)
 * 
 */
    break;
    default: break;
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":205
 *         return <int>ceil(threshold * num_tokens)
 * 
 * cdef int get_size_upper_bound(int& num_tokens, int& sim_type, double& threshold) nogil:             # <<<<<<<<<<<<<<
 *     if sim_type == 0: # COSINE
 *         return <int>floor(num_tokens / (threshold * threshold))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("py_stringsimjoin.join.set_sim_join_cy.get_size_upper_bound", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "py_stringsimjoin/join/set_sim_join_cy.pyx":213
 *         return <int>floor(num_tokens / threshold)
 * 
 * cdef int get_overlap_threshold(int& l_num_tokens, int& r_num_tokens, int& sim_type, double& threshold) nogil:             # <<<<<<<<<<<<<<
 *     if sim_type == 0: # COSINE
 *         return <int>ceil(threshold * sqrt(<double>(l_num_tokens * r_num_tokens)))
 */

static int __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_overlap_threshold(int &__pyx_v_l_num_tokens, int &__pyx_v_r_num_tokens, int &__pyx_v_sim_type, double &__pyx_v_threshold) {
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":214
 * 
 * cdef int get_overlap_threshold(int& l_num_tokens, int& r_num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE             # <<<<<<<<<<<<<<
 *         return <int>ceil(threshold * sqrt(<double>(l_num_tokens * r_num_tokens)))
 *     elif sim_type == 1: # DICE
 */
  switch (__pyx_v_sim_type) {
    case 0:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":215
 * cdef int get_overlap_threshold(int& l_num_tokens, int& r_num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE
 *         return <int>ceil(threshold * sqrt(<double>(l_num_tokens * r_num_tokens)))             # <<<<<<<<<<<<<<
 *     elif sim_type == 1: # DICE
 *         return <int>ceil((threshold / 2) * (l_num_tokens + r_num_tokens))
 */
    __pyx_r = ((int)ceil((__pyx_v_threshold * sqrt(((double)(__pyx_v_l_num_tokens * __pyx_v_r_num_tokens))))));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":214
 * 
 * cdef int get_overlap_threshold(int& l_num_tokens, int& r_num_tokens, int& sim_type, double& threshold) nogil:
 *     if sim_type == 0: # COSINE             # <<<<<<<<<<<<<<
 *         return <int>ceil(threshold * sqrt(<double>(l_num_tokens * r_num_tokens)))
 *     elif sim_type == 1: # DICE
 */
    break;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":216
 *     if sim_type == 0: # COSINE
 *         return <int>ceil(threshold * sqrt(<double>(l_num_tokens * r_num_tokens)))
 *     elif sim_type == 1: # DICE             # <<<<<<<<<<<<<<
 *         return <int>ceil((threshold / 2) * (l_num_tokens + r_num_tokens))
 *     elif sim_type == 2: # JACCARD:
 */
    case 1:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":217
 *         return <int>ceil(threshold * sqrt(<double>(l_num_tokens * r_num_tokens)))
 *     elif sim_type == 1: # DICE
 *         return <int>ceil((threshold / 2) * (l_num_tokens + r_num_tokens))             # <<<<<<<<<<<<<<
 *     elif sim_type == 2: # JACCARD:
 *         return <int>ceil((threshold / (1 + threshold)) * (l_num_tokens + r_num_tokens))
 */
    __pyx_r = ((int)ceil(((__pyx_v_threshold / 2.0) * (__pyx_v_l_num_tokens + __pyx_v_r_num_tokens))));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":216
 *     if sim_type == 0: # COSINE
 *         return <int>ceil(threshold * sqrt(<double>(l_num_tokens * r_num_tokens)))
 *     elif sim_type == 1: # DICE             # <<<<<<<<<<<<<<
 *         return <int>ceil((threshold / 2) * (l_num_tokens + r_num_tokens))
 *     elif sim_type == 2: # JACCARD:
 */
    break;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":218
 *     elif sim_type == 1: # DICE
 *         return <int>ceil((threshold / 2) * (l_num_tokens + r_num_tokens))
 *     elif sim_type == 2: # JACCARD:             # <<<<<<<<<<<<<<
 *         return <int>ceil((threshold / (1 + threshold)) * (l_num_tokens + r_num_tokens))
 * 
 */
    case 2:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":219
 *         return <int>ceil((threshold / 2) * (l_num_tokens + r_num_tokens))
 *     elif sim_type == 2: # JACCARD:
 *         return <int>ceil((threshold / (1 + threshold)) * (l_num_tokens + r_num_tokens))             # <<<<<<<<<<<<<<
 * 
 * ctypedef double (*fnptr)(const vector[int]&, const vector[int]&) nogil
 */
    __pyx_t_1 = (1.0 + __pyx_v_threshold);
    if (unlikely(__pyx_t_1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_r = ((int)ceil(((__pyx_v_threshold / __pyx_t_1) * (__pyx_v_l_num_tokens + __pyx_v_r_num_tokens))));
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":218
 *     elif sim_type == 1: # DICE
 *         return <int>ceil((threshold / 2) * (l_num_tokens + r_num_tokens))
 *     elif sim_type == 2: # JACCARD:             # <<<<<<<<<<<<<<
 *         return <int>ceil((threshold / (1 + threshold)) * (l_num_tokens + r_num_tokens))
 * 
 */
    break;
    default: break;
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":213
 *         return <int>floor(num_tokens / threshold)
 * 
 * cdef int get_overlap_threshold(int& l_num_tokens, int& r_num_tokens, int& sim_type, double& threshold) nogil:             # <<<<<<<<<<<<<<
 *     if sim_type == 0: # COSINE
 *         return <int>ceil(threshold * sqrt(<double>(l_num_tokens * r_num_tokens)))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("py_stringsimjoin.join.set_sim_join_cy.get_overlap_threshold", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "py_stringsimjoin/join/set_sim_join_cy.pyx":223
 * ctypedef double (*fnptr)(const vector[int]&, const vector[int]&) nogil
 * 
 * cdef fnptr get_sim_function(int& sim_type) nogil:             # <<<<<<<<<<<<<<
 *     if sim_type == 0: # COSINE
 *         return cosine
 */

static __pyx_t_16py_stringsimjoin_4join_15set_sim_join_cy_fnptr __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_sim_function(int &__pyx_v_sim_type) {
  __pyx_t_16py_stringsimjoin_4join_15set_sim_join_cy_fnptr __pyx_r;

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":224
 * 
 * cdef fnptr get_sim_function(int& sim_type) nogil:
 *     if sim_type == 0: # COSINE             # <<<<<<<<<<<<<<
 *         return cosine
 *     elif sim_type == 1: # DICE
 */
  switch (__pyx_v_sim_type) {
    case 0:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":225
 * cdef fnptr get_sim_function(int& sim_type) nogil:
 *     if sim_type == 0: # COSINE
 *         return cosine             # <<<<<<<<<<<<<<
 *     elif sim_type == 1: # DICE
 *         return dice
 */
    __pyx_r = __pyx_f_16py_stringsimjoin_18similarity_measure_6cosine_cosine;
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":224
 * 
 * cdef fnptr get_sim_function(int& sim_type) nogil:
 *     if sim_type == 0: # COSINE             # <<<<<<<<<<<<<<
 *         return cosine
 *     elif sim_type == 1: # DICE
 */
    break;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":226
 *     if sim_type == 0: # COSINE
 *         return cosine
 *     elif sim_type == 1: # DICE             # <<<<<<<<<<<<<<
 *         return dice
 *     elif sim_type == 2: # JACCARD:
 */
    case 1:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":227
 *         return cosine
 *     elif sim_type == 1: # DICE
 *         return dice             # <<<<<<<<<<<<<<
 *     elif sim_type == 2: # JACCARD:
 *         return jaccard
 */
    __pyx_r = __pyx_f_16py_stringsimjoin_18similarity_measure_4dice_dice;
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":226
 *     if sim_type == 0: # COSINE
 *         return cosine
 *     elif sim_type == 1: # DICE             # <<<<<<<<<<<<<<
 *         return dice
 *     elif sim_type == 2: # JACCARD:
 */
    break;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":228
 *     elif sim_type == 1: # DICE
 *         return dice
 *     elif sim_type == 2: # JACCARD:             # <<<<<<<<<<<<<<
 *         return jaccard
 * 
 */
    case 2:

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":229
 *         return dice
 *     elif sim_type == 2: # JACCARD:
 *         return jaccard             # <<<<<<<<<<<<<<
 * 
 * cdef int get_sim_type(sim_measure):
 */
    __pyx_r = __pyx_f_16py_stringsimjoin_18similarity_measure_7jaccard_jaccard;
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":228
 *     elif sim_type == 1: # DICE
 *         return dice
 *     elif sim_type == 2: # JACCARD:             # <<<<<<<<<<<<<<
 *         return jaccard
 * 
 */
    break;
    default: break;
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":223
 * ctypedef double (*fnptr)(const vector[int]&, const vector[int]&) nogil
 * 
 * cdef fnptr get_sim_function(int& sim_type) nogil:             # <<<<<<<<<<<<<<
 *     if sim_type == 0: # COSINE
 *         return cosine
 */

  /* function exit code */
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "py_stringsimjoin/join/set_sim_join_cy.pyx":231
 *         return jaccard
 * 
 * cdef int get_sim_type(sim_measure):             # <<<<<<<<<<<<<<
 *     if sim_measure == 'COSINE': # COSINE
 *         return 0
 */

static int __pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_get_sim_type(PyObject *__pyx_v_sim_measure) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_sim_type", 0);

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":232
 * 
 * cdef int get_sim_type(sim_measure):
 *     if sim_measure == 'COSINE': # COSINE             # <<<<<<<<<<<<<<
 *         return 0
 *     elif sim_measure == 'DICE': # DICE
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_sim_measure, __pyx_n_s_COSINE, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":233
 * cdef int get_sim_type(sim_measure):
 *     if sim_measure == 'COSINE': # COSINE
 *         return 0             # <<<<<<<<<<<<<<
 *     elif sim_measure == 'DICE': # DICE
 *         return 1
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":232
 * 
 * cdef int get_sim_type(sim_measure):
 *     if sim_measure == 'COSINE': # COSINE             # <<<<<<<<<<<<<<
 *         return 0
 *     elif sim_measure == 'DICE': # DICE
 */
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":234
 *     if sim_measure == 'COSINE': # COSINE
 *         return 0
 *     elif sim_measure == 'DICE': # DICE             # <<<<<<<<<<<<<<
 *         return 1
 *     elif sim_measure == 'JACCARD': # JACCARD:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_sim_measure, __pyx_n_s_DICE, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":235
 *         return 0
 *     elif sim_measure == 'DICE': # DICE
 *         return 1             # <<<<<<<<<<<<<<
 *     elif sim_measure == 'JACCARD': # JACCARD:
 *         return 2
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":234
 *     if sim_measure == 'COSINE': # COSINE
 *         return 0
 *     elif sim_measure == 'DICE': # DICE             # <<<<<<<<<<<<<<
 *         return 1
 *     elif sim_measure == 'JACCARD': # JACCARD:
 */
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":236
 *     elif sim_measure == 'DICE': # DICE
 *         return 1
 *     elif sim_measure == 'JACCARD': # JACCARD:             # <<<<<<<<<<<<<<
 *         return 2
 * 
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_sim_measure, __pyx_n_s_JACCARD, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":237
 *         return 1
 *     elif sim_measure == 'JACCARD': # JACCARD:
 *         return 2             # <<<<<<<<<<<<<<
 * 
 */
    __pyx_r = 2;
    goto __pyx_L0;

    /* "py_stringsimjoin/join/set_sim_join_cy.pyx":236
 *     elif sim_measure == 'DICE': # DICE
 *         return 1
 *     elif sim_measure == 'JACCARD': # JACCARD:             # <<<<<<<<<<<<<<
 *         return 2
 * 
 */
  }

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":231
 *         return jaccard
 * 
 * cdef int get_sim_type(sim_measure):             # <<<<<<<<<<<<<<
 *     if sim_measure == 'COSINE': # COSINE
 *         return 0
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("py_stringsimjoin.join.set_sim_join_cy.get_sim_type", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "set_sim_join_cy",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_COSINE, __pyx_k_COSINE, sizeof(__pyx_k_COSINE), 0, 0, 1, 1},
  {&__pyx_n_s_DICE, __pyx_k_DICE, sizeof(__pyx_k_DICE), 0, 0, 1, 1},
  {&__pyx_n_s_JACCARD, __pyx_k_JACCARD, sizeof(__pyx_k_JACCARD), 0, 0, 1, 1},
  {&__pyx_n_s_ProgBar, __pyx_k_ProgBar, sizeof(__pyx_k_ProgBar), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_progress_bar, __pyx_k_progress_bar, sizeof(__pyx_k_progress_bar), 0, 0, 1, 1},
  {&__pyx_n_s_pyprind, __pyx_k_pyprind, sizeof(__pyx_k_pyprind), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initset_sim_join_cy(void); /*proto*/
PyMODINIT_FUNC initset_sim_join_cy(void)
#else
PyMODINIT_FUNC PyInit_set_sim_join_cy(void); /*proto*/
PyMODINIT_FUNC PyInit_set_sim_join_cy(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_set_sim_join_cy(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("set_sim_join_cy", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_py_stringsimjoin__join__set_sim_join_cy) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "py_stringsimjoin.join.set_sim_join_cy")) {
      if (unlikely(PyDict_SetItemString(modules, "py_stringsimjoin.join.set_sim_join_cy", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("set_sim_join_cy", (void (*)(void))__pyx_f_16py_stringsimjoin_4join_15set_sim_join_cy_set_sim_join_cy, "void (PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, double, PyObject *, int, bool, bool, std::vector<std::vector<std::pair<int,int> > >  &, std::vector<std::vector<double> >  &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy = __Pyx_ImportType("py_stringsimjoin.index.position_index_cy", "PositionIndexCy", sizeof(struct __pyx_obj_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy), 1); if (unlikely(!__pyx_ptype_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy = (struct __pyx_vtabstruct_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy*)__Pyx_GetVtable(__pyx_ptype_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy->tp_dict); if (unlikely(!__pyx_vtabptr_16py_stringsimjoin_5index_17position_index_cy_PositionIndexCy)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy = __Pyx_ImportType("py_stringsimjoin.index.inverted_index_cy", "InvertedIndexCy", sizeof(struct __pyx_obj_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy), 1); if (unlikely(!__pyx_ptype_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy = (struct __pyx_vtabstruct_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy*)__Pyx_GetVtable(__pyx_ptype_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy->tp_dict); if (unlikely(!__pyx_vtabptr_16py_stringsimjoin_5index_17inverted_index_cy_InvertedIndexCy)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("py_stringsimjoin.similarity_measure.cosine"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "cosine", (void (**)(void))&__pyx_f_16py_stringsimjoin_18similarity_measure_6cosine_cosine, "double (std::vector<int>  const &, std::vector<int>  const &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_ImportModule("py_stringsimjoin.similarity_measure.dice"); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "dice", (void (**)(void))&__pyx_f_16py_stringsimjoin_18similarity_measure_4dice_dice, "double (std::vector<int>  const &, std::vector<int>  const &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_ImportModule("py_stringsimjoin.similarity_measure.jaccard"); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_3, "jaccard", (void (**)(void))&__pyx_f_16py_stringsimjoin_18similarity_measure_7jaccard_jaccard, "double (std::vector<int>  const &, std::vector<int>  const &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_ImportModule("py_stringsimjoin.utils.cython_utils"); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_4, "tokenize_lists", (void (**)(void))&__pyx_f_16py_stringsimjoin_5utils_12cython_utils_tokenize_lists, "void (PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_4, "get_comp_type", (void (**)(void))&__pyx_f_16py_stringsimjoin_5utils_12cython_utils_get_comp_type, "int (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_4, "get_comparison_function", (void (**)(void))&__pyx_f_16py_stringsimjoin_5utils_12cython_utils_get_comparison_function, "__pyx_t_16py_stringsimjoin_5utils_12cython_utils_compfnptr (int const )") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_4, "int_min", (void (**)(void))&__pyx_f_16py_stringsimjoin_5utils_12cython_utils_int_min, "int (int, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_4, "int_max", (void (**)(void))&__pyx_f_16py_stringsimjoin_5utils_12cython_utils_int_max, "int (int, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":3
 * # set similarity join
 * 
 * import pyprind             # <<<<<<<<<<<<<<
 * 
 * from cython.parallel import prange
 */
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_pyprind, 0, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyprind, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":24
 * 
 * # Initialize a global variable to keep track of the progress bar
 * _progress_bar = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_progress_bar, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "py_stringsimjoin/join/set_sim_join_cy.pyx":1
 * # set similarity join             # <<<<<<<<<<<<<<
 * 
 * import pyprind
 */
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init py_stringsimjoin.join.set_sim_join_cy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init py_stringsimjoin.join.set_sim_join_cy");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
