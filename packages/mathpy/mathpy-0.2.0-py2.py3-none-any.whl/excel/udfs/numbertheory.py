#encoding=utf8

"""

NUMBER THEORY

"""

import xlwings as xw

from mathpy.combinatorics import binomial, factorial
from mathpy.numtheory import factor, integers, sequences, gcd


"""
Factorial
"""


@xw.func
@xw.arg('x', doc='Value to calculate factorial x!')
def FACTORIAL(x):
    """
    Returns the factorial of x, x!

    Parameters
    ----------
    x
        Integer to compute factorial

    Returns
    -------
    int
        The factorial of x, x!

    See Also
    --------
    factorial : function
        Function that computes the factorial of the given x

    """
    return factorial.factorial(x)


@xw.func
@xw.arg('x', doc='Value to calculate factorial of x')
def STIRLING(x):
    r"""
    Approximates the factorial :math:`x!` using Gosper's approximation formula.

    Parameters
    ----------
    x
        Integer to approximate factorial

    Returns
    -------
    float
        The approximated factorial of :math:`x`.

    See Also
    --------
    stirling : function
        Function that approximates the factorial using Gosper's approximation.

    """
    return factorial.stirling(x)


@xw.func
@xw.arg('x', doc='Value to calculate factorial of x')
def STIRLINGLN(x):
    r"""
    Approximates the factorial :math:`x!` using the log form of Stirling's approximation.

    Parameters
    ----------
    x
        Integer to approximate factorial

    Returns
    -------
    float
        The approximated factorial of :math:`x`.

    See Also
    --------
    stirlingln : function
        Function that performs approximation of the factorial.

    """
    return factorial.stirlingln(x)


@xw.func
@xw.arg('x', doc='Value to approximate the factorial of x')
def RAMANUJAN(x):
    r"""
    Approximates the factorial :math:`x!` using Ramanujan's formula.

    Parameters
    ----------
    x
        Integer to approximate factorial

    Returns
    -------
    float
        The approximated factorial of :math:`x`.

    See Also
    --------
    ramanujan : function
        Function that performs approximation

    """
    return factorial.ramanujan(x)


"""
Binomial Coefficient
"""


@xw.func
@xw.arg('n', doc='Value of n representing the number of possibilities')
@xw.arg('k', doc='Value of k representing the number of unordered outcomes')
def BINOMIAL_COEFFICIENT(n, k):
    r"""
    Calculates the binomial coefficient given n and k

    Parameters
    ----------
    n : int
        Number of possibilities
    k : int
        number of unordered outcomes

    Returns
    -------
    int
        The binomial coefficient of n and k

    See Also
    --------
    binom_coeff : function
        The function used to compute the binomial coefficient
    BinomialCoefficient : class
        Backend class of binom_coeff function containing several different binomial
        coefficient algorithms

    """
    return binomial.binom_coeff(n, k)


"""
FIBONACCI SEQUENCE

"""


@xw.func
@xw.arg('n', doc='Calculate the Fibonacci sequence up to n')
@xw.ret(expand='table')
def FIBONACCI(n):
    r"""
    Calculates the Fibonacci sequence up to the value of n

    Parameters
    ----------
    n : int
        Compute the Fibonacci sequence up to the value of n
    output : {'last', 'array'}, optional
        If 'last', the last integer in the Fibonacci sequence up to n is returned,
        if 'array', the entire sequence is returned. Defaults to 'last'.

    Returns
    -------
    int
        Last Fibonacci integer up to value of n

    See Also
    --------
    fibonacci : function
        Function used to compute the Fibonacci sequence

    """
    return sequences.fibonacci(n)


@xw.func
@xw.arg('n', doc='Calculate the Fibonacci sequence up to n')
@xw.ret(expand='table')
def FIBONACCISERIES(n):
    r"""
    Calculates the Fibonacci sequence up to the value of n

    Parameters
    ----------
    n : int
        Compute the Fibonacci sequence up to the value of n

    Returns
    -------
    array-like
        Range of length n containing Fibonacci sequence

    See Also
    --------
    fibonacci : function
        Function used to compute the Fibonacci sequence

    """
    return sequences.fibonacci(n, 'array')


@xw.func
@xw.arg('n', doc='Calculate the 3n + 1 problem starting with n')
@xw.ret(expand='table')
def THREE_N_ONE(n):
    r"""
    Calculates the Collatz conjecture, also known as the :math:`3n + 1` problem.

    Parameters
    ----------
    n : int
        Starting integer to begin :math:`3n + 1` process.

    Returns
    -------
    array-like
        Range containing sequence generated by the Collatz conjecture. If n is 1, 1 is returned.

    See Also
    --------
    three_n_one : function
        Function used to compute the Collatz conjecture.

    """
    return sequences.three_n_one(n)


@xw.func
@xw.arg('n', doc='Value to factor')
@xw.ret(expand='table')
def FACTOR(n):
    r"""
    Factors an integer into product of smaller integers, assuming factors exist.

    Parameters
    ----------
    n : int
        Integer to be factored into product of smaller integers.

    Returns
    -------
    array-like
        Range containing the factors of the value. If the value given is prime, the value is returned.

    See Also
    --------
    factorinteger : function
        Function used to perform integer factorization.

    """
    return factor.factor(n)


@xw.func
@xw.arg('n', doc='Test whether value is a prime number')
def ISPRIME(n):
    r"""
    Tests whether a given value is prime.

    Parameters
    ----------
    n : int
        Integer to be tested.

    Returns
    -------
    Boolean
        TRUE if the value is prime, FALSE otherwise

    See Also
    --------
    isprime : function
        Underlying function used to test if the given value is prime.

    """
    return integers.isprime(n)


@xw.func
@xw.arg('n', doc='Test whether a value is composite')
def ISCOMPOSITE(n):
    r"""
    Tests whether a given value is composite (not prime).

    Parameters
    ----------
    n : int
        Integer to be tested.

    Returns
    -------
    Boolean
        TRUE if the value is composite, FALSE otherwise

    See Also
    --------
    iscomposite : function
        Underlying function used to determine if the given value is composite.

    """
    return integers.iscomposite(n)


@xw.func
@xw.arg('a')
@xw.arg('b')
def GCD(a, b):
    r"""
    Computes the greatest common divisor of two integers, a and b.

    Parameters
    ----------
    a : int

    b : int

    Returns
    -------
    gcd : int
        The greatest common divisor of the two integers

    See Also
    --------
    gcd : function
        Function used to perform calculation of GCD algorithm.

    """
    return gcd.gcd(a, b)


@xw.func
@xw.arg('a')
@xw.arg('b')
@xw.ret(expand='table')
def GCDEXTENDED(a, b):
    r"""
    Computes the greatest common divisor of two integers, :math:`a` and :math:`b` and the coefficients
    of Bezout's Identity :math:`x` and :math:`y`.

    Parameters
    ----------
    a : int

    b : int

    Returns
    -------
    gcd : tuple
        The greatest common divisor of the two integers and the accompanying Bezout's coefficients

    See Also
    --------
    gcd_extended : function
        Used to perform calculation of GCD algorithm.

    """
    return gcd.gcd_extended(a, b)
