from __future__ import print_function
#import click
import chronqc.chronqc_db
import chronqc.chronqc_plot
import argparse
import sys
def run_plot(args):
    """
    (args) -> plot
    runs main function from chronqc_plot.py
    """
    print("running chronqc_plot")
    chronqc.chronqc_plot.main(args)


def run_db(args):
    """
    (args) -> plot
    runs main function from chronqc_db.py
    """
    print("running chronqc_db")
    chronqc.chronqc_db.main(args)


#@click.command()
def cli():
    try:
        parser = argparse.ArgumentParser(prog='chronqc')
        subparsers = parser.add_subparsers(help='plot or db')
        # Parse plot arguments
        plot_parser = subparsers.add_parser('plot', help='Generate chronqc plots')

        plot_parser.add_argument('-db', '--db', required=True,
                                 help='Input sqlite database name')

        plot_parser.add_argument('-json', '--json', required=True,
                                 help='Input plot json file name')
        plot_parser.add_argument('-panel', '--panel', required=True,
                                 help='Name of the panel (assay)')
        plot_parser.add_argument('-p', '--prefix',  required=False,
                                 help='Prefix for chronqc output html file')
        plot_parser.add_argument('-o', '--output',  required=False,
                                 help='Directory path to save chronqc output')
        plot_parser.add_argument('-f', '--force', required=False, action='store_true',
                                 help='Overwrite the directory')
        plot_parser.set_defaults(func=run_plot)

        # Parse db arguments
        db_parser = subparsers.add_parser('db',
                                          help='Generate chronqc \
                                          database for chronqc plots')
        group = db_parser.add_mutually_exclusive_group()
        # group.set_defaults(mode='create')
        group.add_argument('-u', '--update', action='store_const', dest='mode',
                           const='update')
        group.add_argument('-c', '--create', action='store_const', dest='mode',
                           const='create')
        db_parser.add_argument('-db', '--db',
                               help='Name of chronqc database to be created or full \
                               path of chronqc database to be updated')

        db_parser.add_argument('-multiqc_stats', '--multiqc_stats', required=True,
                               help='multiqc_general_stats file generated by MultiQC')
        action = db_parser.add_mutually_exclusive_group(required=True)
        action.add_argument('-multiqc_sources', '--multiqc_sources',
                            help='multiqc_sources file generated by MultiQC')
        action.add_argument('-run_date_info', '--run_date_info',
                            help='Run ID and sequencing date information for all \
                            samples in csv format')
        db_parser.add_argument('-db_table', '--db_table', required=False,
                               help='Name of chronqc database table to be \
                               created/updated')
        db_parser.add_argument('-module', '--module', required=False,
                               default='FastQC',
                               help='Name of tool from multiqc_sources file. \
                                Time stamp from the output files of this module \
                                will be used to get the run date. \
                                Path of output files of this module and \
                                run_dir_level (default = 3) is used to get run name. \
                                Default is module is FastQC')
        db_parser.add_argument('-run_dir_level', '--run_dir_level', required=False,
                               default=3,
                               help='Upper directory level for path in \
                               multiqc_sources file. This will be used generate name \
                               of run (library id). Default is 3')
        db_parser.add_argument('-panel', '--panel', required=True,
                               help='Name of the panel (assay or project)')
        db_parser.add_argument('-p', '--prefix',  required=False,
                               help='Prefix for chronqc stats database')
        db_parser.add_argument('-o', '--output',  required=False,
                               help='Directory path to save chronqc stats database \
                               and json files')
        db_parser.add_argument('-f', '--force',  required=False, action='store_true',
                           help='Overwrite the directory')

        db_parser.set_defaults(func=run_db)
        args = parser.parse_args()
        args.func(args)
    except AttributeError:
        parser.print_help()
        sys.exit(0)


if __name__ == '__main__':
    cli()
