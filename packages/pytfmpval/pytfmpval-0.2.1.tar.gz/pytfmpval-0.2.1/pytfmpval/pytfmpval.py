# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pytfmpval')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pytfmpval')
    _pytfmpval = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pytfmpval', [dirname(__file__)])
        except ImportError:
            import _pytfmpval
            return _pytfmpval
        try:
            _mod = imp.load_module('_pytfmpval', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pytfmpval = swig_import_helper()
    del swig_import_helper
else:
    import _pytfmpval
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pytfmpval.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pytfmpval.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pytfmpval.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pytfmpval.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pytfmpval.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pytfmpval.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pytfmpval.SwigPyIterator_copy(self)

    def next(self):
        return _pytfmpval.SwigPyIterator_next(self)

    def __next__(self):
        return _pytfmpval.SwigPyIterator___next__(self)

    def previous(self):
        return _pytfmpval.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pytfmpval.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pytfmpval.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pytfmpval.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pytfmpval.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pytfmpval.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pytfmpval.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pytfmpval.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pytfmpval.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalMapSize"] = _pytfmpval.Matrix_totalMapSize_set
    __swig_getmethods__["totalMapSize"] = _pytfmpval.Matrix_totalMapSize_get
    if _newclass:
        totalMapSize = _swig_property(_pytfmpval.Matrix_totalMapSize_get, _pytfmpval.Matrix_totalMapSize_set)
    __swig_setmethods__["totalOp"] = _pytfmpval.Matrix_totalOp_set
    __swig_getmethods__["totalOp"] = _pytfmpval.Matrix_totalOp_get
    if _newclass:
        totalOp = _swig_property(_pytfmpval.Matrix_totalOp_get, _pytfmpval.Matrix_totalOp_set)
    __swig_setmethods__["mat"] = _pytfmpval.Matrix_mat_set
    __swig_getmethods__["mat"] = _pytfmpval.Matrix_mat_get
    if _newclass:
        mat = _swig_property(_pytfmpval.Matrix_mat_get, _pytfmpval.Matrix_mat_set)
    __swig_setmethods__["length"] = _pytfmpval.Matrix_length_set
    __swig_getmethods__["length"] = _pytfmpval.Matrix_length_get
    if _newclass:
        length = _swig_property(_pytfmpval.Matrix_length_get, _pytfmpval.Matrix_length_set)
    __swig_setmethods__["granularity"] = _pytfmpval.Matrix_granularity_set
    __swig_getmethods__["granularity"] = _pytfmpval.Matrix_granularity_get
    if _newclass:
        granularity = _swig_property(_pytfmpval.Matrix_granularity_get, _pytfmpval.Matrix_granularity_set)
    __swig_setmethods__["matInt"] = _pytfmpval.Matrix_matInt_set
    __swig_getmethods__["matInt"] = _pytfmpval.Matrix_matInt_get
    if _newclass:
        matInt = _swig_property(_pytfmpval.Matrix_matInt_get, _pytfmpval.Matrix_matInt_set)
    __swig_setmethods__["errorMax"] = _pytfmpval.Matrix_errorMax_set
    __swig_getmethods__["errorMax"] = _pytfmpval.Matrix_errorMax_get
    if _newclass:
        errorMax = _swig_property(_pytfmpval.Matrix_errorMax_get, _pytfmpval.Matrix_errorMax_set)
    __swig_setmethods__["offsets"] = _pytfmpval.Matrix_offsets_set
    __swig_getmethods__["offsets"] = _pytfmpval.Matrix_offsets_get
    if _newclass:
        offsets = _swig_property(_pytfmpval.Matrix_offsets_get, _pytfmpval.Matrix_offsets_set)
    __swig_setmethods__["offset"] = _pytfmpval.Matrix_offset_set
    __swig_getmethods__["offset"] = _pytfmpval.Matrix_offset_get
    if _newclass:
        offset = _swig_property(_pytfmpval.Matrix_offset_get, _pytfmpval.Matrix_offset_set)
    __swig_setmethods__["minScoreColumn"] = _pytfmpval.Matrix_minScoreColumn_set
    __swig_getmethods__["minScoreColumn"] = _pytfmpval.Matrix_minScoreColumn_get
    if _newclass:
        minScoreColumn = _swig_property(_pytfmpval.Matrix_minScoreColumn_get, _pytfmpval.Matrix_minScoreColumn_set)
    __swig_setmethods__["maxScoreColumn"] = _pytfmpval.Matrix_maxScoreColumn_set
    __swig_getmethods__["maxScoreColumn"] = _pytfmpval.Matrix_maxScoreColumn_get
    if _newclass:
        maxScoreColumn = _swig_property(_pytfmpval.Matrix_maxScoreColumn_get, _pytfmpval.Matrix_maxScoreColumn_set)
    __swig_setmethods__["sum"] = _pytfmpval.Matrix_sum_set
    __swig_getmethods__["sum"] = _pytfmpval.Matrix_sum_get
    if _newclass:
        sum = _swig_property(_pytfmpval.Matrix_sum_get, _pytfmpval.Matrix_sum_set)
    __swig_setmethods__["minScore"] = _pytfmpval.Matrix_minScore_set
    __swig_getmethods__["minScore"] = _pytfmpval.Matrix_minScore_get
    if _newclass:
        minScore = _swig_property(_pytfmpval.Matrix_minScore_get, _pytfmpval.Matrix_minScore_set)
    __swig_setmethods__["maxScore"] = _pytfmpval.Matrix_maxScore_set
    __swig_getmethods__["maxScore"] = _pytfmpval.Matrix_maxScore_get
    if _newclass:
        maxScore = _swig_property(_pytfmpval.Matrix_maxScore_get, _pytfmpval.Matrix_maxScore_set)
    __swig_setmethods__["scoreRange"] = _pytfmpval.Matrix_scoreRange_set
    __swig_getmethods__["scoreRange"] = _pytfmpval.Matrix_scoreRange_get
    if _newclass:
        scoreRange = _swig_property(_pytfmpval.Matrix_scoreRange_get, _pytfmpval.Matrix_scoreRange_set)
    __swig_setmethods__["bestScore"] = _pytfmpval.Matrix_bestScore_set
    __swig_getmethods__["bestScore"] = _pytfmpval.Matrix_bestScore_get
    if _newclass:
        bestScore = _swig_property(_pytfmpval.Matrix_bestScore_get, _pytfmpval.Matrix_bestScore_set)
    __swig_setmethods__["worstScore"] = _pytfmpval.Matrix_worstScore_set
    __swig_getmethods__["worstScore"] = _pytfmpval.Matrix_worstScore_get
    if _newclass:
        worstScore = _swig_property(_pytfmpval.Matrix_worstScore_get, _pytfmpval.Matrix_worstScore_set)
    __swig_setmethods__["background"] = _pytfmpval.Matrix_background_set
    __swig_getmethods__["background"] = _pytfmpval.Matrix_background_get
    if _newclass:
        background = _swig_property(_pytfmpval.Matrix_background_get, _pytfmpval.Matrix_background_set)

    def __init__(self, *args):
        this = _pytfmpval.new_Matrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toLogOddRatio(self):
        return _pytfmpval.Matrix_toLogOddRatio(self)

    def toLog2OddRatio(self):
        return _pytfmpval.Matrix_toLog2OddRatio(self)

    def computesIntegerMatrix(self, granularity, sortColumns=True):
        return _pytfmpval.Matrix_computesIntegerMatrix(self, granularity, sortColumns)

    def showDistrib(self, min, max):
        return _pytfmpval.Matrix_showDistrib(self, min, max)

    def lookForPvalue(self, requestedScore, min, max, pmin, pmax):
        return _pytfmpval.Matrix_lookForPvalue(self, requestedScore, min, max, pmin, pmax)

    def lookForScore(self, min, max, requestedPvalue, rpv, rppv):
        return _pytfmpval.Matrix_lookForScore(self, min, max, requestedPvalue, rpv, rppv)

    def calcDistribWithMapMinMax(self, min, max):
        return _pytfmpval.Matrix_calcDistribWithMapMinMax(self, min, max)

    def fastPvalue(self, m, alpha):
        return _pytfmpval.Matrix_fastPvalue(self, m, alpha)

    def readJasparMatrix(self, filename):
        return _pytfmpval.Matrix_readJasparMatrix(self, filename)

    def readMatrix(self, matrix):
        return _pytfmpval.Matrix_readMatrix(self, matrix)

    def readHorizontalMatrix(self, filename):
        return _pytfmpval.Matrix_readHorizontalMatrix(self, filename)
    __swig_destroy__ = _pytfmpval.delete_Matrix
    __del__ = lambda self: None
Matrix_swigregister = _pytfmpval.Matrix_swigregister
Matrix_swigregister(Matrix)

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pytfmpval.new_doublep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytfmpval.delete_doublep
    __del__ = lambda self: None

    def assign(self, value):
        return _pytfmpval.doublep_assign(self, value)

    def value(self):
        return _pytfmpval.doublep_value(self)

    def cast(self):
        return _pytfmpval.doublep_cast(self)
    if _newclass:
        frompointer = staticmethod(_pytfmpval.doublep_frompointer)
    else:
        frompointer = _pytfmpval.doublep_frompointer
doublep_swigregister = _pytfmpval.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(t):
    return _pytfmpval.doublep_frompointer(t)
doublep_frompointer = _pytfmpval.doublep_frompointer

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pytfmpval.new_intp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytfmpval.delete_intp
    __del__ = lambda self: None

    def assign(self, value):
        return _pytfmpval.intp_assign(self, value)

    def value(self):
        return _pytfmpval.intp_value(self)

    def cast(self):
        return _pytfmpval.intp_cast(self)
    if _newclass:
        frompointer = staticmethod(_pytfmpval.intp_frompointer)
    else:
        frompointer = _pytfmpval.intp_frompointer
intp_swigregister = _pytfmpval.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(t):
    return _pytfmpval.intp_frompointer(t)
intp_frompointer = _pytfmpval.intp_frompointer

# This file is compatible with both classic and new-style classes.


