from ...tl.tlobject import TLObject


class PageBlockList(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    pageBlockList#3a58c7f4 ordered:Bool items:Vector<RichText> = PageBlock"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x3a58c7f4
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x1aca5644

    def __init__(self, ordered, items):
        """
        :param ordered: Telegram type: "Bool".
        :param items: Telegram type: "RichText". Must be a list.

        Constructor for PageBlock: Instance of either PageBlockUnsupported, PageBlockTitle, PageBlockSubtitle, PageBlockAuthorDate, PageBlockHeader, PageBlockSubheader, PageBlockParagraph, PageBlockPreformatted, PageBlockFooter, PageBlockDivider, PageBlockAnchor, PageBlockList, PageBlockBlockquote, PageBlockPullquote, PageBlockPhoto, PageBlockVideo, PageBlockCover, PageBlockEmbed, PageBlockEmbedPost, PageBlockCollage, PageBlockSlideshow, PageBlockChannel, PageBlockAudio.
        """
        super().__init__()

        self.ordered = ordered
        self.items = items

    def to_dict(self):
        return {
            'ordered': self.ordered,
            'items': [] if self.items is None else [None if x is None else x.to_dict() for x in self.items],
        }

    def on_send(self, writer):
        writer.write_int(PageBlockList.constructor_id, signed=False)
        writer.tgwrite_bool(self.ordered)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.items))
        for _x in self.items:
            _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return PageBlockList(None, None)

    def on_response(self, reader):
        self.ordered = reader.tgread_bool()
        reader.read_int()  # Vector's constructor ID
        self.items = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.items.append(_x)

    def __repr__(self):
        return 'pageBlockList#3a58c7f4 ordered:Bool items:Vector<RichText> = PageBlock'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
