from ....tl.tlobject import TLObject


class ExportedAuthorization(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    auth.exportedAuthorization#df969c2d id:int bytes:bytes = auth.ExportedAuthorization"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xdf969c2d
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x5fd1ec51

    def __init__(self, id, bytes):
        """
        :param id: Telegram type: "int".
        :param bytes: Telegram type: "bytes".

        Constructor for auth.ExportedAuthorization: Instance of ExportedAuthorization.
        """
        super().__init__()

        self.id = id
        self.bytes = bytes

    def to_dict(self):
        return {
            'id': self.id,
            'bytes': self.bytes,
        }

    def on_send(self, writer):
        writer.write_int(ExportedAuthorization.constructor_id, signed=False)
        writer.write_int(self.id)
        writer.tgwrite_bytes(self.bytes)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return ExportedAuthorization(None, None)

    def on_response(self, reader):
        self.id = reader.read_int()
        self.bytes = reader.tgread_bytes()

    def __repr__(self):
        return 'auth.exportedAuthorization#df969c2d id:int bytes:bytes = auth.ExportedAuthorization'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
