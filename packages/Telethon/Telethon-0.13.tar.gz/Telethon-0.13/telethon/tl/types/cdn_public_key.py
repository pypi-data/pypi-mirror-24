from ...tl.tlobject import TLObject


class CdnPublicKey(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    cdnPublicKey#c982eaba dc_id:int public_key:string = CdnPublicKey"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xc982eaba
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x16db47f3

    def __init__(self, dc_id, public_key):
        """
        :param dc_id: Telegram type: "int".
        :param public_key: Telegram type: "string".

        Constructor for CdnPublicKey: Instance of CdnPublicKey.
        """
        super().__init__()

        self.dc_id = dc_id
        self.public_key = public_key

    def to_dict(self):
        return {
            'dc_id': self.dc_id,
            'public_key': self.public_key,
        }

    def on_send(self, writer):
        writer.write_int(CdnPublicKey.constructor_id, signed=False)
        writer.write_int(self.dc_id)
        writer.tgwrite_string(self.public_key)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return CdnPublicKey(None, None)

    def on_response(self, reader):
        self.dc_id = reader.read_int()
        self.public_key = reader.tgread_string()

    def __repr__(self):
        return 'cdnPublicKey#c982eaba dc_id:int public_key:string = CdnPublicKey'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
