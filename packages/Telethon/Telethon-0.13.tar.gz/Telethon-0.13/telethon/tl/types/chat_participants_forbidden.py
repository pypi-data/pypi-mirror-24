from ...tl.tlobject import TLObject


class ChatParticipantsForbidden(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    chatParticipantsForbidden#fc900c2b flags:# chat_id:int self_participant:flags.0?ChatParticipant = ChatParticipants"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xfc900c2b
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x1fa89571

    def __init__(self, chat_id, self_participant=None):
        """
        :param chat_id: Telegram type: "int".
        :param self_participant: Telegram type: "ChatParticipant".

        Constructor for ChatParticipants: Instance of either ChatParticipantsForbidden, ChatParticipants.
        """
        super().__init__()

        self.chat_id = chat_id
        self.self_participant = self_participant

    def to_dict(self):
        return {
            'chat_id': self.chat_id,
            'self_participant': None if self.self_participant is None else self.self_participant.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(ChatParticipantsForbidden.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.self_participant else 0
        writer.write_int(flags)

        writer.write_int(self.chat_id)
        if self.self_participant:
            self.self_participant.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return ChatParticipantsForbidden(None, None)

    def on_response(self, reader):
        flags = reader.read_int()

        self.chat_id = reader.read_int()
        if (flags & (1 << 0)) != 0:
            self.self_participant = reader.tgread_object()

    def __repr__(self):
        return 'chatParticipantsForbidden#fc900c2b flags:# chat_id:int self_participant:flags.0?ChatParticipant = ChatParticipants'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
