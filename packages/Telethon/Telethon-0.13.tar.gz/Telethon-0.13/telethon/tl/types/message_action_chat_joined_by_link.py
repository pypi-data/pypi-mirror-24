from ...tl.tlobject import TLObject


class MessageActionChatJoinedByLink(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    messageActionChatJoinedByLink#f89cf5e8 inviter_id:int = MessageAction"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xf89cf5e8
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x8680d126

    def __init__(self, inviter_id):
        """
        :param inviter_id: Telegram type: "int".

        Constructor for MessageAction: Instance of either MessageActionEmpty, MessageActionChatCreate, MessageActionChatEditTitle, MessageActionChatEditPhoto, MessageActionChatDeletePhoto, MessageActionChatAddUser, MessageActionChatDeleteUser, MessageActionChatJoinedByLink, MessageActionChannelCreate, MessageActionChatMigrateTo, MessageActionChannelMigrateFrom, MessageActionPinMessage, MessageActionHistoryClear, MessageActionGameScore, MessageActionPaymentSentMe, MessageActionPaymentSent, MessageActionPhoneCall, MessageActionScreenshotTaken.
        """
        super().__init__()

        self.inviter_id = inviter_id

    def to_dict(self):
        return {
            'inviter_id': self.inviter_id,
        }

    def on_send(self, writer):
        writer.write_int(MessageActionChatJoinedByLink.constructor_id, signed=False)
        writer.write_int(self.inviter_id)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return MessageActionChatJoinedByLink(None)

    def on_response(self, reader):
        self.inviter_id = reader.read_int()

    def __repr__(self):
        return 'messageActionChatJoinedByLink#f89cf5e8 inviter_id:int = MessageAction'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
