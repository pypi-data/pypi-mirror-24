from ...tl.tlobject import TLObject


class BotInfo(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    botInfo#98e81d3a user_id:int description:string commands:Vector<BotCommand> = BotInfo"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x98e81d3a
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xf1f701db

    def __init__(self, user_id, description, commands):
        """
        :param user_id: Telegram type: "int".
        :param description: Telegram type: "string".
        :param commands: Telegram type: "BotCommand". Must be a list.

        Constructor for BotInfo: Instance of BotInfo.
        """
        super().__init__()

        self.user_id = user_id
        self.description = description
        self.commands = commands

    def to_dict(self):
        return {
            'user_id': self.user_id,
            'description': self.description,
            'commands': [] if self.commands is None else [None if x is None else x.to_dict() for x in self.commands],
        }

    def on_send(self, writer):
        writer.write_int(BotInfo.constructor_id, signed=False)
        writer.write_int(self.user_id)
        writer.tgwrite_string(self.description)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.commands))
        for _x in self.commands:
            _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return BotInfo(None, None, None)

    def on_response(self, reader):
        self.user_id = reader.read_int()
        self.description = reader.tgread_string()
        reader.read_int()  # Vector's constructor ID
        self.commands = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.commands.append(_x)

    def __repr__(self):
        return 'botInfo#98e81d3a user_id:int description:string commands:Vector<BotCommand> = BotInfo'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
