from ...tl.tlobject import TLObject


class MessageActionChatEditPhoto(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    messageActionChatEditPhoto#7fcb13a8 photo:Photo = MessageAction"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x7fcb13a8
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x8680d126

    def __init__(self, photo):
        """
        :param photo: Telegram type: "Photo".

        Constructor for MessageAction: Instance of either MessageActionEmpty, MessageActionChatCreate, MessageActionChatEditTitle, MessageActionChatEditPhoto, MessageActionChatDeletePhoto, MessageActionChatAddUser, MessageActionChatDeleteUser, MessageActionChatJoinedByLink, MessageActionChannelCreate, MessageActionChatMigrateTo, MessageActionChannelMigrateFrom, MessageActionPinMessage, MessageActionHistoryClear, MessageActionGameScore, MessageActionPaymentSentMe, MessageActionPaymentSent, MessageActionPhoneCall, MessageActionScreenshotTaken.
        """
        super().__init__()

        self.photo = photo

    def to_dict(self):
        return {
            'photo': None if self.photo is None else self.photo.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(MessageActionChatEditPhoto.constructor_id, signed=False)
        self.photo.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return MessageActionChatEditPhoto(None)

    def on_response(self, reader):
        self.photo = reader.tgread_object()

    def __repr__(self):
        return 'messageActionChatEditPhoto#7fcb13a8 photo:Photo = MessageAction'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
