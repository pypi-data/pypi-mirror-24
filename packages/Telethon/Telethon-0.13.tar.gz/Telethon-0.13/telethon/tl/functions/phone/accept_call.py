from ....tl.tlobject import TLObject


class AcceptCallRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x3bd2b4a0
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xd48afe4f

    def __init__(self, peer, g_b, protocol):
        """
        :param peer: Telegram type: "InputPhoneCall".
        :param g_b: Telegram type: "bytes".
        :param protocol: Telegram type: "PhoneCallProtocol".

        :returns phone.PhoneCall: Instance of PhoneCall.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.peer = peer
        self.g_b = g_b
        self.protocol = protocol

    def to_dict(self):
        return {
            'peer': None if self.peer is None else self.peer.to_dict(),
            'g_b': self.g_b,
            'protocol': None if self.protocol is None else self.protocol.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(AcceptCallRequest.constructor_id, signed=False)
        self.peer.on_send(writer)
        writer.tgwrite_bytes(self.g_b)
        self.protocol.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return AcceptCallRequest(None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
