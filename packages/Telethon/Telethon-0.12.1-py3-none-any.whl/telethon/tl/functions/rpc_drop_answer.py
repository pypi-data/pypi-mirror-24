from ...tl.tlobject import TLObject


class RpcDropAnswerRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    rpc_drop_answer#58e4a740 req_msg_id:long = RpcDropAnswer"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x58e4a740
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x4bca7570

    def __init__(self, req_msg_id):
        """
        :param req_msg_id: Telegram type: "long".

        :returns RpcDropAnswer: Instance of either RpcAnswerUnknown, RpcAnswerDroppedRunning, RpcAnswerDropped.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.req_msg_id = req_msg_id

    def to_dict(self):
        return {
            'req_msg_id': self.req_msg_id,
        }

    def on_send(self, writer):
        writer.write_int(RpcDropAnswerRequest.constructor_id, signed=False)
        writer.write_long(self.req_msg_id)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return RpcDropAnswerRequest(None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'rpc_drop_answer#58e4a740 req_msg_id:long = RpcDropAnswer'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
