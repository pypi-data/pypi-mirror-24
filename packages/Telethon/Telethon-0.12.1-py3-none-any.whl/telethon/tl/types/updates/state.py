from ....tl.tlobject import TLObject


class State(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    updates.state#a56c2a3e pts:int qts:int date:int seq:int unread_count:int = updates.State"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xa56c2a3e
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x23df1a01

    def __init__(self, pts, qts, date, seq, unread_count):
        """
        :param pts: Telegram type: "int".
        :param qts: Telegram type: "int".
        :param date: Telegram type: "date".
        :param seq: Telegram type: "int".
        :param unread_count: Telegram type: "int".

        Constructor for updates.State: Instance of State.
        """
        super().__init__()

        self.pts = pts
        self.qts = qts
        self.date = date
        self.seq = seq
        self.unread_count = unread_count

    def to_dict(self):
        return {
            'pts': self.pts,
            'qts': self.qts,
            'date': self.date,
            'seq': self.seq,
            'unread_count': self.unread_count,
        }

    def on_send(self, writer):
        writer.write_int(State.constructor_id, signed=False)
        writer.write_int(self.pts)
        writer.write_int(self.qts)
        writer.tgwrite_date(self.date)
        writer.write_int(self.seq)
        writer.write_int(self.unread_count)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return State(None, None, None, None, None)

    def on_response(self, reader):
        self.pts = reader.read_int()
        self.qts = reader.read_int()
        self.date = reader.tgread_date()
        self.seq = reader.read_int()
        self.unread_count = reader.read_int()

    def __repr__(self):
        return 'updates.state#a56c2a3e pts:int qts:int date:int seq:int unread_count:int = updates.State'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
