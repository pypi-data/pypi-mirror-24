from ...tl.tlobject import TLObject


class InputPaymentCredentials(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    inputPaymentCredentials#3417d728 flags:# save:flags.0?true data:DataJSON = InputPaymentCredentials"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x3417d728
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x2899a53d

    def __init__(self, data, save=None):
        """
        :param save: Telegram type: "true".
        :param data: Telegram type: "DataJSON".

        Constructor for InputPaymentCredentials: Instance of either InputPaymentCredentialsSaved, InputPaymentCredentials.
        """
        super().__init__()

        self.save = save
        self.data = data

    def to_dict(self):
        return {
            'save': self.save,
            'data': None if self.data is None else self.data.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(InputPaymentCredentials.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.save else 0
        writer.write_int(flags)

        self.data.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return InputPaymentCredentials(None, None)

    def on_response(self, reader):
        flags = reader.read_int()

        if (flags & (1 << 0)) != 0:
            self.save = True  # Arbitrary not-None value, no need to read since it is a flag

        self.data = reader.tgread_object()

    def __repr__(self):
        return 'inputPaymentCredentials#3417d728 flags:# save:flags.0?true data:DataJSON = InputPaymentCredentials'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
