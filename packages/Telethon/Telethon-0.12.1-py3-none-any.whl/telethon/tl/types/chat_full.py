from ...tl.tlobject import TLObject


class ChatFull(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    chatFull#2e02a614 id:int participants:ChatParticipants chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> = ChatFull"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x2e02a614
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xd49a2697

    def __init__(self, id, participants, chat_photo, notify_settings, exported_invite, bot_info):
        """
        :param id: Telegram type: "int".
        :param participants: Telegram type: "ChatParticipants".
        :param chat_photo: Telegram type: "Photo".
        :param notify_settings: Telegram type: "PeerNotifySettings".
        :param exported_invite: Telegram type: "ExportedChatInvite".
        :param bot_info: Telegram type: "BotInfo". Must be a list.

        Constructor for ChatFull: Instance of either ChatFull, ChannelFull.
        """
        super().__init__()

        self.id = id
        self.participants = participants
        self.chat_photo = chat_photo
        self.notify_settings = notify_settings
        self.exported_invite = exported_invite
        self.bot_info = bot_info

    def to_dict(self):
        return {
            'id': self.id,
            'participants': None if self.participants is None else self.participants.to_dict(),
            'chat_photo': None if self.chat_photo is None else self.chat_photo.to_dict(),
            'notify_settings': None if self.notify_settings is None else self.notify_settings.to_dict(),
            'exported_invite': None if self.exported_invite is None else self.exported_invite.to_dict(),
            'bot_info': [] if self.bot_info is None else [None if x is None else x.to_dict() for x in self.bot_info],
        }

    def on_send(self, writer):
        writer.write_int(ChatFull.constructor_id, signed=False)
        writer.write_int(self.id)
        self.participants.on_send(writer)
        self.chat_photo.on_send(writer)
        self.notify_settings.on_send(writer)
        self.exported_invite.on_send(writer)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.bot_info))
        for _x in self.bot_info:
            _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return ChatFull(None, None, None, None, None, None)

    def on_response(self, reader):
        self.id = reader.read_int()
        self.participants = reader.tgread_object()
        self.chat_photo = reader.tgread_object()
        self.notify_settings = reader.tgread_object()
        self.exported_invite = reader.tgread_object()
        reader.read_int()  # Vector's constructor ID
        self.bot_info = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.bot_info.append(_x)

    def __repr__(self):
        return 'chatFull#2e02a614 id:int participants:ChatParticipants chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> = ChatFull'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
