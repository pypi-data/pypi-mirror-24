from ....tl.tlobject import TLObject


class File(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    upload.file#096a18d5 type:storage.FileType mtime:int bytes:bytes = upload.File"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x96a18d5
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x6c9bd728

    def __init__(self, type, mtime, bytes):
        """
        :param type: Telegram type: "storage.FileType".
        :param mtime: Telegram type: "int".
        :param bytes: Telegram type: "bytes".

        Constructor for upload.File: Instance of either File, FileCdnRedirect.
        """
        super().__init__()

        self.type = type
        self.mtime = mtime
        self.bytes = bytes

    def to_dict(self):
        return {
            'type': None if self.type is None else self.type.to_dict(),
            'mtime': self.mtime,
            'bytes': self.bytes,
        }

    def on_send(self, writer):
        writer.write_int(File.constructor_id, signed=False)
        self.type.on_send(writer)
        writer.write_int(self.mtime)
        writer.tgwrite_bytes(self.bytes)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return File(None, None, None)

    def on_response(self, reader):
        self.type = reader.tgread_object()
        self.mtime = reader.read_int()
        self.bytes = reader.tgread_bytes()

    def __repr__(self):
        return 'upload.file#096a18d5 type:storage.FileType mtime:int bytes:bytes = upload.File'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
