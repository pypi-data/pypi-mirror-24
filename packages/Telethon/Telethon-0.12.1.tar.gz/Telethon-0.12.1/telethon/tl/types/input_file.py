from ...tl.tlobject import TLObject


class InputFile(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    inputFile#f52ff27f id:long parts:int name:string md5_checksum:string = InputFile"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xf52ff27f
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xe7655f1f

    def __init__(self, id, parts, name, md5_checksum):
        """
        :param id: Telegram type: "long".
        :param parts: Telegram type: "int".
        :param name: Telegram type: "string".
        :param md5_checksum: Telegram type: "string".

        Constructor for InputFile: Instance of either InputFile, InputFileBig.
        """
        super().__init__()

        self.id = id
        self.parts = parts
        self.name = name
        self.md5_checksum = md5_checksum

    def to_dict(self):
        return {
            'id': self.id,
            'parts': self.parts,
            'name': self.name,
            'md5_checksum': self.md5_checksum,
        }

    def on_send(self, writer):
        writer.write_int(InputFile.constructor_id, signed=False)
        writer.write_long(self.id)
        writer.write_int(self.parts)
        writer.tgwrite_string(self.name)
        writer.tgwrite_string(self.md5_checksum)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return InputFile(None, None, None, None)

    def on_response(self, reader):
        self.id = reader.read_long()
        self.parts = reader.read_int()
        self.name = reader.tgread_string()
        self.md5_checksum = reader.tgread_string()

    def __repr__(self):
        return 'inputFile#f52ff27f id:long parts:int name:string md5_checksum:string = InputFile'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
