from ...tl.tlobject import TLObject


class TextEmail(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    textEmail#de5a0dd6 text:RichText email:string = RichText"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xde5a0dd6
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xf1d0b479

    def __init__(self, text, email):
        """
        :param text: Telegram type: "RichText".
        :param email: Telegram type: "string".

        Constructor for RichText: Instance of either TextEmpty, TextPlain, TextBold, TextItalic, TextUnderline, TextStrike, TextFixed, TextUrl, TextEmail, TextConcat.
        """
        super().__init__()

        self.text = text
        self.email = email

    def to_dict(self):
        return {
            'text': None if self.text is None else self.text.to_dict(),
            'email': self.email,
        }

    def on_send(self, writer):
        writer.write_int(TextEmail.constructor_id, signed=False)
        self.text.on_send(writer)
        writer.tgwrite_string(self.email)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return TextEmail(None, None)

    def on_response(self, reader):
        self.text = reader.tgread_object()
        self.email = reader.tgread_string()

    def __repr__(self):
        return 'textEmail#de5a0dd6 text:RichText email:string = RichText'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
