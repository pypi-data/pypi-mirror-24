from ...tl.tlobject import TLObject


class BadMsgNotification(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    bad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int error_code:int = BadMsgNotification"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xa7eff811
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xcebaa157

    def __init__(self, bad_msg_id, bad_msg_seqno, error_code):
        """
        :param bad_msg_id: Telegram type: "long".
        :param bad_msg_seqno: Telegram type: "int".
        :param error_code: Telegram type: "int".

        Constructor for BadMsgNotification: Instance of either BadMsgNotification, BadServerSalt.
        """
        super().__init__()

        self.bad_msg_id = bad_msg_id
        self.bad_msg_seqno = bad_msg_seqno
        self.error_code = error_code

    def to_dict(self):
        return {
            'bad_msg_id': self.bad_msg_id,
            'bad_msg_seqno': self.bad_msg_seqno,
            'error_code': self.error_code,
        }

    def on_send(self, writer):
        writer.write_int(BadMsgNotification.constructor_id, signed=False)
        writer.write_long(self.bad_msg_id)
        writer.write_int(self.bad_msg_seqno)
        writer.write_int(self.error_code)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return BadMsgNotification(None, None, None)

    def on_response(self, reader):
        self.bad_msg_id = reader.read_long()
        self.bad_msg_seqno = reader.read_int()
        self.error_code = reader.read_int()

    def __repr__(self):
        return 'bad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int error_code:int = BadMsgNotification'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
