from ...tl.tlobject import TLObject


class ClientDHInnerData(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    client_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:string = Client_DH_Inner_Data"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x6643b654
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xf8eeef6a

    def __init__(self, nonce, server_nonce, retry_id, g_b):
        """
        :param nonce: Telegram type: "int128".
        :param server_nonce: Telegram type: "int128".
        :param retry_id: Telegram type: "long".
        :param g_b: Telegram type: "string".

        Constructor for Client_DH_Inner_Data: Instance of ClientDHInnerData.
        """
        super().__init__()

        self.nonce = nonce
        self.server_nonce = server_nonce
        self.retry_id = retry_id
        self.g_b = g_b

    def to_dict(self):
        return {
            'nonce': self.nonce,
            'server_nonce': self.server_nonce,
            'retry_id': self.retry_id,
            'g_b': self.g_b,
        }

    def on_send(self, writer):
        writer.write_int(ClientDHInnerData.constructor_id, signed=False)
        writer.write_large_int(self.nonce, bits=128)
        writer.write_large_int(self.server_nonce, bits=128)
        writer.write_long(self.retry_id)
        writer.tgwrite_string(self.g_b)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return ClientDHInnerData(None, None, None, None)

    def on_response(self, reader):
        self.nonce = reader.read_large_int(bits=128)
        self.server_nonce = reader.read_large_int(bits=128)
        self.retry_id = reader.read_long()
        self.g_b = reader.tgread_string()

    def __repr__(self):
        return 'client_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:string = Client_DH_Inner_Data'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
