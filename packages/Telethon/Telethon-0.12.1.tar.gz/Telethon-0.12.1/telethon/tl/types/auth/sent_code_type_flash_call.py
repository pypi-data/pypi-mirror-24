from ....tl.tlobject import TLObject


class SentCodeTypeFlashCall(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    auth.sentCodeTypeFlashCall#ab03c6d9 pattern:string = auth.SentCodeType"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xab03c6d9
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xff5b158e

    def __init__(self, pattern):
        """
        :param pattern: Telegram type: "string".

        Constructor for auth.SentCodeType: Instance of either SentCodeTypeApp, SentCodeTypeSms, SentCodeTypeCall, SentCodeTypeFlashCall.
        """
        super().__init__()

        self.pattern = pattern

    def to_dict(self):
        return {
            'pattern': self.pattern,
        }

    def on_send(self, writer):
        writer.write_int(SentCodeTypeFlashCall.constructor_id, signed=False)
        writer.tgwrite_string(self.pattern)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return SentCodeTypeFlashCall(None)

    def on_response(self, reader):
        self.pattern = reader.tgread_string()

    def __repr__(self):
        return 'auth.sentCodeTypeFlashCall#ab03c6d9 pattern:string = auth.SentCodeType'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
