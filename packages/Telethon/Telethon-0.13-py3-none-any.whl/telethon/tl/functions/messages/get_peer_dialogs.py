from ....tl.tlobject import TLObject
from ....utils import get_input_peer


class GetPeerDialogsRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x2d9776b9
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x3ac70132

    def __init__(self, peers):
        """
        :param peers: Telegram type: "InputPeer". Must be a list.

        :returns messages.PeerDialogs: Instance of PeerDialogs.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.peers = [get_input_peer(_x) for _x in peers]

    def to_dict(self):
        return {
            'peers': [] if self.peers is None else [None if x is None else x.to_dict() for x in self.peers],
        }

    def on_send(self, writer):
        writer.write_int(GetPeerDialogsRequest.constructor_id, signed=False)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.peers))
        for _x in self.peers:
            _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return GetPeerDialogsRequest(None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
