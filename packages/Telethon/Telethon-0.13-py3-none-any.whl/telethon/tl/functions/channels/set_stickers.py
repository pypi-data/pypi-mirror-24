from ....tl.tlobject import TLObject
from ....utils import get_input_channel


class SetStickersRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xea8ca4f9
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xf5b399ac

    def __init__(self, channel, stickerset):
        """
        :param channel: Telegram type: "InputChannel".
        :param stickerset: Telegram type: "InputStickerSet".

        :returns Bool: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.stickerset = stickerset

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'stickerset': None if self.stickerset is None else self.stickerset.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(SetStickersRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        self.stickerset.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return SetStickersRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
