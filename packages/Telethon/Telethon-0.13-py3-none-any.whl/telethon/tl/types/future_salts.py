from ...tl.tlobject import TLObject


class FutureSalts(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    future_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xae500895
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x1090f517

    def __init__(self, req_msg_id, now, salts):
        """
        :param req_msg_id: Telegram type: "long".
        :param now: Telegram type: "int".
        :param salts: Telegram type: "future_salt". Must be a list.

        Constructor for FutureSalts: Instance of FutureSalts.
        """
        super().__init__()

        self.req_msg_id = req_msg_id
        self.now = now
        self.salts = salts

    def to_dict(self):
        return {
            'req_msg_id': self.req_msg_id,
            'now': self.now,
            'salts': [] if self.salts is None else [None if x is None else x.to_dict() for x in self.salts],
        }

    def on_send(self, writer):
        writer.write_int(FutureSalts.constructor_id, signed=False)
        writer.write_long(self.req_msg_id)
        writer.write_int(self.now)
        writer.write_int(len(self.salts))
        for _x in self.salts:
            _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return FutureSalts(None, None, None)

    def on_response(self, reader):
        self.req_msg_id = reader.read_long()
        self.now = reader.read_int()
        self.salts = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.salts.append(_x)

    def __repr__(self):
        return 'future_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
