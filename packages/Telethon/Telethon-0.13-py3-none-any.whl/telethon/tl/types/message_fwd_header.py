from ...tl.tlobject import TLObject


class MessageFwdHeader(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    messageFwdHeader#fadff4ac flags:# from_id:flags.0?int date:int channel_id:flags.1?int channel_post:flags.2?int post_author:flags.3?string = MessageFwdHeader"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xfadff4ac
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x7a286804

    def __init__(self, date, from_id=None, channel_id=None, channel_post=None, post_author=None):
        """
        :param from_id: Telegram type: "int".
        :param date: Telegram type: "date".
        :param channel_id: Telegram type: "int".
        :param channel_post: Telegram type: "int".
        :param post_author: Telegram type: "string".

        Constructor for MessageFwdHeader: Instance of MessageFwdHeader.
        """
        super().__init__()

        self.from_id = from_id
        self.date = date
        self.channel_id = channel_id
        self.channel_post = channel_post
        self.post_author = post_author

    def to_dict(self):
        return {
            'from_id': self.from_id,
            'date': self.date,
            'channel_id': self.channel_id,
            'channel_post': self.channel_post,
            'post_author': self.post_author,
        }

    def on_send(self, writer):
        writer.write_int(MessageFwdHeader.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.from_id else 0
        flags |= (1 << 1) if self.channel_id else 0
        flags |= (1 << 2) if self.channel_post else 0
        flags |= (1 << 3) if self.post_author else 0
        writer.write_int(flags)

        if self.from_id:
            writer.write_int(self.from_id)

        writer.tgwrite_date(self.date)
        if self.channel_id:
            writer.write_int(self.channel_id)

        if self.channel_post:
            writer.write_int(self.channel_post)

        if self.post_author:
            writer.tgwrite_string(self.post_author)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return MessageFwdHeader(None, None, None, None, None)

    def on_response(self, reader):
        flags = reader.read_int()

        if (flags & (1 << 0)) != 0:
            self.from_id = reader.read_int()

        self.date = reader.tgread_date()
        if (flags & (1 << 1)) != 0:
            self.channel_id = reader.read_int()

        if (flags & (1 << 2)) != 0:
            self.channel_post = reader.read_int()

        if (flags & (1 << 3)) != 0:
            self.post_author = reader.tgread_string()

    def __repr__(self):
        return 'messageFwdHeader#fadff4ac flags:# from_id:flags.0?int date:int channel_id:flags.1?int channel_post:flags.2?int post_author:flags.3?string = MessageFwdHeader'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
