from ...tl.tlobject import TLObject


class MaskCoords(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    maskCoords#aed6dbb2 n:int x:double y:double zoom:double = MaskCoords"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xaed6dbb2
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x6bbb2fd

    def __init__(self, n, x, y, zoom):
        """
        :param n: Telegram type: "int".
        :param x: Telegram type: "double".
        :param y: Telegram type: "double".
        :param zoom: Telegram type: "double".

        Constructor for MaskCoords: Instance of MaskCoords.
        """
        super().__init__()

        self.n = n
        self.x = x
        self.y = y
        self.zoom = zoom

    def to_dict(self):
        return {
            'n': self.n,
            'x': self.x,
            'y': self.y,
            'zoom': self.zoom,
        }

    def on_send(self, writer):
        writer.write_int(MaskCoords.constructor_id, signed=False)
        writer.write_int(self.n)
        writer.write_double(self.x)
        writer.write_double(self.y)
        writer.write_double(self.zoom)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return MaskCoords(None, None, None, None)

    def on_response(self, reader):
        self.n = reader.read_int()
        self.x = reader.read_double()
        self.y = reader.read_double()
        self.zoom = reader.read_double()

    def __repr__(self):
        return 'maskCoords#aed6dbb2 n:int x:double y:double zoom:double = MaskCoords'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
