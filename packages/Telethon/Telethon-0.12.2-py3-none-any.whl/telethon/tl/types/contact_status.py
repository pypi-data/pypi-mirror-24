from ...tl.tlobject import TLObject


class ContactStatus(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    contactStatus#d3680c61 user_id:int status:UserStatus = ContactStatus"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xd3680c61
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x68c0d74c

    def __init__(self, user_id, status):
        """
        :param user_id: Telegram type: "int".
        :param status: Telegram type: "UserStatus".

        Constructor for ContactStatus: Instance of ContactStatus.
        """
        super().__init__()

        self.user_id = user_id
        self.status = status

    def to_dict(self):
        return {
            'user_id': self.user_id,
            'status': None if self.status is None else self.status.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(ContactStatus.constructor_id, signed=False)
        writer.write_int(self.user_id)
        self.status.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return ContactStatus(None, None)

    def on_response(self, reader):
        self.user_id = reader.read_int()
        self.status = reader.tgread_object()

    def __repr__(self):
        return 'contactStatus#d3680c61 user_id:int status:UserStatus = ContactStatus'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
