from ...tl.tlobject import TLObject


class Game(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    game#bdf9653b flags:# id:long access_hash:long short_name:string title:string description:string photo:Photo document:flags.0?Document = Game"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xbdf9653b
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x83199eb2

    def __init__(self, id, access_hash, short_name, title, description, photo, document=None):
        """
        :param id: Telegram type: "long".
        :param access_hash: Telegram type: "long".
        :param short_name: Telegram type: "string".
        :param title: Telegram type: "string".
        :param description: Telegram type: "string".
        :param photo: Telegram type: "Photo".
        :param document: Telegram type: "Document".

        Constructor for Game: Instance of Game.
        """
        super().__init__()

        self.id = id
        self.access_hash = access_hash
        self.short_name = short_name
        self.title = title
        self.description = description
        self.photo = photo
        self.document = document

    def to_dict(self):
        return {
            'id': self.id,
            'access_hash': self.access_hash,
            'short_name': self.short_name,
            'title': self.title,
            'description': self.description,
            'photo': None if self.photo is None else self.photo.to_dict(),
            'document': None if self.document is None else self.document.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(Game.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.document else 0
        writer.write_int(flags)

        writer.write_long(self.id)
        writer.write_long(self.access_hash)
        writer.tgwrite_string(self.short_name)
        writer.tgwrite_string(self.title)
        writer.tgwrite_string(self.description)
        self.photo.on_send(writer)
        if self.document:
            self.document.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return Game(None, None, None, None, None, None, None)

    def on_response(self, reader):
        flags = reader.read_int()

        self.id = reader.read_long()
        self.access_hash = reader.read_long()
        self.short_name = reader.tgread_string()
        self.title = reader.tgread_string()
        self.description = reader.tgread_string()
        self.photo = reader.tgread_object()
        if (flags & (1 << 0)) != 0:
            self.document = reader.tgread_object()

    def __repr__(self):
        return 'game#bdf9653b flags:# id:long access_hash:long short_name:string title:string description:string photo:Photo document:flags.0?Document = Game'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
