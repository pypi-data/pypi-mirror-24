from ...tl.tlobject import TLObject


class PageFull(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    pageFull#556ec7aa blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> = Page"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x556ec7aa
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xb438191e

    def __init__(self, blocks, photos, documents):
        """
        :param blocks: Telegram type: "PageBlock". Must be a list.
        :param photos: Telegram type: "Photo". Must be a list.
        :param documents: Telegram type: "Document". Must be a list.

        Constructor for Page: Instance of either PagePart, PageFull.
        """
        super().__init__()

        self.blocks = blocks
        self.photos = photos
        self.documents = documents

    def to_dict(self):
        return {
            'blocks': [] if self.blocks is None else [None if x is None else x.to_dict() for x in self.blocks],
            'photos': [] if self.photos is None else [None if x is None else x.to_dict() for x in self.photos],
            'documents': [] if self.documents is None else [None if x is None else x.to_dict() for x in self.documents],
        }

    def on_send(self, writer):
        writer.write_int(PageFull.constructor_id, signed=False)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.blocks))
        for _x in self.blocks:
            _x.on_send(writer)

        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.photos))
        for _x in self.photos:
            _x.on_send(writer)

        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.documents))
        for _x in self.documents:
            _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return PageFull(None, None, None)

    def on_response(self, reader):
        reader.read_int()  # Vector's constructor ID
        self.blocks = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.blocks.append(_x)

        reader.read_int()  # Vector's constructor ID
        self.photos = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.photos.append(_x)

        reader.read_int()  # Vector's constructor ID
        self.documents = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.documents.append(_x)

    def __repr__(self):
        return 'pageFull#556ec7aa blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> = Page'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
