from ....tl.tlobject import TLObject


class ValidatedRequestedInfo(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    payments.validatedRequestedInfo#d1451883 flags:# id:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = payments.ValidatedRequestedInfo"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xd1451883
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x8f8044b7

    def __init__(self, id=None, shipping_options=None):
        """
        :param id: Telegram type: "string".
        :param shipping_options: Telegram type: "ShippingOption". Must be a list.

        Constructor for payments.ValidatedRequestedInfo: Instance of ValidatedRequestedInfo.
        """
        super().__init__()

        self.id = id
        self.shipping_options = shipping_options

    def to_dict(self):
        return {
            'id': self.id,
            'shipping_options': [] if self.shipping_options is None else [None if x is None else x.to_dict() for x in self.shipping_options],
        }

    def on_send(self, writer):
        writer.write_int(ValidatedRequestedInfo.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.id else 0
        flags |= (1 << 1) if self.shipping_options else 0
        writer.write_int(flags)

        if self.id:
            writer.tgwrite_string(self.id)

        if self.shipping_options:
            writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
            writer.write_int(len(self.shipping_options))
            for _x in self.shipping_options:
                if _x:
                    _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return ValidatedRequestedInfo(None, None)

    def on_response(self, reader):
        flags = reader.read_int()

        if (flags & (1 << 0)) != 0:
            self.id = reader.tgread_string()

        if (flags & (1 << 1)) != 0:
            reader.read_int()  # Vector's constructor ID
            self.shipping_options = []  # Initialize an empty list
            _len = reader.read_int()
            for _ in range(_len):
                _x = reader.tgread_object()
                self.shipping_options.append(_x)

    def __repr__(self):
        return 'payments.validatedRequestedInfo#d1451883 flags:# id:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = payments.ValidatedRequestedInfo'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
