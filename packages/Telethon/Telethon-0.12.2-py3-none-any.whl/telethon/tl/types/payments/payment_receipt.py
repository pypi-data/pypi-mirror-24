from ....tl.tlobject import TLObject


class PaymentReceipt(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    payments.paymentReceipt#500911e1 flags:# date:int bot_id:int invoice:Invoice provider_id:int info:flags.0?PaymentRequestedInfo shipping:flags.1?ShippingOption currency:string total_amount:long credentials_title:string users:Vector<User> = payments.PaymentReceipt"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x500911e1
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x590093c9

    def __init__(self, date, bot_id, invoice, provider_id, currency, total_amount, credentials_title, users, info=None, shipping=None):
        """
        :param date: Telegram type: "date".
        :param bot_id: Telegram type: "int".
        :param invoice: Telegram type: "Invoice".
        :param provider_id: Telegram type: "int".
        :param info: Telegram type: "PaymentRequestedInfo".
        :param shipping: Telegram type: "ShippingOption".
        :param currency: Telegram type: "string".
        :param total_amount: Telegram type: "long".
        :param credentials_title: Telegram type: "string".
        :param users: Telegram type: "User". Must be a list.

        Constructor for payments.PaymentReceipt: Instance of PaymentReceipt.
        """
        super().__init__()

        self.date = date
        self.bot_id = bot_id
        self.invoice = invoice
        self.provider_id = provider_id
        self.info = info
        self.shipping = shipping
        self.currency = currency
        self.total_amount = total_amount
        self.credentials_title = credentials_title
        self.users = users

    def to_dict(self):
        return {
            'date': self.date,
            'bot_id': self.bot_id,
            'invoice': None if self.invoice is None else self.invoice.to_dict(),
            'provider_id': self.provider_id,
            'info': None if self.info is None else self.info.to_dict(),
            'shipping': None if self.shipping is None else self.shipping.to_dict(),
            'currency': self.currency,
            'total_amount': self.total_amount,
            'credentials_title': self.credentials_title,
            'users': [] if self.users is None else [None if x is None else x.to_dict() for x in self.users],
        }

    def on_send(self, writer):
        writer.write_int(PaymentReceipt.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.info else 0
        flags |= (1 << 1) if self.shipping else 0
        writer.write_int(flags)

        writer.tgwrite_date(self.date)
        writer.write_int(self.bot_id)
        self.invoice.on_send(writer)
        writer.write_int(self.provider_id)
        if self.info:
            self.info.on_send(writer)

        if self.shipping:
            self.shipping.on_send(writer)

        writer.tgwrite_string(self.currency)
        writer.write_long(self.total_amount)
        writer.tgwrite_string(self.credentials_title)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.users))
        for _x in self.users:
            _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return PaymentReceipt(None, None, None, None, None, None, None, None, None, None)

    def on_response(self, reader):
        flags = reader.read_int()

        self.date = reader.tgread_date()
        self.bot_id = reader.read_int()
        self.invoice = reader.tgread_object()
        self.provider_id = reader.read_int()
        if (flags & (1 << 0)) != 0:
            self.info = reader.tgread_object()

        if (flags & (1 << 1)) != 0:
            self.shipping = reader.tgread_object()

        self.currency = reader.tgread_string()
        self.total_amount = reader.read_long()
        self.credentials_title = reader.tgread_string()
        reader.read_int()  # Vector's constructor ID
        self.users = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.users.append(_x)

    def __repr__(self):
        return 'payments.paymentReceipt#500911e1 flags:# date:int bot_id:int invoice:Invoice provider_id:int info:flags.0?PaymentRequestedInfo shipping:flags.1?ShippingOption currency:string total_amount:long credentials_title:string users:Vector<User> = payments.PaymentReceipt'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
