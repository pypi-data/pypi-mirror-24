from ...tl.tlobject import TLObject


class RpcError(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    rpc_error#2144ca19 error_code:int error_message:string = RpcError"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x2144ca19
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x4a17e265

    def __init__(self, error_code, error_message):
        """
        :param error_code: Telegram type: "int".
        :param error_message: Telegram type: "string".

        Constructor for RpcError: Instance of RpcError.
        """
        super().__init__()

        self.error_code = error_code
        self.error_message = error_message

    def to_dict(self):
        return {
            'error_code': self.error_code,
            'error_message': self.error_message,
        }

    def on_send(self, writer):
        writer.write_int(RpcError.constructor_id, signed=False)
        writer.write_int(self.error_code)
        writer.tgwrite_string(self.error_message)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return RpcError(None, None)

    def on_response(self, reader):
        self.error_code = reader.read_int()
        self.error_message = reader.tgread_string()

    def __repr__(self):
        return 'rpc_error#2144ca19 error_code:int error_message:string = RpcError'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
