from ...tl.tlobject import TLObject


class PhotoSize(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    photoSize#77bfb61b type:string location:FileLocation w:int h:int size:int = PhotoSize"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x77bfb61b
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x17cc29d9

    def __init__(self, type, location, w, h, size):
        """
        :param type: Telegram type: "string".
        :param location: Telegram type: "FileLocation".
        :param w: Telegram type: "int".
        :param h: Telegram type: "int".
        :param size: Telegram type: "int".

        Constructor for PhotoSize: Instance of either PhotoSizeEmpty, PhotoSize, PhotoCachedSize.
        """
        super().__init__()

        self.type = type
        self.location = location
        self.w = w
        self.h = h
        self.size = size

    def to_dict(self):
        return {
            'type': self.type,
            'location': None if self.location is None else self.location.to_dict(),
            'w': self.w,
            'h': self.h,
            'size': self.size,
        }

    def on_send(self, writer):
        writer.write_int(PhotoSize.constructor_id, signed=False)
        writer.tgwrite_string(self.type)
        self.location.on_send(writer)
        writer.write_int(self.w)
        writer.write_int(self.h)
        writer.write_int(self.size)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return PhotoSize(None, None, None, None, None)

    def on_response(self, reader):
        self.type = reader.tgread_string()
        self.location = reader.tgread_object()
        self.w = reader.read_int()
        self.h = reader.read_int()
        self.size = reader.read_int()

    def __repr__(self):
        return 'photoSize#77bfb61b type:string location:FileLocation w:int h:int size:int = PhotoSize'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
