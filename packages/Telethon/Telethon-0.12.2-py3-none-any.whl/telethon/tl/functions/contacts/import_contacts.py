from ....tl.tlobject import TLObject


class ImportContactsRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    contacts.importContacts#da30b32d contacts:Vector<InputContact> replace:Bool = contacts.ImportedContacts"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xda30b32d
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x8172ad93

    def __init__(self, contacts, replace):
        """
        :param contacts: Telegram type: "InputContact". Must be a list.
        :param replace: Telegram type: "Bool".

        :returns contacts.ImportedContacts: Instance of ImportedContacts.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.contacts = contacts
        self.replace = replace

    def to_dict(self):
        return {
            'contacts': [] if self.contacts is None else [None if x is None else x.to_dict() for x in self.contacts],
            'replace': self.replace,
        }

    def on_send(self, writer):
        writer.write_int(ImportContactsRequest.constructor_id, signed=False)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.contacts))
        for _x in self.contacts:
            _x.on_send(writer)

        writer.tgwrite_bool(self.replace)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return ImportContactsRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'contacts.importContacts#da30b32d contacts:Vector<InputContact> replace:Bool = contacts.ImportedContacts'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
