from ....tl.tlobject import TLObject


class GetDocumentByHashRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x338e2464
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x211fe820

    def __init__(self, sha256, size, mime_type):
        """
        :param sha256: Telegram type: "bytes".
        :param size: Telegram type: "int".
        :param mime_type: Telegram type: "string".

        :returns Document: Instance of either DocumentEmpty, Document.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.sha256 = sha256
        self.size = size
        self.mime_type = mime_type

    def to_dict(self):
        return {
            'sha256': self.sha256,
            'size': self.size,
            'mime_type': self.mime_type,
        }

    def on_send(self, writer):
        writer.write_int(GetDocumentByHashRequest.constructor_id, signed=False)
        writer.tgwrite_bytes(self.sha256)
        writer.write_int(self.size)
        writer.tgwrite_string(self.mime_type)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return GetDocumentByHashRequest(None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
