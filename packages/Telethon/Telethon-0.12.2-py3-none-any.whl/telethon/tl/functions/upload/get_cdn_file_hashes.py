from ....tl.tlobject import TLObject


class GetCdnFileHashesRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xf715c87b
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x7ec58e40

    def __init__(self, file_token, offset):
        """
        :param file_token: Telegram type: "bytes".
        :param offset: Telegram type: "int".

        :returns Vector<CdnFileHash>: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.file_token = file_token
        self.offset = offset

    def to_dict(self):
        return {
            'file_token': self.file_token,
            'offset': self.offset,
        }

    def on_send(self, writer):
        writer.write_int(GetCdnFileHashesRequest.constructor_id, signed=False)
        writer.tgwrite_bytes(self.file_token)
        writer.write_int(self.offset)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return GetCdnFileHashesRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_vector()

    def __repr__(self):
        return 'upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
