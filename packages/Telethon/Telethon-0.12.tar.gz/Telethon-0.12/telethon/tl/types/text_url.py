from ...tl.tlobject import TLObject


class TextUrl(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    textUrl#3c2884c1 text:RichText url:string webpage_id:long = RichText"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x3c2884c1
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xf1d0b479

    def __init__(self, text, url, webpage_id):
        """
        :param text: Telegram type: "RichText".
        :param url: Telegram type: "string".
        :param webpage_id: Telegram type: "long".

        Constructor for RichText: Instance of either TextEmpty, TextPlain, TextBold, TextItalic, TextUnderline, TextStrike, TextFixed, TextUrl, TextEmail, TextConcat.
        """
        super().__init__()

        self.text = text
        self.url = url
        self.webpage_id = webpage_id

    def to_dict(self):
        return {
            'text': None if self.text is None else self.text.to_dict(),
            'url': self.url,
            'webpage_id': self.webpage_id,
        }

    def on_send(self, writer):
        writer.write_int(TextUrl.constructor_id, signed=False)
        self.text.on_send(writer)
        writer.tgwrite_string(self.url)
        writer.write_long(self.webpage_id)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return TextUrl(None, None, None)

    def on_response(self, reader):
        self.text = reader.tgread_object()
        self.url = reader.tgread_string()
        self.webpage_id = reader.read_long()

    def __repr__(self):
        return 'textUrl#3c2884c1 text:RichText url:string webpage_id:long = RichText'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
