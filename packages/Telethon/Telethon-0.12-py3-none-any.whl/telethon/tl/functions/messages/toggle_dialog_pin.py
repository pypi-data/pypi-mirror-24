from ....tl.tlobject import TLObject
from ....utils import get_input_peer


class ToggleDialogPinRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x3289be6a
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xf5b399ac

    def __init__(self, peer, pinned=None):
        """
        :param pinned: Telegram type: "true".
        :param peer: Telegram type: "InputPeer".

        :returns Bool: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.pinned = pinned
        self.peer = get_input_peer(peer)

    def to_dict(self):
        return {
            'pinned': self.pinned,
            'peer': None if self.peer is None else self.peer.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(ToggleDialogPinRequest.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.pinned else 0
        writer.write_int(flags)

        self.peer.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return ToggleDialogPinRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
