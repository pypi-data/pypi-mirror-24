from ....tl.tlobject import TLObject
from ....utils import get_input_peer


class GetDialogsRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x191ba9c5
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xe1b52ee

    def __init__(self, offset_date, offset_id, offset_peer, limit, exclude_pinned=None):
        """
        :param exclude_pinned: Telegram type: "true".
        :param offset_date: Telegram type: "date".
        :param offset_id: Telegram type: "int".
        :param offset_peer: Telegram type: "InputPeer".
        :param limit: Telegram type: "int".

        :returns messages.Dialogs: Instance of either Dialogs, DialogsSlice.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.exclude_pinned = exclude_pinned
        self.offset_date = offset_date
        self.offset_id = offset_id
        self.offset_peer = get_input_peer(offset_peer)
        self.limit = limit

    def to_dict(self):
        return {
            'exclude_pinned': self.exclude_pinned,
            'offset_date': self.offset_date,
            'offset_id': self.offset_id,
            'offset_peer': None if self.offset_peer is None else self.offset_peer.to_dict(),
            'limit': self.limit,
        }

    def on_send(self, writer):
        writer.write_int(GetDialogsRequest.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.exclude_pinned else 0
        writer.write_int(flags)

        writer.tgwrite_date(self.offset_date)
        writer.write_int(self.offset_id)
        self.offset_peer.on_send(writer)
        writer.write_int(self.limit)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return GetDialogsRequest(None, None, None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
