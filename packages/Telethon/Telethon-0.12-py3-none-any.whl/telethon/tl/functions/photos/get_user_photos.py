from ....tl.tlobject import TLObject
from ....utils import get_input_user


class GetUserPhotosRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x91cd32a8
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x27cfb967

    def __init__(self, user_id, offset, max_id, limit):
        """
        :param user_id: Telegram type: "InputUser".
        :param offset: Telegram type: "int".
        :param max_id: Telegram type: "long".
        :param limit: Telegram type: "int".

        :returns photos.Photos: Instance of either Photos, PhotosSlice.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.user_id = get_input_user(user_id)
        self.offset = offset
        self.max_id = max_id
        self.limit = limit

    def to_dict(self):
        return {
            'user_id': None if self.user_id is None else self.user_id.to_dict(),
            'offset': self.offset,
            'max_id': self.max_id,
            'limit': self.limit,
        }

    def on_send(self, writer):
        writer.write_int(GetUserPhotosRequest.constructor_id, signed=False)
        self.user_id.on_send(writer)
        writer.write_int(self.offset)
        writer.write_long(self.max_id)
        writer.write_int(self.limit)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return GetUserPhotosRequest(None, None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
