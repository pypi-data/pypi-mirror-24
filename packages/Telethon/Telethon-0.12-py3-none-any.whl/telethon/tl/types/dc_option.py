from ...tl.tlobject import TLObject


class DcOption(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    dcOption#05d8c6cc flags:# ipv6:flags.0?true media_only:flags.1?true tcpo_only:flags.2?true cdn:flags.3?true static:flags.4?true id:int ip_address:string port:int = DcOption"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x5d8c6cc
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x9e43e123

    def __init__(self, id, ip_address, port, ipv6=None, media_only=None, tcpo_only=None, cdn=None, static=None):
        """
        :param ipv6: Telegram type: "true".
        :param media_only: Telegram type: "true".
        :param tcpo_only: Telegram type: "true".
        :param cdn: Telegram type: "true".
        :param static: Telegram type: "true".
        :param id: Telegram type: "int".
        :param ip_address: Telegram type: "string".
        :param port: Telegram type: "int".

        Constructor for DcOption: Instance of DcOption.
        """
        super().__init__()

        self.ipv6 = ipv6
        self.media_only = media_only
        self.tcpo_only = tcpo_only
        self.cdn = cdn
        self.static = static
        self.id = id
        self.ip_address = ip_address
        self.port = port

    def to_dict(self):
        return {
            'ipv6': self.ipv6,
            'media_only': self.media_only,
            'tcpo_only': self.tcpo_only,
            'cdn': self.cdn,
            'static': self.static,
            'id': self.id,
            'ip_address': self.ip_address,
            'port': self.port,
        }

    def on_send(self, writer):
        writer.write_int(DcOption.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.ipv6 else 0
        flags |= (1 << 1) if self.media_only else 0
        flags |= (1 << 2) if self.tcpo_only else 0
        flags |= (1 << 3) if self.cdn else 0
        flags |= (1 << 4) if self.static else 0
        writer.write_int(flags)

        writer.write_int(self.id)
        writer.tgwrite_string(self.ip_address)
        writer.write_int(self.port)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return DcOption(None, None, None, None, None, None, None, None)

    def on_response(self, reader):
        flags = reader.read_int()

        if (flags & (1 << 0)) != 0:
            self.ipv6 = True  # Arbitrary not-None value, no need to read since it is a flag

        if (flags & (1 << 1)) != 0:
            self.media_only = True  # Arbitrary not-None value, no need to read since it is a flag

        if (flags & (1 << 2)) != 0:
            self.tcpo_only = True  # Arbitrary not-None value, no need to read since it is a flag

        if (flags & (1 << 3)) != 0:
            self.cdn = True  # Arbitrary not-None value, no need to read since it is a flag

        if (flags & (1 << 4)) != 0:
            self.static = True  # Arbitrary not-None value, no need to read since it is a flag

        self.id = reader.read_int()
        self.ip_address = reader.tgread_string()
        self.port = reader.read_int()

    def __repr__(self):
        return 'dcOption#05d8c6cc flags:# ipv6:flags.0?true media_only:flags.1?true tcpo_only:flags.2?true cdn:flags.3?true static:flags.4?true id:int ip_address:string port:int = DcOption'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
