from ...tl.tlobject import TLObject


class PageBlockAuthorDate(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    pageBlockAuthorDate#baafe5e0 author:RichText published_date:int = PageBlock"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xbaafe5e0
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x1aca5644

    def __init__(self, author, published_date):
        """
        :param author: Telegram type: "RichText".
        :param published_date: Telegram type: "date".

        Constructor for PageBlock: Instance of either PageBlockUnsupported, PageBlockTitle, PageBlockSubtitle, PageBlockAuthorDate, PageBlockHeader, PageBlockSubheader, PageBlockParagraph, PageBlockPreformatted, PageBlockFooter, PageBlockDivider, PageBlockAnchor, PageBlockList, PageBlockBlockquote, PageBlockPullquote, PageBlockPhoto, PageBlockVideo, PageBlockCover, PageBlockEmbed, PageBlockEmbedPost, PageBlockCollage, PageBlockSlideshow, PageBlockChannel, PageBlockAudio.
        """
        super().__init__()

        self.author = author
        self.published_date = published_date

    def to_dict(self):
        return {
            'author': None if self.author is None else self.author.to_dict(),
            'published_date': self.published_date,
        }

    def on_send(self, writer):
        writer.write_int(PageBlockAuthorDate.constructor_id, signed=False)
        self.author.on_send(writer)
        writer.tgwrite_date(self.published_date)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return PageBlockAuthorDate(None, None)

    def on_response(self, reader):
        self.author = reader.tgread_object()
        self.published_date = reader.tgread_date()

    def __repr__(self):
        return 'pageBlockAuthorDate#baafe5e0 author:RichText published_date:int = PageBlock'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
