from ...tl.tlobject import TLObject


class ReplyKeyboardMarkup(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    replyKeyboardMarkup#3502758c flags:# resize:flags.0?true single_use:flags.1?true selective:flags.2?true rows:Vector<KeyboardButtonRow> = ReplyMarkup"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x3502758c
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xe2e10ef2

    def __init__(self, rows, resize=None, single_use=None, selective=None):
        """
        :param resize: Telegram type: "true".
        :param single_use: Telegram type: "true".
        :param selective: Telegram type: "true".
        :param rows: Telegram type: "KeyboardButtonRow". Must be a list.

        Constructor for ReplyMarkup: Instance of either ReplyKeyboardHide, ReplyKeyboardForceReply, ReplyKeyboardMarkup, ReplyInlineMarkup.
        """
        super().__init__()

        self.resize = resize
        self.single_use = single_use
        self.selective = selective
        self.rows = rows

    def to_dict(self):
        return {
            'resize': self.resize,
            'single_use': self.single_use,
            'selective': self.selective,
            'rows': [] if self.rows is None else [None if x is None else x.to_dict() for x in self.rows],
        }

    def on_send(self, writer):
        writer.write_int(ReplyKeyboardMarkup.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.resize else 0
        flags |= (1 << 1) if self.single_use else 0
        flags |= (1 << 2) if self.selective else 0
        writer.write_int(flags)

        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.rows))
        for _x in self.rows:
            _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return ReplyKeyboardMarkup(None, None, None, None)

    def on_response(self, reader):
        flags = reader.read_int()

        if (flags & (1 << 0)) != 0:
            self.resize = True  # Arbitrary not-None value, no need to read since it is a flag

        if (flags & (1 << 1)) != 0:
            self.single_use = True  # Arbitrary not-None value, no need to read since it is a flag

        if (flags & (1 << 2)) != 0:
            self.selective = True  # Arbitrary not-None value, no need to read since it is a flag

        reader.read_int()  # Vector's constructor ID
        self.rows = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.rows.append(_x)

    def __repr__(self):
        return 'replyKeyboardMarkup#3502758c flags:# resize:flags.0?true single_use:flags.1?true selective:flags.2?true rows:Vector<KeyboardButtonRow> = ReplyMarkup'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
