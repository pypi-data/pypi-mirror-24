from ...tl.tlobject import TLObject


class RpcAnswerDropped(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    rpc_answer_dropped#a43ad8b7 msg_id:long seq_no:int bytes:int = RpcDropAnswer"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xa43ad8b7
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x4bca7570

    def __init__(self, msg_id, seq_no, bytes):
        """
        :param msg_id: Telegram type: "long".
        :param seq_no: Telegram type: "int".
        :param bytes: Telegram type: "int".

        Constructor for RpcDropAnswer: Instance of either RpcAnswerUnknown, RpcAnswerDroppedRunning, RpcAnswerDropped.
        """
        super().__init__()

        self.msg_id = msg_id
        self.seq_no = seq_no
        self.bytes = bytes

    def to_dict(self):
        return {
            'msg_id': self.msg_id,
            'seq_no': self.seq_no,
            'bytes': self.bytes,
        }

    def on_send(self, writer):
        writer.write_int(RpcAnswerDropped.constructor_id, signed=False)
        writer.write_long(self.msg_id)
        writer.write_int(self.seq_no)
        writer.write_int(self.bytes)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return RpcAnswerDropped(None, None, None)

    def on_response(self, reader):
        self.msg_id = reader.read_long()
        self.seq_no = reader.read_int()
        self.bytes = reader.read_int()

    def __repr__(self):
        return 'rpc_answer_dropped#a43ad8b7 msg_id:long seq_no:int bytes:int = RpcDropAnswer'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
