from ...tl.tlobject import TLObject


class TextConcat(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    textConcat#7e6260d7 texts:Vector<RichText> = RichText"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x7e6260d7
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xf1d0b479

    def __init__(self, texts):
        """
        :param texts: Telegram type: "RichText". Must be a list.

        Constructor for RichText: Instance of either TextEmpty, TextPlain, TextBold, TextItalic, TextUnderline, TextStrike, TextFixed, TextUrl, TextEmail, TextConcat.
        """
        super().__init__()

        self.texts = texts

    def to_dict(self):
        return {
            'texts': [] if self.texts is None else [None if x is None else x.to_dict() for x in self.texts],
        }

    def on_send(self, writer):
        writer.write_int(TextConcat.constructor_id, signed=False)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.texts))
        for _x in self.texts:
            _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return TextConcat(None)

    def on_response(self, reader):
        reader.read_int()  # Vector's constructor ID
        self.texts = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.texts.append(_x)

    def __repr__(self):
        return 'textConcat#7e6260d7 texts:Vector<RichText> = RichText'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
