from ....tl.tlobject import TLObject


class StickerSetInstallResultArchive(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    messages.stickerSetInstallResultArchive#35e410a8 sets:Vector<StickerSetCovered> = messages.StickerSetInstallResult"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x35e410a8
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x67cb3fe8

    def __init__(self, sets):
        """
        :param sets: Telegram type: "StickerSetCovered". Must be a list.

        Constructor for messages.StickerSetInstallResult: Instance of either StickerSetInstallResultSuccess, StickerSetInstallResultArchive.
        """
        super().__init__()

        self.sets = sets

    def to_dict(self):
        return {
            'sets': [] if self.sets is None else [None if x is None else x.to_dict() for x in self.sets],
        }

    def on_send(self, writer):
        writer.write_int(StickerSetInstallResultArchive.constructor_id, signed=False)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.sets))
        for _x in self.sets:
            _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return StickerSetInstallResultArchive(None)

    def on_response(self, reader):
        reader.read_int()  # Vector's constructor ID
        self.sets = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.sets.append(_x)

    def __repr__(self):
        return 'messages.stickerSetInstallResultArchive#35e410a8 sets:Vector<StickerSetCovered> = messages.StickerSetInstallResult'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
