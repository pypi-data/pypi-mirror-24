from ....tl.tlobject import TLObject


class MessageEditData(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    messages.messageEditData#26b5dde6 flags:# caption:flags.0?true = messages.MessageEditData"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x26b5dde6
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xfb47949d

    def __init__(self, caption=None):
        """
        :param caption: Telegram type: "true".

        Constructor for messages.MessageEditData: Instance of MessageEditData.
        """
        super().__init__()

        self.caption = caption

    def to_dict(self):
        return {
            'caption': self.caption,
        }

    def on_send(self, writer):
        writer.write_int(MessageEditData.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.caption else 0
        writer.write_int(flags)


    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return MessageEditData(None)

    def on_response(self, reader):
        flags = reader.read_int()

        if (flags & (1 << 0)) != 0:
            self.caption = True  # Arbitrary not-None value, no need to read since it is a flag

    def __repr__(self):
        return 'messages.messageEditData#26b5dde6 flags:# caption:flags.0?true = messages.MessageEditData'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
