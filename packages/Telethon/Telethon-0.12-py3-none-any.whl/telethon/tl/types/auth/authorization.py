from ....tl.tlobject import TLObject


class Authorization(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    auth.authorization#cd050916 flags:# tmp_sessions:flags.0?int user:User = auth.Authorization"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xcd050916
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xb9e04e39

    def __init__(self, user, tmp_sessions=None):
        """
        :param tmp_sessions: Telegram type: "int".
        :param user: Telegram type: "User".

        Constructor for auth.Authorization: Instance of Authorization.
        """
        super().__init__()

        self.tmp_sessions = tmp_sessions
        self.user = user

    def to_dict(self):
        return {
            'tmp_sessions': self.tmp_sessions,
            'user': None if self.user is None else self.user.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(Authorization.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 0) if self.tmp_sessions else 0
        writer.write_int(flags)

        if self.tmp_sessions:
            writer.write_int(self.tmp_sessions)

        self.user.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return Authorization(None, None)

    def on_response(self, reader):
        flags = reader.read_int()

        if (flags & (1 << 0)) != 0:
            self.tmp_sessions = reader.read_int()

        self.user = reader.tgread_object()

    def __repr__(self):
        return 'auth.authorization#cd050916 flags:# tmp_sessions:flags.0?int user:User = auth.Authorization'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
