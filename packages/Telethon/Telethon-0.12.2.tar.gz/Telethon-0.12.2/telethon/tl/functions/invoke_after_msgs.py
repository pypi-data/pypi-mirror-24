from ...tl.tlobject import TLObject


class InvokeAfterMsgsRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    invokeAfterMsgs#3dc4b4f0 {X:Type} msg_ids:Vector<long> query:!X = X"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x3dc4b4f0
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xb7b2364b

    def __init__(self, msg_ids, query):
        """
        :param msg_ids: Telegram type: "long". Must be a list.
        :param query: Telegram type: "X". Must be another TLObject request.

        :returns X: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.msg_ids = msg_ids
        self.query = query

    def to_dict(self):
        return {
            'msg_ids': [] if self.msg_ids is None else self.msg_ids[:],
            'query': None if self.query is None else self.query.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(InvokeAfterMsgsRequest.constructor_id, signed=False)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.msg_ids))
        for _x in self.msg_ids:
            writer.write_long(_x)

        self.query.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return InvokeAfterMsgsRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'invokeAfterMsgs#3dc4b4f0 {X:Type} msg_ids:Vector<long> query:!X = X'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
