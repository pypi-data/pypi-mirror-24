from ....tl.tlobject import TLObject
from ....utils import get_input_user


class AddChatUserRequest(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xf9a0aa09
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x8af52aac

    def __init__(self, chat_id, user_id, fwd_limit):
        """
        :param chat_id: Telegram type: "int".
        :param user_id: Telegram type: "InputUser".
        :param fwd_limit: Telegram type: "int".

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, UpdatesTg, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.chat_id = chat_id
        self.user_id = get_input_user(user_id)
        self.fwd_limit = fwd_limit

    def to_dict(self):
        return {
            'chat_id': self.chat_id,
            'user_id': None if self.user_id is None else self.user_id.to_dict(),
            'fwd_limit': self.fwd_limit,
        }

    def on_send(self, writer):
        writer.write_int(AddChatUserRequest.constructor_id, signed=False)
        writer.write_int(self.chat_id)
        self.user_id.on_send(writer)
        writer.write_int(self.fwd_limit)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return AddChatUserRequest(None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
