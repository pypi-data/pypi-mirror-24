from ...tl.tlobject import TLObject


class ChannelParticipantSelf(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    channelParticipantSelf#a3289a6d user_id:int inviter_id:int date:int = ChannelParticipant"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xa3289a6d
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xd9c7fc18

    def __init__(self, user_id, inviter_id, date):
        """
        :param user_id: Telegram type: "int".
        :param inviter_id: Telegram type: "int".
        :param date: Telegram type: "date".

        Constructor for ChannelParticipant: Instance of either ChannelParticipant, ChannelParticipantSelf, ChannelParticipantCreator, ChannelParticipantAdmin, ChannelParticipantBanned.
        """
        super().__init__()

        self.user_id = user_id
        self.inviter_id = inviter_id
        self.date = date

    def to_dict(self):
        return {
            'user_id': self.user_id,
            'inviter_id': self.inviter_id,
            'date': self.date,
        }

    def on_send(self, writer):
        writer.write_int(ChannelParticipantSelf.constructor_id, signed=False)
        writer.write_int(self.user_id)
        writer.write_int(self.inviter_id)
        writer.tgwrite_date(self.date)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return ChannelParticipantSelf(None, None, None)

    def on_response(self, reader):
        self.user_id = reader.read_int()
        self.inviter_id = reader.read_int()
        self.date = reader.tgread_date()

    def __repr__(self):
        return 'channelParticipantSelf#a3289a6d user_id:int inviter_id:int date:int = ChannelParticipant'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
