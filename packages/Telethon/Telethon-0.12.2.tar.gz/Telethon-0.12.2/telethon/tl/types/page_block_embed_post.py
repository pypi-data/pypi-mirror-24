from ...tl.tlobject import TLObject


class PageBlockEmbedPost(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    pageBlockEmbedPost#292c7be9 url:string webpage_id:long author_photo_id:long author:string date:int blocks:Vector<PageBlock> caption:RichText = PageBlock"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x292c7be9
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x1aca5644

    def __init__(self, url, webpage_id, author_photo_id, author, date, blocks, caption):
        """
        :param url: Telegram type: "string".
        :param webpage_id: Telegram type: "long".
        :param author_photo_id: Telegram type: "long".
        :param author: Telegram type: "string".
        :param date: Telegram type: "date".
        :param blocks: Telegram type: "PageBlock". Must be a list.
        :param caption: Telegram type: "RichText".

        Constructor for PageBlock: Instance of either PageBlockUnsupported, PageBlockTitle, PageBlockSubtitle, PageBlockAuthorDate, PageBlockHeader, PageBlockSubheader, PageBlockParagraph, PageBlockPreformatted, PageBlockFooter, PageBlockDivider, PageBlockAnchor, PageBlockList, PageBlockBlockquote, PageBlockPullquote, PageBlockPhoto, PageBlockVideo, PageBlockCover, PageBlockEmbed, PageBlockEmbedPost, PageBlockCollage, PageBlockSlideshow, PageBlockChannel, PageBlockAudio.
        """
        super().__init__()

        self.url = url
        self.webpage_id = webpage_id
        self.author_photo_id = author_photo_id
        self.author = author
        self.date = date
        self.blocks = blocks
        self.caption = caption

    def to_dict(self):
        return {
            'url': self.url,
            'webpage_id': self.webpage_id,
            'author_photo_id': self.author_photo_id,
            'author': self.author,
            'date': self.date,
            'blocks': [] if self.blocks is None else [None if x is None else x.to_dict() for x in self.blocks],
            'caption': None if self.caption is None else self.caption.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(PageBlockEmbedPost.constructor_id, signed=False)
        writer.tgwrite_string(self.url)
        writer.write_long(self.webpage_id)
        writer.write_long(self.author_photo_id)
        writer.tgwrite_string(self.author)
        writer.tgwrite_date(self.date)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.blocks))
        for _x in self.blocks:
            _x.on_send(writer)

        self.caption.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return PageBlockEmbedPost(None, None, None, None, None, None, None)

    def on_response(self, reader):
        self.url = reader.tgread_string()
        self.webpage_id = reader.read_long()
        self.author_photo_id = reader.read_long()
        self.author = reader.tgread_string()
        self.date = reader.tgread_date()
        reader.read_int()  # Vector's constructor ID
        self.blocks = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.blocks.append(_x)

        self.caption = reader.tgread_object()

    def __repr__(self):
        return 'pageBlockEmbedPost#292c7be9 url:string webpage_id:long author_photo_id:long author:string date:int blocks:Vector<PageBlock> caption:RichText = PageBlock'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
