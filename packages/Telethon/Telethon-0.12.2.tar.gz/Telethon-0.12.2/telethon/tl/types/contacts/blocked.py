from ....tl.tlobject import TLObject


class Blocked(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    contacts.blocked#1c138d15 blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x1c138d15
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xffba4f4f

    def __init__(self, blocked, users):
        """
        :param blocked: Telegram type: "ContactBlocked". Must be a list.
        :param users: Telegram type: "User". Must be a list.

        Constructor for contacts.Blocked: Instance of either Blocked, BlockedSlice.
        """
        super().__init__()

        self.blocked = blocked
        self.users = users

    def to_dict(self):
        return {
            'blocked': [] if self.blocked is None else [None if x is None else x.to_dict() for x in self.blocked],
            'users': [] if self.users is None else [None if x is None else x.to_dict() for x in self.users],
        }

    def on_send(self, writer):
        writer.write_int(Blocked.constructor_id, signed=False)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.blocked))
        for _x in self.blocked:
            _x.on_send(writer)

        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.users))
        for _x in self.users:
            _x.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return Blocked(None, None)

    def on_response(self, reader):
        reader.read_int()  # Vector's constructor ID
        self.blocked = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.blocked.append(_x)

        reader.read_int()  # Vector's constructor ID
        self.users = []  # Initialize an empty list
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.users.append(_x)

    def __repr__(self):
        return 'contacts.blocked#1c138d15 blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
