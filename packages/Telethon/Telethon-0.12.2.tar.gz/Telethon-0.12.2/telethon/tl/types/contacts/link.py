from ....tl.tlobject import TLObject


class Link(TLObject):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    contacts.link#3ace484c my_link:ContactLink foreign_link:ContactLink user:User = contacts.Link"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x3ace484c
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x524d5ae9

    def __init__(self, my_link, foreign_link, user):
        """
        :param my_link: Telegram type: "ContactLink".
        :param foreign_link: Telegram type: "ContactLink".
        :param user: Telegram type: "User".

        Constructor for contacts.Link: Instance of Link.
        """
        super().__init__()

        self.my_link = my_link
        self.foreign_link = foreign_link
        self.user = user

    def to_dict(self):
        return {
            'my_link': None if self.my_link is None else self.my_link.to_dict(),
            'foreign_link': None if self.foreign_link is None else self.foreign_link.to_dict(),
            'user': None if self.user is None else self.user.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(Link.constructor_id, signed=False)
        self.my_link.on_send(writer)
        self.foreign_link.on_send(writer)
        self.user.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return Link(None, None, None)

    def on_response(self, reader):
        self.my_link = reader.tgread_object()
        self.foreign_link = reader.tgread_object()
        self.user = reader.tgread_object()

    def __repr__(self):
        return 'contacts.link#3ace484c my_link:ContactLink foreign_link:ContactLink user:User = contacts.Link'

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
