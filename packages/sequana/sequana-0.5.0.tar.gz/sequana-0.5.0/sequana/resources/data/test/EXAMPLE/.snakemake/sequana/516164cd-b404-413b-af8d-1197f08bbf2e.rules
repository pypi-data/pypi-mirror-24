
rule bowtie1_mapping_ref:
    """bowtie1_mapping_dynamic

    Read mapping for either single end and paired end data using Bowtie1.

    Required input:
        __bowtie1_mapping_ref__input: list with one or two fastq.gz

    Required output:
        __bowtie1_mapping_ref__bam: output bam file
        __bowtie1_mapping_ref__sort: output sorted bam file

    params:

        __bowtie1_mapping_ref__prefix_index: path to the index file of reference genome

    config:

        .. code-block:: yaml

            bowtie:
                options:  "" #options for bowtie1 you want use
    """
    input:
        fastq = __bowtie1_mapping_ref__input,
        index = __bowtie1_mapping_ref__index_done
    output:
        bam = __bowtie1_mapping_ref__bam,
        sort = __bowtie1_mapping_ref__sort
    log:
        out = __bowtie1_mapping_ref__stdout,
        err = __bowtie1_mapping_ref__stderr
    params:
        options = config["bowtie1_mapping_ref"]["options"],
        prefix_index = __bowtie1_mapping_ref__prefix_index
    threads:
        int(config["bowtie1_mapping_ref"]["threads"])
    run:

        cmd = "bowtie -S {params.options} -p {threads} {params.prefix_index}"
        # paired end or single end unzip
        if len(input.fastq) == 2:
            bowtie_input = "-1 " + input.fastq[0] + " -2 " + input.fastq[1]
        else:
            bowtie_input = input.fastq[0]
        cmd = cmd + " " + bowtie_input
        # sam to bam
        cmd = "%s | samtools view -Sbh -> {output.bam}" % cmd

        # logs
        cmd = "(%s) > {log.out} 2> {log.err}" % cmd

        # sort result
        cmd = "%s && samtools sort -o {output.sort} {output.bam}" % cmd
        cmd = "%s && samtools index {output.sort}" % cmd


        shell(cmd )
    