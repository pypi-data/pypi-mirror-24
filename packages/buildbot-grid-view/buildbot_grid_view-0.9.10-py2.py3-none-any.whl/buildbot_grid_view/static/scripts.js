BOWERDEPS="undefined"==typeof BOWERDEPS?{}:BOWERDEPS,function(){var t,e;t=function(){function t(){return["ui.router","ui.bootstrap","ngAnimate","guanlecoja.ui","bbData"]}return t}(),e=function(){function t(t,e,i){e.addGroup({name:"grid",caption:"Grid View",icon:"cubes",order:4}),t.state({name:"grid",controller:"gridController",controllerAs:"C",templateUrl:"grid_view/views/grid.html",url:"/grid?branch&tag",reloadOnSearch:!1,data:{group:"grid",caption:"Grid View"}}),i.addSettingsGroup({name:"Grid",caption:"Grid related settings",items:[{type:"bool",name:"compactChanges",caption:"Hide avatar and time ago from change details",defaultValue:!0},{type:"bool",name:"rightToLeft",caption:"Show most recent changes on the left",defaultValue:!0},{type:"integer",name:"revisionLimit",caption:"Maximum number of revisions to display",default_value:5},{type:"integer",name:"changeFetchLimit",caption:"Maximum number of changes to fetch",default_value:100},{type:"integer",name:"buildFetchLimit",caption:"Maximum number of builds to fetch",default_value:1e3}]})}return t}(),angular.module("grid_view",new t).config(["$stateProvider","glMenuServiceProvider","bbSettingsServiceProvider",e])}.call(this),function(){var t,e=function(t,e){return function(){return t.apply(e,arguments)}},i={}.hasOwnProperty;t=function(){function t(t,i,s,a,n,r){var h,l;this.$scope=t,this.$stateParams=i,this.$state=s,this.isTagToggled=e(this.isTagToggled,this),this.isBuilderDisplayed=e(this.isBuilderDisplayed,this),this.refresh=e(this.refresh,this),this.resetTags=e(this.resetTags,this),this.toggleTag=e(this.toggleTag,this),this.changeBranch=e(this.changeBranch,this),this.onChange=e(this.onChange,this),_.mixin(this.$scope,a),this.data=n.open().closeOnDestroy(this.$scope),this.branch=this.$stateParams.branch,this.tags=null!=(h=this.$stateParams.tag)?h:[],angular.isArray(this.tags)||(this.tags=[this.tags]),l=r.getSettingsGroup("Grid"),this.revisionLimit=l.revisionLimit.value,this.changeFetchLimit=l.changeFetchLimit.value,this.buildFetchLimit=l.buildFetchLimit.value,this.compactChanges=l.compactChanges.value,this.rightToLeft=l.rightToLeft.value,this.buildsets=this.data.getBuildsets({limit:this.buildFetchLimit,order:"-bsid"}),this.changes=this.data.getChanges({limit:this.changeFetchLimit,order:"-changeid"}),this.builders=this.data.getBuilders(),this.buildrequests=this.data.getBuildrequests({limit:this.buildFetchLimit,order:"-buildrequestid"}),this.builds=this.data.getBuilds({limit:this.buildFetchLimit,order:"-buildrequestid"}),this.buildsets.onChange=this.changes.onChange=this.builders.onChange=this.buildrequests.change=this.builds.onChange=this.onChange}return t.prototype.dataReady=function(){var t,e,i,s;for(s=[this.buildsets,this.changes,this.builders,this.buildrequests,this.builds],e=0,i=s.length;i>e;e++)if(t=s[e],!(t.$resolved&&t.length>0))return!1;return!0},t.prototype.dataFetched=function(){var t,e,i,s;for(s=[this.buildsets,this.changes,this.builders,this.buildrequests,this.builds],e=0,i=s.length;i>e;e++)if(t=s[e],!t.$resolved)return!1;return!0},t.prototype.onChange=function(){var t,e,s,a,n,r,h,l,g,c,d,o,u,b,p,f,m,v,C,y,$,T,L,w,B,P,S,F,q,x,D,G,O,R,k,E,V,M,A;if(this.dataReady()){for(d={},e={},o={},x=this.changes,p=0,v=x.length;v>p;p++)g=x[p],o[g.sourcestamp.ssid]=g,g.buildsets={};for(D=this.buildsets,f=0,C=D.length;C>f;f++)s=D[f],c=o[_.last(s.sourcestamps).ssid],null!=c&&(c.buildsets[s.bsid]=s,null==c.branch&&(c.branch="master"),e[c.branch]=!0,this.branch&&c.branch!==this.branch||(d[c.changeid]=c));for(d=function(){var t;t=[];for(u in d)i.call(d,u)&&(c=d[u],t.push(c));return t}(),this.rightToLeft?(d.sort(function(t,e){return e.changeid-t.changeid}),d.length>this.revisionLimit&&(d=d.slice(0,this.revisionLimit))):(d.sort(function(t,e){return t.changeid-e.changeid}),d.length>this.revisionLimit&&(d=d.slice(d.length-this.revisionLimit))),this.$scope.changes=d,this.$scope.branches=function(){var i;i=[];for(t in e)i.push(t);return i}(),A={},G=this.buildrequests,m=0,y=G.length;y>m;m++)V=G[m],(null!=A[S=V.buildsetid]?A[S]:A[S]=[]).push(V);for(r={},O=this.builds,B=0,$=O.length;$>B;B++)n=O[B],r[n.buildrequestid]=n;for(R=this.builders,P=0,T=R.length;T>P;P++)h=R[P],h.builds={};for(l={},k=this.$scope.changes,F=0,L=k.length;L>F;F++){g=k[F],E=g.buildsets;for(a in E)if(i.call(E,a)&&(s=E[a],M=A[a],null!=M))for(q=0,w=M.length;w>q;q++)V=M[q],n=r[V.buildrequestid],null!=n&&(h=this.builders.get(n.builderid),this.isBuilderDisplayed(h)&&(l[h.builderid]=h,h.builds[g.changeid]=n))}return this.$scope.builders=function(){var t;t=[];for(b in l)i.call(l,b)&&(h=l[b],t.push(h));return t}()}},t.prototype.changeBranch=function(t){return this.branch=t,this.refresh()},t.prototype.toggleTag=function(t){var e;return e=this.tags.indexOf(t),0>e?this.tags.push(t):this.tags.splice(e,1),this.refresh()},t.prototype.resetTags=function(){return this.tags=[],this.refresh()},t.prototype.refresh=function(){var t;return this.$stateParams.branch=this.branch,0===this.tags.length?this.$stateParams.tag=void 0:this.$stateParams.tag=this.tags,t={branch:this.$stateParams.branch,tag:this.$stateParams.tag},this.$state.transitionTo(this.$state.current,t,{notify:!1}),this.onChange()},t.prototype.isBuilderDisplayed=function(t){var e,i,s,a;for(s=this.tags,e=0,i=s.length;i>e;e++)if(a=s[e],t.tags.indexOf(a)<0)return!1;return!0},t.prototype.isTagToggled=function(t){return this.tags.indexOf(t)>=0},t}(),angular.module("grid_view").controller("gridController",["$scope","$stateParams","$state","resultsService","dataService","bbSettingsService",t])}.call(this),angular.module("grid_view").run(["$templateCache",function(t){t.put("grid_view/views/grid.html",'<div class="container grid"><div class="load-indicator" ng-hide="C.dataFetched()"><div class="spinner"><i class="fa fa-circle-o-notch fa-spin fa-2x"></i><p>loading</p></div></div><p ng-show="C.dataFetched() &amp;&amp; C.changes.length == 0">No changes. Grid View needs a changesource to be setup, and<a href="#/changes"> changes</a> to be in the system.</p><div class="form-inline" ng-show="C.dataReady()"><label>Branch &nbsp;</label><select class="form-control" ng-model="C.branch" ng-change="C.changeBranch(C.branch)" ng-options="br for br in branches | orderBy"><option value="">(all)</option></select></div><table class="table table-condensed table-striped table-hover" ng-show="C.dataReady()"><thead><tr><th>Builder</th><th><span ng-show="C.tags.length == 0">Tags</span><span ng-show="C.tags.length &lt; 5" ng-repeat="tag in C.tags"><span class="builder-tag label label-success" ng-click="C.toggleTag(tag)">{{ tag }}</span></span><span ng-show="C.tags.length &gt;= 5"><span class="label label-success">{{ C.tags.length }} tags</span></span><span ng-show="C.tags.length &gt; 0"><span class="label label-danger clickable" ng-click="C.resetTags()" uib-tooltip="Reset tags filter">x</span></span></th><th class="change" ng-repeat="ch in changes track by ch.changeid"><changedetails change="ch" compact="C.compactChanges"></changedetails></th></tr></thead><tbody><tr ng-repeat="b in builders | orderBy: \'name\'"><th><a ui-sref="builder({builder: b.builderid})">{{ b.name }}</a></th><td><span ng-repeat="tag in b.tags"><span class="builder-tag label" ng-click="C.toggleTag(tag)" ng-class="C.isTagToggled(tag) ? \'label-success\': \'label-default\'">{{ tag }}</span></span></td><td ng-repeat="ch in changes track by ch.changeid"><a ng-if="b.builds[ch.changeid]" ui-sref="build({builder: b.builderid, build: b.builds[ch.changeid].number})"><span class="badge-status" ng-class="results2class(b.builds[ch.changeid], \'pulse\')">{{ b.builds[ch.changeid].number }}</span></a></td></tr></tbody></table></div>')}]);