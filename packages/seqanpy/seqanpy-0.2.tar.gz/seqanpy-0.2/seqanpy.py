# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_seqanpy', [dirname(__file__)])
        except ImportError:
            import _seqanpy
            return _seqanpy
        if fp is not None:
            try:
                _mod = imp.load_module('_seqanpy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _seqanpy = swig_import_helper()
    del swig_import_helper
else:
    import _seqanpy
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def nothing():
    """nothing() -> int"""
    return _seqanpy.nothing()

def align_global(seq1, seq2, band=100, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5):
    """
    align_global(seq1, seq2, band=100, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5) -> int

    Global alignment of two sequences.

    Parameters:
       seq1: string with the first seq
       seq2: string with the second seq
       band: make banded alignment, maximal shear between the sequences (-1 to turn off)
       score_...: scores for the alignment

    """

    seq1 = ''.join(seq1)
    seq2 = ''.join(seq2)


    return _seqanpy.align_global(seq1, seq2, band, score_match, score_mismatch, score_gapext, score_gapopen)

def align_overlap(seq1, seq2, band=-1, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5):
    """
    align_overlap(seq1, seq2, band=-1, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5) -> int

    Align a subsequence onto a longer, reference one.

    Parameters:
       seq1: string with the reference seq
       seq2: string with the subsequence (end gaps are free)
       band: make banded alignment, maximal shear between the sequences (-1 to turn off)
       score_...: scores for the alignment

    Note: band counts also gaps at the edges, so it must be used with care.

    """

    seq1 = ''.join(seq1)
    seq2 = ''.join(seq2)


    return _seqanpy.align_overlap(seq1, seq2, band, score_match, score_mismatch, score_gapext, score_gapopen)

def align_ladder(seq1, seq2, band=-1, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5):
    """
    align_ladder(seq1, seq2, band=-1, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5) -> int

    Align two sequences where the second is an overlapping extension of the first.

    Parameters:
       seq1: string to be extended (end gaps are free)
       seq2: string to use for extension (start gaps are free)
       band: make banded alignment, maximal shear between the sequences (-1 to turn off)
       score_...: scores for the alignment

    Note: band counts also gaps at the edges, so it must be used with care.

    """

    seq1 = ''.join(seq1)
    seq2 = ''.join(seq2)


    return _seqanpy.align_ladder(seq1, seq2, band, score_match, score_mismatch, score_gapext, score_gapopen)

def align_local(seq1, seq2, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5):
    """
    align_local(seq1, seq2, score_match=3, score_mismatch=-3, score_gapext=-1, score_gapopen=-5) -> int

    Local alignment of two strings.

    Parameters:
       seq1: string with the first seq
       seq2: string with the second seq
       score_...: scores for the alignment

    """

    seq1 = ''.join(seq1)
    seq2 = ''.join(seq2)


    return _seqanpy.align_local(seq1, seq2, score_match, score_mismatch, score_gapext, score_gapopen)


