Metadata-Version: 2.0
Name: aio-pipe
Version: 0.1.1
Summary: POSIX Pipe async helper
Home-page: https://github.com/mosquito/aio-pipe
Author: Dmitry Orlov
Author-email: me@mosquito.su
License: Apache 2
Keywords: posix pipe,python,asyncio,cython
Platform: POSIX
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Natural Language :: Russian
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Programming Language :: Cython
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: System
Classifier: Topic :: System :: Operating System

AIO-PIPE
========

.. image:: https://travis-ci.org/mosquito/aio-pipe.svg
    :target: https://travis-ci.org/mosquito/aio-pipe
    :alt: Travis CI

.. image:: https://img.shields.io/pypi/v/aio-pipe.svg
    :target: https://pypi.python.org/pypi/aio-pipe/
    :alt: Latest Version

.. image:: https://img.shields.io/pypi/wheel/aio-pipe.svg
    :target: https://pypi.python.org/pypi/aio-pipe/

.. image:: https://img.shields.io/pypi/pyversions/aio-pipe.svg
    :target: https://pypi.python.org/pypi/aio-pipe/

.. image:: https://img.shields.io/pypi/l/aio-pipe.svg
    :target: https://pypi.python.org/pypi/aio-pipe/


Real asynchronous file operations with asyncio support.


Status
------

Development - BETA


Features
--------

* aio-pipe is a helper for POSIX pipes.


Code examples
-------------

Useful example.

.. code-block:: python

    import asyncio
    from aio_pipe import AsyncPIPE


    async def main(loop):
        p = AsyncPIPE(loop)

        for _ in range(1):
            await p.write(b"foo" * 1000)
            await p.read(3000)

        p.close()


    loop = asyncio.get_event_loop()
    loop.run_until_complete(main(loop))


Write and read with helpers:

.. code-block:: python



