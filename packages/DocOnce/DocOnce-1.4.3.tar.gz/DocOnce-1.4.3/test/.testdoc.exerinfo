
# Information about all exercises in the file testdoc.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.testdoc.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': u'=====',
  'hints': [],
  'keywords': None,
  'label': u'Example',
  'no': 1,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': u'The answer to this subproblem can be written here.',
             'text': u'State some problem.'},
            {'answer': '',
             'file': None,
             'hints': [u'A hint can be given.',
                       u'Maybe even another hint?'],
             'solution': u'The answer to this other subproblem goes here,\nmaybe over multiple doconce input lines.',
             'text': u'State some other problem.'}],
  'text': u'Examples can start with a subsection heading starting with `Example:`\nand then, with the command-line option `--examples_as_exercises` be\ntypeset as exercises. This is useful if one has solution\nenvironments as part of the example.',
  'title': u'Examples can be typeset as exercises',
  'type': u'Example',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': u'These are the exercise remarks, appearing at the very end.',
  'file': [u'flip_coin.py', u'flip_coin.pdf'],
  'heading': u'=====',
  'hints': [],
  'keywords': [u'random numbers', u'Monte Carlo simulation', u'ipynb'],
  'label': u'demo:ex:1',
  'no': 2,
  'solution': '',
  'solution_file': [u'mysol.txt', u'mysol_flip_coin.py', u'yet_another.file'],
  'subex': [{'answer': u'If the `random.random()` function returns a number $<1/2$, let it be\nhead, otherwise tail. Repeat this $N$ number of times.',
             'file': None,
             'hints': [u'Use `r = random.random()` and define head as `r <= 0.5`.',
                       u'Draw an integer among $\\{1,2\\}$ with\n`r = random.randint(1,2)` and define head when `r` is 1.'],
             'solution': u"!bc pycod\nimport sys, random\nN = int(sys.argv[1])\nheads = 0\nfor i in range(N):\n    r = random.random()\n    if r <= 0.5:\n        heads += 1\nprint 'Flipping a coin %d times gave %d heads' % (N, heads)\n\n!ec",
             'text': u"Make a program that simulates flipping a coin $N$ times.\nPrint out ``tail'' or ``head'' for each flip and\nlet the program count the number of heads."},
            {'aftertext': u'\nVectorized code can be written in many ways.\nSometimes the code is less intuitive, sometimes not.\nAt least there is not much to find in Section ref{sec1}.\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': u'Vectorize the code in a) using boolean indexing.'},
            {'aftertext': u'\nIn this latter subexercise, we have an\nexample where the code is easy to read.\n\n\n=== My remarks ===\n\nRemarks with such a subsubsection is treated as more text\nafter the last subexercise. Test a list too:\n\n o Mark 1.\n o Mark 2.\n',
             'answer': u'`np.sum(np.where(r <= 0.5, 1, 0))` or `np.sum(r <= 0.5)`.',
             'file': None,
             'hints': [],
             'solution': '',
             'text': u'Vectorize the code in a) using `numpy.sum`.'}],
  'text': u'# Torture tests',
  'title': u'Flip a Coin',
  'type': u'Problem',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': [u'myexer1'],
  'heading': u'=====',
  'hints': [],
  'keywords': None,
  'label': u'my:exer1',
  'no': 3,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': u'Very short exercise. What is the capital\nof Norway?',
  'title': u'Test of plain text exercise',
  'type': u'Exercise',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': u'=====',
  'hints': [u"To answer this question empirically, let a program\ndraw $N$ such random numbers using Python's standard `random` module,\ncount how many of them, $M$, that fall in the interval $(0.5,0.6)$, and\ncompute the probability as $M/N$."],
  'keywords': None,
  'label': u'demo:ex:2',
  'no': 4,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': u'# Minimalistic exercise\n\n\nWhat is the probability of getting a number between 0.5 and 0.6 when\ndrawing uniformly distributed random numbers from the interval $[0,1)$?\n\n\nAt the end we have a list because that caused problems in LaTeX\nin previous DocOnce versions:\n\n o item1\n o item2',
  'title': u'Compute a Probability',
  'type': u'Project',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': u'At the very end of the exercise it may be appropriate to summarize\nand give some perspectives.',
  'file': [u'circles'],
  'heading': u'=====',
  'hints': [],
  'keywords': [u'ipynb'],
  'label': u'proj:circle1',
  'no': 5,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': u'Here goes the short answer to part a).',
             'file': None,
             'hints': [u'Use the `numpy.random` module to draw the\n$x_0$, $y_0$, and $R$ quantities.'],
             'solution': u'Here goes a full solution to part a).',
             'text': u'Let $R$ be normally distributed and $(x_0,y_0)$ uniformly distributed.'},
            {'answer': '',
             'file': [u'norm'],
             'hints': [],
             'solution': '',
             'text': u'Let $R$ be uniformly distributed and $(x_0,y_0)$ normally distributed.'},
            {'aftertext': u'\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': u'Let $R$ and $(x_0,y_0)$ be normally distributed.'}],
  'text': u'The formula for a circle is given by\n\n!bt\n\\begin{align}\nx &= x_0 + R\\cos 2\\pi t,\nlabel{circle:x}\\\\ \ny &= y_0 + R\\sin 2\\pi t,\nlabel{circle:y}\n\\end{align}\n\n!et\nwhere $R$ is the radius of the circle, $(x_0,y_0)$ is the\ncenter point, and $t$ is a parameter in the unit interval $[0,1]$.\nFor any $t$, $(x,y)$ computed from (ref{circle:x})-(ref{circle:y})\nis a point on the circle.\nThe formula can be used to generate `n` points on a circle:\n\n!bc pypro\nimport numpy as np\n\ndef circle(R, x0, y0, n=501):\n    t = np.linspace(0, 1, n)\n    x = x0 + R*np.cos(2*np.pi*t)\n    y = y0 + R*np.sin(2*np.pi*t)\n    return x, y\n\nx, y = circle(2.0, 0, 0)\n\n!ec\n\n# Often in an exercise we have some comments about the solution\n# which we normally want to keep where they are.\n\nThe goal of this project is to draw $N$ circles with random\ncenter and radius. Plot each circle using the `circle` function\nabove.',
  'title': u'Explore Distributions of Random Circles',
  'type': u'Project',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': u'Some final closing remarks, e.g., summarizing the main findings\nand their implications in other problems can be made. These\nremarks will appear at the end of the typeset exercise.',
  'file': None,
  'heading': u'=====',
  'hints': [],
  'keywords': None,
  'label': u'exer:dist',
  'no': 6,
  'solution': u'Here goes a full solution of the whole exercise.\nWith some math $a=b$ in this solution:\n!bt\n\\[ \\hbox{math in solution: } a = b \\]\n\n!et\nAnd code `a=b` in this solution:\n!bc\na = b  # code in solution\n\n!ec \nEnd of solution is here.',
  'solution_file': None,
  'subex': [{'answer': u'Short answer to subexercise a).\nWith math in answer: $a=b$.',
             'file': [u'subexer_a.pdf'],
             'hints': [u'First hint to subexercise a).\nWith math $a=b$ in hint:\n\n!bt\n\\[ a=b. \\]\n\n!et\nAnd with code (in plain verbatim) returning $x+1$ in hint:\n\n!bc\ndef func(x):\n    return x + 1  # with code in hint\n\n!ec',
                       u'Second hint to subexercise a).\n\nTest list in hint:\n\n o item1\n o item2'],
             'solution': '',
             'text': u'Subexercises are numbered a), b), etc.'},
            {'aftertext': u'\n\n\n#  No meaning in this weired test example:\nThe text here belongs to the main (intro) part of the exercise. Need\nclosing remarks to have text after subexercises.\n\nTest list in exercise:\n\n o item1\n o item2\n\n',
             'answer': '',
             'file': [u'subexer_b.pdf'],
             'hints': [u'A hint for this subexercise.'],
             'solution': u'Here goes the solution of this subexercise.',
             'text': u'Here goes the text for subexercise b).\n\n\nSome math $\\cos^2 x + \\sin^2 x = 1$ written one a single line:\n\n!bt\n\\[ \\cos^2 x + \\sin^2 x = 1 \\thinspace .\\]\n\n!et'}],
  'text': u'Intro to this exercise. Questions are in subexercises below.',
  'title': u'Determine some Distance',
  'type': u'Exercise',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': u'=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 7,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': u'# Another minimalistic exercise\n\nJust some text. And some math saying that $e^0=1$ on a single line,\nto test that math block insertion is correct:\n\n!bt\n\\[ \\exp{(0)} = 1 \\]\n\n!et\n\nAnd a test that the code `lambda x: x+2` is correctly placed here:\n\n!bc\nlambda x: x+2\n\n!ec ',
  'title': u'Some exercise without the "Exercise:" prefix',
  'type': u'Exercise',
  'type_visible': False},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': u'=====',
  'hints': [],
  'keywords': None,
  'label': u'sec:this:exer:de',
  'no': 8,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': u"# --- begin quiz ---\n# --- quiz heading: SOlution of differential equation\n# --- previous heading type: exercise\n# --- keywords: [u'derivatives', u'exponential function', u'equation, differential', u'differential equation']\n\n# --- begin quiz question ---\nGiven\n\n!bt\n\\[ \\frac{dy}{dx} = -y(x),\\quad y(0)=1 \\]\n\n!et\nWhat is the solution of this equation?\n# --- end quiz question ---\n# --- label: quiz:diff:eq1\n\n\n# --- begin quiz choice 1 (right) ---\n$y=e^{-y}$\n# --- end quiz choice 1 (right) ---\n\n# --- begin quiz choice 2 (wrong) ---\n$y=e^{y}$\n# --- end quiz choice 2 (wrong) ---\n\n# --- begin explanation of choice 2 ---\nAlmost, but the sign is wrong (note the minus!).\n# --- end explanation of choice 2 ---\n\n# --- begin quiz choice 3 (wrong) ---\n!bc pycod\nfrom math import exp\ndef f(x):\n    return exp(x)\n\n!ec\n# --- end quiz choice 3 (wrong) ---\n\n# --- begin explanation of choice 3 ---\nOoops, forgot a minus: `exp(-x)`, otherwise this Python code\nmust be considered as a good answer. It is more natural,\nthough, to write the solution to the problem\nin mathematical notation:\n\n!bt\n\\[ y(x) = e^{-y}.\\]\n\n!et\n# --- end explanation of choice 3 ---\n\n# --- begin quiz choice 4 (wrong) ---\nThe solution cannot be found because there is a derivative in the equation.\n# --- end quiz choice 4 (wrong) ---\n\n# --- begin explanation of choice 4 ---\nEquations with derivatives can be solved;\nthey are termed *differential\nequations*.\n# --- end explanation of choice 4 ---\n\n# --- begin quiz choice 5 (wrong) ---\nThe equation is meaningless: an equation must be an equation\nfor $x$ or $y$, not a function $y(x)$.\n# --- end quiz choice 5 (wrong) ---\n\n# --- begin explanation of choice 5 ---\nEquations where the unknown is a function, as $y(x)$\nhere, are called *differential equations*, and are solved by\nspecial techniques.\n# --- end explanation of choice 5 ---\n# --- end quiz ---",
  'title': u'Solution of differential equation',
  'type': u'Exercise',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': u'=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 9,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': u'Oslo.',
             'file': None,
             'hints': [],
             'solution': '',
             'text': u'What is the capital of Norway?'}],
  'text': u'# This example needs the --examples_as_exercises option, otherwise\n# it is just typeset as it is written.',
  'title': u'Just an example',
  'type': u'Example',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': [u'verify_formula.py'],
  'heading': u'=====',
  'hints': [],
  'keywords': None,
  'label': u'exer:some:formula',
  'no': 10,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': u'# Test comments not at the end only\nPick a statement from Project ref{proj:circle1} or Problem ref{demo:ex:1}\nand verify it.\n\nTest list at the end of an exercise without other elements (like subexercise,\nhint, etc.):\n\n o item1\n o item2',
  'title': u'Make references to projects and problems',
  'type': u'Exercise',
  'type_visible': True},
 {'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': [u'selc_composed.pdf'],
  'heading': u'=====',
  'hints': [],
  'keywords': None,
  'label': u'exer:you',
  'no': 11,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': u'Refer to the previous exercise as Exercise ref{exer:some:formula},\nthe two before that as Projects ref{demo:ex:2} and ref{proj:circle1},\nand this one as Project ref{exer:you}.',
  'title': u'References to Project ref{demo:ex:2} in a heading works for pdflatex',
  'type': u'Project',
  'type_visible': True}]