heat_template_version: pike

description: >
  Configuration for containerized MySQL clients

parameters:
  DockerMysqlClientConfigImage:
    description: The container image to use for the mysql_client config_volume
    type: string
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  EnableInternalTLS:
    type: boolean
    default: false
  InternalTLSCAFile:
    default: '/etc/ipa/ca.crt'
    type: string
    description: Specifies the default CA cert to use if TLS is used for
                 services in the internal network.

outputs:
  role_data:
    description: Role for setting mysql client parameters
    value:
      service_name: mysql_client
      config_settings:
        tripleo::profile::base::database::mysql::client::mysql_client_bind_address: {get_param: [ServiceNetMap, MysqlNetwork]}
        tripleo::profile::base::database::mysql::client::enable_ssl: {get_param: EnableInternalTLS}
        tripleo::profile::base::database::mysql::client::ssl_ca: {get_param: InternalTLSCAFile}
      # BEGIN DOCKER SETTINGS #
      step_config: ""
      puppet_config:
        config_volume: mysql_client
        puppet_tags: file # set this even though file is the default
        step_config: "include ::tripleo::profile::base::database::mysql::client"
        config_image: {get_param: DockerMysqlClientConfigImage}
      # no need for a docker config, this service only generates configuration files
      docker_config: {}
