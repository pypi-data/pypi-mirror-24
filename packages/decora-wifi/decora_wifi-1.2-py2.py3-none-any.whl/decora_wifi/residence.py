# Leviton Cloud Services API model Residence.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Residence(BaseModel):
    def __init__(self, session):
        super(Residence, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_residential_account(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialAccount".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'get')

    def delete_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'delete')

    def put_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'put')

    def get_residential_room(self, residential_rooms, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms/{1}".format(self._id, residential_rooms)
        self._session.call_api(api, attribs, 'get')

    def delete_residential_room(self, residential_rooms, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms/{1}".format(self._id, residential_rooms)
        self._session.call_api(api, attribs, 'delete')

    def put_residential_room(self, residential_rooms, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms/{1}".format(self._id, residential_rooms)
        self._session.call_api(api, attribs, 'put')

    def get_residential_area(self, residential_areas, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialAreas/{1}".format(self._id, residential_areas)
        self._session.call_api(api, attribs, 'get')

    def delete_residential_area(self, residential_areas, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialAreas/{1}".format(self._id, residential_areas)
        self._session.call_api(api, attribs, 'delete')

    def put_residential_area(self, residential_areas, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialAreas/{1}".format(self._id, residential_areas)
        self._session.call_api(api, attribs, 'put')

    def get_residential_breaker_panel(self, residential_breaker_panels, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels/{1}".format(self._id, residential_breaker_panels)
        self._session.call_api(api, attribs, 'get')

    def delete_residential_breaker_panel(self, residential_breaker_panels, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels/{1}".format(self._id, residential_breaker_panels)
        self._session.call_api(api, attribs, 'delete')

    def put_residential_breaker_panel(self, residential_breaker_panels, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels/{1}".format(self._id, residential_breaker_panels)
        self._session.call_api(api, attribs, 'put')

    def get_iot_switche(self, iot_switches, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches/{1}".format(self._id, iot_switches)
        self._session.call_api(api, attribs, 'get')

    def delete_iot_switche(self, iot_switches, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches/{1}".format(self._id, iot_switches)
        self._session.call_api(api, attribs, 'delete')

    def put_iot_switche(self, iot_switches, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches/{1}".format(self._id, iot_switches)
        self._session.call_api(api, attribs, 'put')

    def get_omni_notifier(self, omni_notifiers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/omniNotifiers/{1}".format(self._id, omni_notifiers)
        self._session.call_api(api, attribs, 'get')

    def delete_omni_notifier(self, omni_notifiers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/omniNotifiers/{1}".format(self._id, omni_notifiers)
        self._session.call_api(api, attribs, 'delete')

    def put_omni_notifier(self, omni_notifiers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/omniNotifiers/{1}".format(self._id, omni_notifiers)
        self._session.call_api(api, attribs, 'put')

    def get_residential_activitie(self, residential_activities, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialActivities/{1}".format(self._id, residential_activities)
        self._session.call_api(api, attribs, 'get')

    def delete_residential_activitie(self, residential_activities, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialActivities/{1}".format(self._id, residential_activities)
        self._session.call_api(api, attribs, 'delete')

    def put_residential_activitie(self, residential_activities, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialActivities/{1}".format(self._id, residential_activities)
        self._session.call_api(api, attribs, 'put')

    def get_residential_schedule(self, residential_schedules, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialSchedules/{1}".format(self._id, residential_schedules)
        self._session.call_api(api, attribs, 'get')

    def delete_residential_schedule(self, residential_schedules, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialSchedules/{1}".format(self._id, residential_schedules)
        self._session.call_api(api, attribs, 'delete')

    def put_residential_schedule(self, residential_schedules, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialSchedules/{1}".format(self._id, residential_schedules)
        self._session.call_api(api, attribs, 'put')

    def get_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/invitations/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_residential_rooms(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_residential_rooms(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_residential_rooms(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialRooms".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_residential_areas(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialAreas".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_residential_areas(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialAreas".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_residential_areas(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialAreas".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_residential_breaker_panels(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_residential_breaker_panels(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_residential_breaker_panels(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_iot_switches(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/iotSwitches".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_omni_notifiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/omniNotifiers".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_omni_notifiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/omniNotifiers".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_omni_notifiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/omniNotifiers".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_residential_activities(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialActivities".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_residential_activities(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialActivities".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_residential_activities(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialActivities".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_residential_schedules(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialSchedules".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_residential_schedules(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialSchedules".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_residential_schedules(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialSchedules".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def post_register_device(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/registerDevice".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_add_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/addPerson".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_remove_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/removePerson".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def get_list_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/listPermissions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_register_residential_breaker_panel(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/registerResidentialBreakerPanel".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def get_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/residence".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_residence(self, residences, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences/{1}".format(self._id, residences)
        self._session.call_api(api, attribs, 'get')

    def delete_residence(self, residences, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences/{1}".format(self._id, residences)
        self._session.call_api(api, attribs, 'delete')

    def put_residence(self, residences, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences/{1}".format(self._id, residences)
        self._session.call_api(api, attribs, 'put')

    def get_residences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_residences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_residences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialAccounts/{0}/residences".format(self._id)
        self._session.call_api(api, attribs, 'delete')

