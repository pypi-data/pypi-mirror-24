# Leviton Cloud Services API model Permission.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Permission(BaseModel):
    def __init__(self, session):
        super(Permission, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/person".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_organization(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/organization".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_invitation(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/invitation".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_management_tier(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/managementTier".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def get_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'get')

    def delete_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'delete')

    def put_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'put')

    def get_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def delete_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions".format(self._id)
        self._session.call_api(api, attribs, 'post')

