# Leviton Cloud Services API model LoadDefinition.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class LoadDefinition(BaseModel):
    def __init__(self, session):
        super(LoadDefinition, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_whitelist(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}/whitelist".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_firmware_list(self, firmware_list, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}/firmwareList/{1}".format(self._id, firmware_list)
        self._session.call_api(api, attribs, 'get')

    def delete_firmware_list(self, firmware_list, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}/firmwareList/{1}".format(self._id, firmware_list)
        self._session.call_api(api, attribs, 'delete')

    def put_firmware_list(self, firmware_list, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}/firmwareList/{1}".format(self._id, firmware_list)
        self._session.call_api(api, attribs, 'put')

    def get_firmware_list(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}/firmwareList".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_firmware_list(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}/firmwareList".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_firmware_list(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}/firmwareList".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}/firmwareList/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/LoadDefinitions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def get_device_definition(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Loads/{0}/deviceDefinition".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_load_definition(self, load_definitions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/loadDefinitions/{1}".format(self._id, load_definitions)
        self._session.call_api(api, attribs, 'get')

    def delete_load_definition(self, load_definitions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/loadDefinitions/{1}".format(self._id, load_definitions)
        self._session.call_api(api, attribs, 'delete')

    def put_load_definition(self, load_definitions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/loadDefinitions/{1}".format(self._id, load_definitions)
        self._session.call_api(api, attribs, 'put')

    def get_load_definitions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/loadDefinitions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_load_definitions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/loadDefinitions".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_load_definitions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/loadDefinitions".format(self._id)
        self._session.call_api(api, attribs, 'delete')

