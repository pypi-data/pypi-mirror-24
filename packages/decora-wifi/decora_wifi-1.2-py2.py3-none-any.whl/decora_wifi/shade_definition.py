# Leviton Cloud Services API model ShadeDefinition.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ShadeDefinition(BaseModel):
    def __init__(self, session):
        super(ShadeDefinition, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_whitelist(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}/whitelist".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ShadeDefinitions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def get_device_definition(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/deviceDefinition".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_shade_definition(self, shade_definitions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions/{1}".format(self._id, shade_definitions)
        self._session.call_api(api, attribs, 'get')

    def delete_shade_definition(self, shade_definitions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions/{1}".format(self._id, shade_definitions)
        self._session.call_api(api, attribs, 'delete')

    def put_shade_definition(self, shade_definitions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions/{1}".format(self._id, shade_definitions)
        self._session.call_api(api, attribs, 'put')

    def get_shade_definitions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_shade_definitions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_shade_definitions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Whitelist/{0}/shadeDefinitions/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

