# Leviton Cloud Services API model Invitation.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Invitation(BaseModel):
    def __init__(self, session):
        super(Invitation, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_organization(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/organization".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/person".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_location(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/location".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'get')

    def delete_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'delete')

    def put_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'put')

    def get_management_tier(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/managementTier".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/residence".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/permissions/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_accept(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Invitations/{0}/accept".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def get_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'get')

    def delete_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'delete')

    def put_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'put')

    def get_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_invitation(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/invitation".format(self._id)
        self._session.call_api(api, attribs, 'get')

