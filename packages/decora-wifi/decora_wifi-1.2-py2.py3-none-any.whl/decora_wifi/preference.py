# Leviton Cloud Services API model Preference.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Preference(BaseModel):
    def __init__(self, session):
        super(Preference, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/{0}/person".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_app(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/{0}/app".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Preferences/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def get_preference(self, preferences, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences/{1}".format(self._id, preferences)
        self._session.call_api(api, attribs, 'get')

    def delete_preference(self, preferences, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences/{1}".format(self._id, preferences)
        self._session.call_api(api, attribs, 'delete')

    def put_preference(self, preferences, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences/{1}".format(self._id, preferences)
        self._session.call_api(api, attribs, 'put')

    def get_preferences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_preferences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_preferences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

