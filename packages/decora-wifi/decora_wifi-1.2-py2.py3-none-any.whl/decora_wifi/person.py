# Leviton Cloud Services API model Person.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Person(BaseModel):
    def __init__(self, session):
        super(Person, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_access_token(self, access_tokens, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/accessTokens/{1}".format(self._id, access_tokens)
        self._session.call_api(api, attribs, 'get')

    def delete_access_token(self, access_tokens, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/accessTokens/{1}".format(self._id, access_tokens)
        self._session.call_api(api, attribs, 'delete')

    def put_access_token(self, access_tokens, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/accessTokens/{1}".format(self._id, access_tokens)
        self._session.call_api(api, attribs, 'put')

    def get_role_mapping(self, role_mappings, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/roleMappings/{1}".format(self._id, role_mappings)
        self._session.call_api(api, attribs, 'get')

    def delete_role_mapping(self, role_mappings, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/roleMappings/{1}".format(self._id, role_mappings)
        self._session.call_api(api, attribs, 'delete')

    def put_role_mapping(self, role_mappings, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/roleMappings/{1}".format(self._id, role_mappings)
        self._session.call_api(api, attribs, 'put')

    def get_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'get')

    def delete_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'delete')

    def put_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'put')

    def get_preference(self, preferences, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences/{1}".format(self._id, preferences)
        self._session.call_api(api, attribs, 'get')

    def delete_preference(self, preferences, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences/{1}".format(self._id, preferences)
        self._session.call_api(api, attribs, 'delete')

    def put_preference(self, preferences, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences/{1}".format(self._id, preferences)
        self._session.call_api(api, attribs, 'put')

    def get_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'get')

    def delete_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'delete')

    def put_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'put')

    def get_management_tier(self, management_tiers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/{1}".format(self._id, management_tiers)
        self._session.call_api(api, attribs, 'get')

    def delete_management_tier(self, management_tiers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/{1}".format(self._id, management_tiers)
        self._session.call_api(api, attribs, 'delete')

    def put_management_tier(self, management_tiers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/{1}".format(self._id, management_tiers)
        self._session.call_api(api, attribs, 'put')

    def put_rel(self, rel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/rel/{1}".format(self._id, rel)
        self._session.call_api(api, attribs, 'put')

    def delete_rel(self, rel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/rel/{1}".format(self._id, rel)
        self._session.call_api(api, attribs, 'delete')

    def head_rel(self, rel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers/rel/{1}".format(self._id, rel)
        self._session.call_api(api, attribs, 'head')

    def get_notification_subscription(self, notification_subscriptions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationSubscriptions/{1}".format(self._id, notification_subscriptions)
        self._session.call_api(api, attribs, 'get')

    def delete_notification_subscription(self, notification_subscriptions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationSubscriptions/{1}".format(self._id, notification_subscriptions)
        self._session.call_api(api, attribs, 'delete')

    def put_notification_subscription(self, notification_subscriptions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationSubscriptions/{1}".format(self._id, notification_subscriptions)
        self._session.call_api(api, attribs, 'put')

    def get_notification_trigger(self, notification_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationTriggers/{1}".format(self._id, notification_triggers)
        self._session.call_api(api, attribs, 'get')

    def delete_notification_trigger(self, notification_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationTriggers/{1}".format(self._id, notification_triggers)
        self._session.call_api(api, attribs, 'delete')

    def put_notification_trigger(self, notification_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationTriggers/{1}".format(self._id, notification_triggers)
        self._session.call_api(api, attribs, 'put')

    def get_residential_permission(self, residential_permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions/{1}".format(self._id, residential_permissions)
        self._session.call_api(api, attribs, 'get')

    def delete_residential_permission(self, residential_permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions/{1}".format(self._id, residential_permissions)
        self._session.call_api(api, attribs, 'delete')

    def put_residential_permission(self, residential_permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions/{1}".format(self._id, residential_permissions)
        self._session.call_api(api, attribs, 'put')

    def get_user_feedback(self, user_feedbacks, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/userFeedbacks/{1}".format(self._id, user_feedbacks)
        self._session.call_api(api, attribs, 'get')

    def delete_user_feedback(self, user_feedbacks, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/userFeedbacks/{1}".format(self._id, user_feedbacks)
        self._session.call_api(api, attribs, 'delete')

    def put_user_feedback(self, user_feedbacks, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/userFeedbacks/{1}".format(self._id, user_feedbacks)
        self._session.call_api(api, attribs, 'put')

    def get_access_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/accessTokens".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_access_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/accessTokens".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_access_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/accessTokens".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/accessTokens/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_role_mappings(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/roleMappings".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_role_mappings(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/roleMappings".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_role_mappings(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/roleMappings".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def delete_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/permissions".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_preferences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_preferences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_preferences(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/preferences".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/managementTiers".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_notification_subscriptions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationSubscriptions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_notification_subscriptions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationSubscriptions".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_notification_subscriptions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationSubscriptions".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_notification_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationTriggers".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_notification_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationTriggers".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_notification_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notificationTriggers".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_residential_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_residential_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_residential_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_user_feedbacks(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/userFeedbacks".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_user_feedbacks(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/userFeedbacks".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_user_feedbacks(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/userFeedbacks".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    @staticmethod
    def post_login(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/login"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_logout(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/logout"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def get_confirm(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/confirm"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def post_reset(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/reset"
        session.call_api(api, attribs, 'post')

    def post_verify_email(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/verifyEmail".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_notify(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/notify".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def post_apply_password(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/applyPassword"
        session.call_api(api, attribs, 'post')

    def get_people(self, people, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/{1}".format(self._id, people)
        self._session.call_api(api, attribs, 'get')

    def delete_people(self, people, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/{1}".format(self._id, people)
        self._session.call_api(api, attribs, 'delete')

    def put_people(self, people, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/{1}".format(self._id, people)
        self._session.call_api(api, attribs, 'put')

    def get_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Permissions/{0}/person".format(self._id)
        self._session.call_api(api, attribs, 'get')

