# Leviton Cloud Services API model Sensor.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Sensor(BaseModel):
    def __init__(self, session):
        super(Sensor, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_area(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/area".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_installation(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/installation".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_device_definition(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/deviceDefinition".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_feed_item(self, feed_items, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/feedItems/{1}".format(self._id, feed_items)
        self._session.call_api(api, attribs, 'get')

    def get_activity_trigger(self, activity_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers/{1}".format(self._id, activity_triggers)
        self._session.call_api(api, attribs, 'get')

    def delete_activity_trigger(self, activity_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers/{1}".format(self._id, activity_triggers)
        self._session.call_api(api, attribs, 'delete')

    def put_activity_trigger(self, activity_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers/{1}".format(self._id, activity_triggers)
        self._session.call_api(api, attribs, 'put')

    def get_sensor_snapshot(self, sensor_snapshots, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/sensorSnapshots/{1}".format(self._id, sensor_snapshots)
        self._session.call_api(api, attribs, 'get')

    def delete_sensor_snapshot(self, sensor_snapshots, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/sensorSnapshots/{1}".format(self._id, sensor_snapshots)
        self._session.call_api(api, attribs, 'delete')

    def put_sensor_snapshot(self, sensor_snapshots, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/sensorSnapshots/{1}".format(self._id, sensor_snapshots)
        self._session.call_api(api, attribs, 'put')

    def get_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/feedItems".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/feedItems/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/activityTriggers".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_sensor_snapshots(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/sensorSnapshots".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_sensor_snapshots(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/sensorSnapshots".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_sensor_snapshots(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/sensorSnapshots".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Sensors/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def get_sensor(self, sensors, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors/{1}".format(self._id, sensors)
        self._session.call_api(api, attribs, 'get')

    def delete_sensor(self, sensors, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors/{1}".format(self._id, sensors)
        self._session.call_api(api, attribs, 'delete')

    def put_sensor(self, sensors, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors/{1}".format(self._id, sensors)
        self._session.call_api(api, attribs, 'put')

    def get_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_sensors(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/sensors".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_sensor(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/{0}/sensor".format(self._id)
        self._session.call_api(api, attribs, 'get')

