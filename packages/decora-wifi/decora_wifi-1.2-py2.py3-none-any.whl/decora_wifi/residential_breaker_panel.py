# Leviton Cloud Services API model ResidentialBreakerPanel.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ResidentialBreakerPanel(BaseModel):
    def __init__(self, session):
        super(ResidentialBreakerPanel, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/residence".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_access_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/accessTokens".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_access_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/accessTokens".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def put_access_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/accessTokens".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def delete_access_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/accessTokens".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_residential_breaker(self, residential_breakers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/residentialBreakers/{1}".format(self._id, residential_breakers)
        self._session.call_api(api, attribs, 'get')

    def delete_residential_breaker(self, residential_breakers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/residentialBreakers/{1}".format(self._id, residential_breakers)
        self._session.call_api(api, attribs, 'delete')

    def put_residential_breaker(self, residential_breakers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/residentialBreakers/{1}".format(self._id, residential_breakers)
        self._session.call_api(api, attribs, 'put')

    def get_residential_breakers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/residentialBreakers".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_residential_breakers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/residentialBreakers".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_residential_breakers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/residentialBreakers".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/residentialBreakers/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def get_discover(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakerPanels/{0}/discover".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_residential_breaker_panel(self, residential_breaker_panels, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels/{1}".format(self._id, residential_breaker_panels)
        self._session.call_api(api, attribs, 'get')

    def delete_residential_breaker_panel(self, residential_breaker_panels, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels/{1}".format(self._id, residential_breaker_panels)
        self._session.call_api(api, attribs, 'delete')

    def put_residential_breaker_panel(self, residential_breaker_panels, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels/{1}".format(self._id, residential_breaker_panels)
        self._session.call_api(api, attribs, 'put')

    def get_residential_breaker_panels(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_residential_breaker_panels(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_residential_breaker_panels(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Residences/{0}/residentialBreakerPanels".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_residential_breaker_panel(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/{0}/residentialBreakerPanel".format(self._id)
        self._session.call_api(api, attribs, 'get')

