# Leviton Cloud Services API model Organization.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Organization(BaseModel):
    def __init__(self, session):
        super(Organization, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_location(self, locations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations/{1}".format(self._id, locations)
        self._session.call_api(api, attribs, 'get')

    def delete_location(self, locations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations/{1}".format(self._id, locations)
        self._session.call_api(api, attribs, 'delete')

    def put_location(self, locations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations/{1}".format(self._id, locations)
        self._session.call_api(api, attribs, 'put')

    def get_people(self, people, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/{1}".format(self._id, people)
        self._session.call_api(api, attribs, 'get')

    def delete_people(self, people, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/{1}".format(self._id, people)
        self._session.call_api(api, attribs, 'delete')

    def put_people(self, people, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/{1}".format(self._id, people)
        self._session.call_api(api, attribs, 'put')

    def put_rel(self, rel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/rel/{1}".format(self._id, rel)
        self._session.call_api(api, attribs, 'put')

    def delete_rel(self, rel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/rel/{1}".format(self._id, rel)
        self._session.call_api(api, attribs, 'delete')

    def head_rel(self, rel, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people/rel/{1}".format(self._id, rel)
        self._session.call_api(api, attribs, 'head')

    def get_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'get')

    def delete_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'delete')

    def put_permission(self, permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions/{1}".format(self._id, permissions)
        self._session.call_api(api, attribs, 'put')

    def get_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'get')

    def delete_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'delete')

    def put_invitation(self, invitations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations/{1}".format(self._id, invitations)
        self._session.call_api(api, attribs, 'put')

    def get_schedule(self, schedules, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/schedules/{1}".format(self._id, schedules)
        self._session.call_api(api, attribs, 'get')

    def delete_schedule(self, schedules, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/schedules/{1}".format(self._id, schedules)
        self._session.call_api(api, attribs, 'delete')

    def put_schedule(self, schedules, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/schedules/{1}".format(self._id, schedules)
        self._session.call_api(api, attribs, 'put')

    def get_holiday(self, holidays, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/holidays/{1}".format(self._id, holidays)
        self._session.call_api(api, attribs, 'get')

    def delete_holiday(self, holidays, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/holidays/{1}".format(self._id, holidays)
        self._session.call_api(api, attribs, 'delete')

    def put_holiday(self, holidays, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/holidays/{1}".format(self._id, holidays)
        self._session.call_api(api, attribs, 'put')

    def get_management_tier(self, management_tiers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers/{1}".format(self._id, management_tiers)
        self._session.call_api(api, attribs, 'get')

    def delete_management_tier(self, management_tiers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers/{1}".format(self._id, management_tiers)
        self._session.call_api(api, attribs, 'delete')

    def put_management_tier(self, management_tiers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers/{1}".format(self._id, management_tiers)
        self._session.call_api(api, attribs, 'put')

    def get_subscription_plan(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/subscriptionPlan".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_people(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/people".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/permissions".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_invitations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/invitations".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_schedules(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/schedules".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_schedules(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/schedules".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_schedules(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/schedules".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_holidays(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/holidays".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_holidays(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/holidays".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_holidays(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/holidays".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_management_tiers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/managementTiers".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/findOne"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def post_update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/update"
        session.call_api(api, attribs, 'post')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def post_add_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/addPerson".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_remove_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/removePerson".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def post_generate_subscription_report(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/generateSubscriptionReport"
        session.call_api(api, attribs, 'post')

    def post_subscribe_to_plan(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/subscribeToPlan".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_cancel_subscription(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/cancelSubscription".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def get_organization(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/organization".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_organization(self, organizations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations/{1}".format(self._id, organizations)
        self._session.call_api(api, attribs, 'get')

    def delete_organization(self, organizations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations/{1}".format(self._id, organizations)
        self._session.call_api(api, attribs, 'delete')

    def put_organization(self, organizations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations/{1}".format(self._id, organizations)
        self._session.call_api(api, attribs, 'put')

    def get_organizations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_organizations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_organizations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Apps/{0}/organizations".format(self._id)
        self._session.call_api(api, attribs, 'delete')

