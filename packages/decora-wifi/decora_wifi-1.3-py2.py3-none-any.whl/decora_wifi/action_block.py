# Leviton Cloud Services API model ActionBlock.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ActionBlock(BaseModel):
    def __init__(self, session):
        super(ActionBlock, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_activity(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/activity".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_installation(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/installation".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_action(self, actions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/actions/{1}".format(self._id, actions)
        self._session.call_api(api, attribs, 'get')

    def delete_action(self, actions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/actions/{1}".format(self._id, actions)
        self._session.call_api(api, attribs, 'delete')

    def put_action(self, actions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/actions/{1}".format(self._id, actions)
        self._session.call_api(api, attribs, 'put')

    def get_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/actions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/actions".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/actions".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/actions/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def get_action_block(self, action_blocks, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/actionBlocks/{1}".format(self._id, action_blocks)
        self._session.call_api(api, attribs, 'get')

    def delete_action_block(self, action_blocks, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/actionBlocks/{1}".format(self._id, action_blocks)
        self._session.call_api(api, attribs, 'delete')

    def put_action_block(self, action_blocks, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/actionBlocks/{1}".format(self._id, action_blocks)
        self._session.call_api(api, attribs, 'put')

    def get_action_blocks(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/actionBlocks".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_action_blocks(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/actionBlocks".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_action_blocks(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/actionBlocks".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_action_block(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Actions/{0}/actionBlock".format(self._id)
        self._session.call_api(api, attribs, 'get')

