# Leviton Cloud Services API model OauthToken.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class OauthToken(BaseModel):
    def __init__(self, session):
        super(OauthToken, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_api_partner(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/{0}/apiPartner".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens"
        session.call_api(api, attribs, 'put')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    @staticmethod
    def get_discover_devices(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/discoverDevices"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def post_control_device(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/controlDevice"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def get_poll_device(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/pollDevice"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def post_subscribe_to_notifications(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/OauthTokens/subscribeToNotifications"
        session.call_api(api, attribs, 'post')

    def get_oauth_token(self, oauth_tokens, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens/{1}".format(self._id, oauth_tokens)
        self._session.call_api(api, attribs, 'get')

    def delete_oauth_token(self, oauth_tokens, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens/{1}".format(self._id, oauth_tokens)
        self._session.call_api(api, attribs, 'delete')

    def put_oauth_token(self, oauth_tokens, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens/{1}".format(self._id, oauth_tokens)
        self._session.call_api(api, attribs, 'put')

    def get_oauth_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_oauth_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_oauth_tokens(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ApiPartners/{0}/oauthTokens/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

