# Leviton Cloud Services API model Activity.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Activity(BaseModel):
    def __init__(self, session):
        super(Activity, self).__init__(session)

    def get_activitie(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_installation(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/installation".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_activity_trigger(self, activity_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers/{1}".format(self._id, activity_triggers)
        self._session.call_api(api, attribs, 'get')

    def delete_activity_trigger(self, activity_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers/{1}".format(self._id, activity_triggers)
        self._session.call_api(api, attribs, 'delete')

    def put_activity_trigger(self, activity_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers/{1}".format(self._id, activity_triggers)
        self._session.call_api(api, attribs, 'put')

    def get_action_block(self, action_blocks, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/actionBlocks/{1}".format(self._id, action_blocks)
        self._session.call_api(api, attribs, 'get')

    def delete_action_block(self, action_blocks, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/actionBlocks/{1}".format(self._id, action_blocks)
        self._session.call_api(api, attribs, 'delete')

    def put_action_block(self, action_blocks, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/actionBlocks/{1}".format(self._id, action_blocks)
        self._session.call_api(api, attribs, 'put')

    def get_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/activityTriggers/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_action_blocks(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/actionBlocks".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_action_blocks(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/actionBlocks".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_action_blocks(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/actionBlocks".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def post_activities(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def put_activities(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def post_replace_or_create(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/replaceOrCreate".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_upsert_with_where(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/upsertWithWhere".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def get_activities(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_find_one(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/findOne".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def delete_activitie(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def put_activitie(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Activities/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def get_activitie(self, activities, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activities/{1}".format(self._id, activities)
        self._session.call_api(api, attribs, 'get')

    def delete_activitie(self, activities, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activities/{1}".format(self._id, activities)
        self._session.call_api(api, attribs, 'delete')

    def put_activitie(self, activities, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activities/{1}".format(self._id, activities)
        self._session.call_api(api, attribs, 'put')

    def delete_activities(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/activities".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_activity(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ActionBlocks/{0}/activity".format(self._id)
        self._session.call_api(api, attribs, 'get')

