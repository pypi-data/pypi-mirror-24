# Leviton Cloud Services API model ResidentialAction.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ResidentialAction(BaseModel):
    def __init__(self, session):
        super(ResidentialAction, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_residential_activity(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}/residentialActivity".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_residential_scene(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}/residentialScene".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_residential_schedule(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}/residentialSchedule".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    @staticmethod
    def post_execute(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialActions/execute"
        session.call_api(api, attribs, 'post')

    def get_residential_action(self, residential_actions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions/{1}".format(self._id, residential_actions)
        self._session.call_api(api, attribs, 'get')

    def delete_residential_action(self, residential_actions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions/{1}".format(self._id, residential_actions)
        self._session.call_api(api, attribs, 'delete')

    def put_residential_action(self, residential_actions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions/{1}".format(self._id, residential_actions)
        self._session.call_api(api, attribs, 'put')

    def get_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_residential_actions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialScenes/{0}/residentialActions/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

