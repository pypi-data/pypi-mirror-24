# Leviton Cloud Services API model Location.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Location(BaseModel):
    def __init__(self, session):
        super(Location, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_organization(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/organization".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_installation(self, installations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/installations/{1}".format(self._id, installations)
        self._session.call_api(api, attribs, 'get')

    def delete_installation(self, installations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/installations/{1}".format(self._id, installations)
        self._session.call_api(api, attribs, 'delete')

    def put_installation(self, installations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/installations/{1}".format(self._id, installations)
        self._session.call_api(api, attribs, 'put')

    def get_holiday(self, holidays, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/holidays/{1}".format(self._id, holidays)
        self._session.call_api(api, attribs, 'get')

    def delete_holiday(self, holidays, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/holidays/{1}".format(self._id, holidays)
        self._session.call_api(api, attribs, 'delete')

    def put_holiday(self, holidays, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/holidays/{1}".format(self._id, holidays)
        self._session.call_api(api, attribs, 'put')

    def get_management_tier(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/managementTier".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_feed_item(self, feed_items, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/feedItems/{1}".format(self._id, feed_items)
        self._session.call_api(api, attribs, 'get')

    def get_installations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/installations".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_installations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/installations".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_installations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/installations".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/installations/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_holidays(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/holidays".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_holidays(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/holidays".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_holidays(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/holidays".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/feedItems".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def get_installers_near(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Locations/{0}/installersNear".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_location(self, locations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations/{1}".format(self._id, locations)
        self._session.call_api(api, attribs, 'get')

    def delete_location(self, locations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations/{1}".format(self._id, locations)
        self._session.call_api(api, attribs, 'delete')

    def put_location(self, locations, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations/{1}".format(self._id, locations)
        self._session.call_api(api, attribs, 'put')

    def get_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_locations(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Organizations/{0}/locations".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_location(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/location".format(self._id)
        self._session.call_api(api, attribs, 'get')

