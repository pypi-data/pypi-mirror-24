# Leviton Cloud Services API model Shade.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Shade(BaseModel):
    def __init__(self, session):
        super(Shade, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_area(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/area".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_installation(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/installation".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_device_definition(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/deviceDefinition".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_feed_item(self, feed_items, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/feedItems/{1}".format(self._id, feed_items)
        self._session.call_api(api, attribs, 'get')

    def get_activity_trigger(self, activity_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers/{1}".format(self._id, activity_triggers)
        self._session.call_api(api, attribs, 'get')

    def delete_activity_trigger(self, activity_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers/{1}".format(self._id, activity_triggers)
        self._session.call_api(api, attribs, 'delete')

    def put_activity_trigger(self, activity_triggers, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers/{1}".format(self._id, activity_triggers)
        self._session.call_api(api, attribs, 'put')

    def get_feed_items(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/feedItems".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/feedItems/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_activity_triggers(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/activityTriggers".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Shades/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def get_shade(self, shades, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/shades/{1}".format(self._id, shades)
        self._session.call_api(api, attribs, 'get')

    def delete_shade(self, shades, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/shades/{1}".format(self._id, shades)
        self._session.call_api(api, attribs, 'delete')

    def put_shade(self, shades, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/shades/{1}".format(self._id, shades)
        self._session.call_api(api, attribs, 'put')

    def get_shades(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/shades".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_shades(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/shades".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_shades(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Installations/{0}/shades".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_shade(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/FeedItems/{0}/shade".format(self._id)
        self._session.call_api(api, attribs, 'get')

