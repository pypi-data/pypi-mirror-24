# Leviton Cloud Services API model Ifttt.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class Ifttt(BaseModel):
    def __init__(self, session):
        super(Ifttt, self).__init__(session)

    def get_ifttt(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_status(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/status".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_setup(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/test/setup".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def get_info(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/user/info".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_toggle_switch(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/toggle_switch".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_switch_on(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/triggers/switch_on".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_set_brightness(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/set_brightness".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_brighten_switch(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/brighten_switch".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_dim_switch(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/dim_switch".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_run_scene(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/run_scene".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_run_activity(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/run_activity".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_toggle_room_off(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/toggle_room_off".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_toggle_room_on(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/toggle_room_on".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def post_options(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ifttt/v1/actions/toggle_switch/fields/name/options".format(self._id)
        self._session.call_api(api, attribs, 'post')

