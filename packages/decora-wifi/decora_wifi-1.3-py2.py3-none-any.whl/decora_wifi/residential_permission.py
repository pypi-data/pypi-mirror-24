# Leviton Cloud Services API model ResidentialPermission.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ResidentialPermission(BaseModel):
    def __init__(self, session):
        super(ResidentialPermission, self).__init__(session)

    def get(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_person(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}/person".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_residential_account(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}/residentialAccount".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_residence(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}/residence".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def get_invitation(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}/invitation".format(self._id)
        self._session.call_api(api, attribs, 'get')

    @staticmethod
    def create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def update(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions"
        session.call_api(api, attribs, 'put')

    @staticmethod
    def post_replace_or_create(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/replaceOrCreate"
        session.call_api(api, attribs, 'post')

    @staticmethod
    def post_upsert_with_where(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/upsertWithWhere"
        session.call_api(api, attribs, 'post')

    def get_exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}/exists".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_replace(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}/replace".format(self._id)
        self._session.call_api(api, attribs, 'post')

    @staticmethod
    def get(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions"
        session.call_api(api, attribs, 'get')

    @staticmethod
    def get_find_one(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/findOne"
        session.call_api(api, attribs, 'get')

    def delete(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    @staticmethod
    def get_count(session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/count"
        session.call_api(api, attribs, 'get')

    def update(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialPermissions/{0}".format(self._id)
        self._session.call_api(api, attribs, 'put')

    def get_residential_permission(self, residential_permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions/{1}".format(self._id, residential_permissions)
        self._session.call_api(api, attribs, 'get')

    def delete_residential_permission(self, residential_permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions/{1}".format(self._id, residential_permissions)
        self._session.call_api(api, attribs, 'delete')

    def put_residential_permission(self, residential_permissions, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions/{1}".format(self._id, residential_permissions)
        self._session.call_api(api, attribs, 'put')

    def get_residential_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions".format(self._id)
        self._session.call_api(api, attribs, 'get')

    def post_residential_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions".format(self._id)
        self._session.call_api(api, attribs, 'post')

    def delete_residential_permissions(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions".format(self._id)
        self._session.call_api(api, attribs, 'delete')

    def get_count(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/Person/{0}/residentialPermissions/count".format(self._id)
        self._session.call_api(api, attribs, 'get')

